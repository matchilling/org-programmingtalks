webpackJsonp([0x8ddd3046c58c],{3079:function(e,n){e.exports={data:{talkJson:{description:"Talk by ACM A.M. Turing Laureate Dana S. Scott during the ACM A.M. Turing Centenary Celebration, June, 2012.\n\nAbstract:\n\nA very fast development in the early 1930s, following Hilbert's codification of Mathematical Logic, led to the Incompleteness Theorems, Computable Functions, Undecidability Theorems, and the general formulation of recursive Function Theory. The so-called Lambda Calculus played a key role. The history of these developments will be traced, and the much later place of Lambda Calculus in Mathematics and Programming-Language Theory will be outlined.",meta:{duration:"PT30M8S"},presenter:{name:null},slug:"lambda-calculus-then-and-now",source:{id:"SphBW9ILVPU",provider:"youtube"},tag:["Calculus","Dana S. Scott","ACM","ACM A.M. Turing Award","Alan Turing","Nobel Prize","in","computing","Contest","Entry","Computer","Electronics","Gadget","Technology","Space","Physics","Mechanics","Experiment","Math"],title:"Lambda Calculus Then and Now"},allTalkJson:{edges:[{node:{description:"Philip Wadler, Professor of Theoretical Computer Science at the University of Edinburgh, contends that the foundations of computing lay in a coincidence: Church's lambda calculus (1933), Herbrand and Godel's recursive functions (1934), and Turing's machines (1935) all defined the same model of computation. \n\n\nHe gave this lecture on the occasion of Princeton University's centennial celebration of Alan Turing. Learn more at www.princeton.edu/turing\n\n#turingprinceton",meta:{duration:"PT1H3M41S"},presenter:{name:null},source:{id:"2PJ_DbKGFUA",provider:"youtube"},slug:"philip-wadler-churchs-coincidences",tag:["Philip Wadler","University of Edinburgh","Princeton","Alan Turing","computer science","lambda calculus","Turing machine","#turingprinceton"],thumbnails:{default:{url:"https://i.ytimg.com/vi/2PJ_DbKGFUA/default.jpg",height:90,width:120}},title:"Philip Wadler: Church's Coincidences"}},{node:{description:"Stephen Wolfram, creator of Mathematica, talks about his quest to make all knowledge computational -- able to be searched, processed and manipulated. His new search engine, Wolfram Alpha, has no lesser goal than to model and explain the physics underlying the universe.",meta:{duration:"PT20M30S"},presenter:{name:"Stephen Wolfram"},source:{id:"60P7717-XOQ",provider:"youtube"},slug:"computing-a-theory-of-everything",tag:["TEDTalks","Physics"],thumbnails:{default:{url:"https://i.ytimg.com/vi/60P7717-XOQ/default.jpg",height:90,width:120}},title:"Computing a theory of everything"}},{node:{description:"Slides: http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf\n\nThis was a talk I gave at the second New York Haskell User Group Meeting (http://www.meetup.com/NY-Haskell/) on the new lens library, which provides a highly composable toolbox for accessing and modifying multiple parts of data structures.\n\nStarting with building blocks such as fmap and (.), we build up combinators suitable for working with a wide array of data structures. These generalize the notions you already know how to use into a form that is easier to compose and simultaneously allow them to be used for monomorphic containers such as Data.Text. \n\nAll without compromising on your ability to reason about them using laws!\n\nFinally, once I've built up some foundations, I do a bit of a deep dive, exploring consequences of this design. In particular we discuss the efficient generic programming programming framework exported by lens, and type-safe Traversal-based zippers.\n\nFamiliarity with the Applicative and Traversable classes from the Haskell base libraries will be helpful (links provided below), but a basic understanding of the concepts get introduced as I go along. \n\nUseful (but not mandatory) references:\n\nThe lens library and documentation: http://hackage.haskell.org/package/lens\nA previous, more introductory talk on how to use the lenses Edward Kmett wrote for the scalaz in the Scala programming language: https://www.youtube.com/watch?v=efv0SQNde5Q\nThe original Applicative paper: http://www.soi.city.ac.uk/~ross/papers/Applicative.pdf\nLots of information on Traversable: http://www.cs.ox.ac.uk/jeremy.gibbons/publications/iterator.pdf\nA write-up of this talk, as presented at the Bay Area Haskell Users Group: http://google-opensource.blogspot.com/2012/10/lenses-folds-and-traversals-haskell.html\n\nThe original Keynote version of the slides are available from http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.key\n\nThanks go to Johan Kiviniemi, who worked magic when it came to cleaning up the audio for this recording!",meta:{duration:"PT1H54M46S"},presenter:{name:null},source:{id:"cefnmjtAolY",provider:"youtube"},slug:"lenses-folds-and-traversals",tag:["Haskell","Functional Programming","Haskell","Mathematics","Lecture","Talk","Academic","Talking","Computer"],thumbnails:{default:{url:"https://i.ytimg.com/vi/cefnmjtAolY/default.jpg",height:90,width:120}},title:"Lenses, Folds, and Traversals"}},{node:{description:"HackHands.com interviews Jafar Husain (Technical Lead at Netflix) about Reactive Programming concepts and it's usage on Netflix.com.\n\nAbout the Interviewee:\nJafar Husain is a highly skilled software developer with twelve-years of experience designing and developing enterprise software for prestigious corporations and organizations. Jafar Husain currently works for Netflix.",meta:{duration:"PT9M18S"},presenter:{name:null},source:{id:"dwP1TNXE6fc",provider:"youtube"},slug:"reactive-programming-overview-jafar-husain-from-netflix",tag:["Reactive Programming","Software","Netflix (Business Operation)","Computer Programming (Conference Subject)","Database (Software Genre)","nosql","reactive extensions","Reactive.io","Technology"],thumbnails:{default:{url:"https://i.ytimg.com/vi/dwP1TNXE6fc/default.jpg",height:90,width:120}},title:"Reactive Programming Overview (Jafar Husain from Netflix)"}},{node:{description:'Barbara Liskov, Professor of Electrical Engineering and Computer Science\nat the Massachusetts Institute of Technology, discusses "Programming the Turing Machine" in a lecture given on the occasion of Princeton University\'s centennial celebration of Alan Turing. Learn more at www.princeton.edu/turing\n\n#turingprinceton',meta:{duration:"PT1H6M10S"},presenter:{name:null},source:{id:"ibRar7sWulM",provider:"youtube"},slug:"barbara-liskov-programming-the-turing-machine",tag:["Barbara Liskov","MIT","Turing machine","Princeton","Turing centennial","Alan Turing","#turingprinceton"],thumbnails:{default:{url:"https://i.ytimg.com/vi/ibRar7sWulM/default.jpg",height:90,width:120}},title:"Barbara Liskov: Programming the Turing Machine"}},{node:{description:'Andrew Odlyzko, Professor of Mathematics at the University of Minnesota, discusses "Turing and the Riemann zeta function" in a lecture given on the occasion of Princeton University\'s centennial celebration of Alan Turing. Learn more at www.princeton.edu/turing\n\n#turingprinceton',meta:{duration:"PT1H6M54S"},presenter:{name:null},source:{id:"pQS7X_8iTCA",provider:"youtube"},slug:"andrew-odlyzko-turing-and-the-riemann-zeta-function",tag:["in","lecture","given","on","the","occasion","of","Princeton","University's","centennial","celebration","Alan","Turing.","Learn","more","at","Odlyzko","#turingprinceton","University of Minnesota","Riemann zeta function","Alan Turing","Turing centennial","computer science"],thumbnails:{default:{url:"https://i.ytimg.com/vi/pQS7X_8iTCA/default.jpg",height:90,width:120}},title:"Andrew Odlyzko: Turing and the Riemann zeta function"}},{node:{description:"How Billions of Trivial Data Points can Lead to Understanding\r\n\r\nPeter Norvig (Director of Research, Google) presents as part of the UBC Department of Computer Science's Distinguished Lecture Series, September 23, 2010.\r\n\r\nIn decades past, models of human language were wrought from the sweat and pencils of linguists. In the modern day, it is more common to think of language modeling as an exercise in probabilistic inference from data: we observe how words and combinations of words are used, and from that build computer models of what the phrases mean. This approach is hopeless with a small amount of data, but somewhere in the range of millions or billions of examples, we pass a threshold, and the hopeless suddenly becomes effective, and computer models sometimes meet or exceed human performance. This talk gives examples of the data available in large repositories of text, images, and videos, and shows some tasks that can be accomplished with the resulting models.",meta:{duration:"PT1H2M57S"},presenter:{name:null},source:{id:"yvDCzhbjYWs",provider:"youtube"},slug:"peter-norvig-the-unreasonable-effectiveness-of-data",tag:["UBC","Computer","Science","CPSC","Distinguished","Lecture","Series","DLS","Peter","Norvig","PeterNorvig"],thumbnails:{default:{url:"https://i.ytimg.com/vi/yvDCzhbjYWs/default.jpg",height:90,width:120}},title:"Peter Norvig - The Unreasonable Effectiveness of Data"}}]}},pathContext:{slug:"lambda-calculus-then-and-now",tags:["Calculus","Dana S. Scott","ACM","ACM A.M. Turing Award","Alan Turing","Nobel Prize","in","computing","Contest","Entry","Computer","Electronics","Gadget","Technology","Space","Physics","Mechanics","Experiment","Math"]}}}});
//# sourceMappingURL=path---talk-lambda-calculus-then-and-now-3859518153baf052fa79.js.map