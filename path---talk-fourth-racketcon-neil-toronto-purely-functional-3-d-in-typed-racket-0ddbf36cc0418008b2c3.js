webpackJsonp([0x979a7c93818e],{2973:function(e,t){e.exports={data:{talkJson:{description:'Efficient 3D engines use scene databases to quickly answer queries such as "What must be drawn if the viewer is here and looking this direction?" and "Return all non-opaque triangles in back-to-front order." Most 3D engines are written in an imperative style, even though most scene databases are structured as trees and operations on them can be done without destructive updates. In this talk, I give a sneak peak at a standalone 3D engine with a purely functional API, comprised mostly of combinators that operate on scene databases. I intend it to replace Plot\'s internal 3D engine, which draws on Cairo device contexts, but also be flexible and efficient enough to render simple game scenes using OpenGL.\n\nNeil Toronto is a recent PhD graduate from Brigham Young University, now researching programming language support for reliable mathematical computation at University of Maryland, College Park. He writes programs to draw pretty pictures in his nonexistent spare time.',meta:{duration:"PT22M16S"},presenter:{name:null},slug:"fourth-racketcon-neil-toronto-purely-functional-3d-in-typed-racket",source:{id:"t3xdv4UP9-U",provider:"youtube"},tag:[],title:"(fourth RacketCon): Neil Toronto â€” Purely Functional 3D in Typed Racket"},allTalkJson:null},pathContext:{slug:"fourth-racketcon-neil-toronto-purely-functional-3d-in-typed-racket",tags:[]}}}});
//# sourceMappingURL=path---talk-fourth-racketcon-neil-toronto-purely-functional-3-d-in-typed-racket-0ddbf36cc0418008b2c3.js.map