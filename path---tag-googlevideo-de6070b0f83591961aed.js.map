{"version":3,"sources":["webpack:///path---tag-googlevideo-de6070b0f83591961aed.js","webpack:///./.cache/json/tag-googlevideo.json"],"names":["webpackJsonp","2321","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,0uCAAAC,MAAgwCC,SAAA,aAAuBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,4CAAAC,KAAA,eAAAC,YAAwFC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,iDAA0DhB,MAAQC,YAAA,+PAAAC,MAAsRC,SAAA,YAAsBC,WAAcC,KAAA,cAAoBC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,mCAAAC,KAAA,eAAAC,YAA+EC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,uCAAgDhB,MAAQC,YAAA,ixBAAAC,MAAuyBC,SAAA,cAAwBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,eAAAC,KAAA,eAAAC,YAA2DC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,oBAA4BC,aAAgBR,KAAA,cAAAC,IAAA","file":"path---tag-googlevideo-de6070b0f83591961aed.js","sourcesContent":["webpackJsonp([216199500381812],{\n\n/***/ 2321:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Google Tech Talks\\r\\nApril 27, 2007\\r\\n\\r\\nABSTRACT\\r\\n\\r\\nFaith and evolution provide complementary--and sometimes conflicting--models of the world, and they also can model the adoption of programming languages. Adherents of competing paradigms, such as functional and object-oriented programming, often appear motivated by faith. Families of related languages, such as C, C++, Java, and C#, may arise from pressures of evolution. As designers of languages, adoption rates provide us with scientific data, but the belief that elegant designs are better is a matter of faith. This talk traces one concept, second-order quantification, from its inception in the symbolic logic of Frege through to the generic features introduced in Java 5, touching on features of faith and evolution. The remarkable correspondence between natural deduction and functional programming informed the design of type classes in Haskell. Generics in Java evolved directly from Haskell type classes, and are designed to support evolution from legacy code to generic code. Links, a successor to Haskell aimed at AJAX-style three-tier web applications, aims to reconcile some of the conflict between dynamic and static approaches to typing.\\n\\nGoogle EngEDU\\nSpeaker: Philip Wadler\",\"meta\":{\"duration\":\"PT1H6M54S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"8frGknO8rIg\",\"provider\":\"youtube\"},\"slug\":\"faith-evolution-and-programming-languages\",\"tag\":[\"googlevideo\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/8frGknO8rIg/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Faith, Evolution, and Programming Languages\"}},{\"node\":{\"description\":\"Guy Steele's keynote at the 1998 ACM OOPSLA conference on \\\"Growing a Language\\\" discusses the importance of and issues associated with designing a programming language that can be grown by its users.\\n\\nACM OOPSLA conference\\nSpeaker: Guy L. Steele Jr.\",\"meta\":{\"duration\":\"PT53M31S\"},\"presenter\":{\"name\":\"Guy Steele\"},\"source\":{\"id\":\"_ahvzDzKdB0\",\"provider\":\"youtube\"},\"slug\":\"growing-a-language-by-guy-steele\",\"tag\":[\"googlevideo\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/_ahvzDzKdB0/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Growing a Language, by Guy Steele\"}},{\"node\":{\"description\":\"Jane Street Capital is a proprietary trading company that has shifted from developing software in mainstream programming languages to developing software almost entirely in OCaml, a statically typed functional programming language that has only modest industrial use. The scope of the enterprise is small but growing: Jane Street now has over 30 OCaml programmers that have collectively written hundreds of thousands of lines of OCaml code. OCaml is used for building everything from trading systems to research infrastructure to user interfaces to systems administration tools. This talk will discuss the motivations behind Jane Street's adoption of OCaml, and why we think that statically typed functional programming languages are a good ﬁt for the world of trading and ﬁnance.\\n\",\"meta\":{\"duration\":\"PT1H12M43S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"hKcOkWzj0_s\",\"provider\":\"youtube\"},\"slug\":\"caml-trading\",\"tag\":[\"googlevideo\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/hKcOkWzj0_s/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Caml Trading\"}}]}},\"pathContext\":{\"slug\":\"googlevideo\",\"tag\":\"googlevideo\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tag-googlevideo-de6070b0f83591961aed.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Google Tech Talks\\r\\nApril 27, 2007\\r\\n\\r\\nABSTRACT\\r\\n\\r\\nFaith and evolution provide complementary--and sometimes conflicting--models of the world, and they also can model the adoption of programming languages. Adherents of competing paradigms, such as functional and object-oriented programming, often appear motivated by faith. Families of related languages, such as C, C++, Java, and C#, may arise from pressures of evolution. As designers of languages, adoption rates provide us with scientific data, but the belief that elegant designs are better is a matter of faith. This talk traces one concept, second-order quantification, from its inception in the symbolic logic of Frege through to the generic features introduced in Java 5, touching on features of faith and evolution. The remarkable correspondence between natural deduction and functional programming informed the design of type classes in Haskell. Generics in Java evolved directly from Haskell type classes, and are designed to support evolution from legacy code to generic code. Links, a successor to Haskell aimed at AJAX-style three-tier web applications, aims to reconcile some of the conflict between dynamic and static approaches to typing.\\n\\nGoogle EngEDU\\nSpeaker: Philip Wadler\",\"meta\":{\"duration\":\"PT1H6M54S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"8frGknO8rIg\",\"provider\":\"youtube\"},\"slug\":\"faith-evolution-and-programming-languages\",\"tag\":[\"googlevideo\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/8frGknO8rIg/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Faith, Evolution, and Programming Languages\"}},{\"node\":{\"description\":\"Guy Steele's keynote at the 1998 ACM OOPSLA conference on \\\"Growing a Language\\\" discusses the importance of and issues associated with designing a programming language that can be grown by its users.\\n\\nACM OOPSLA conference\\nSpeaker: Guy L. Steele Jr.\",\"meta\":{\"duration\":\"PT53M31S\"},\"presenter\":{\"name\":\"Guy Steele\"},\"source\":{\"id\":\"_ahvzDzKdB0\",\"provider\":\"youtube\"},\"slug\":\"growing-a-language-by-guy-steele\",\"tag\":[\"googlevideo\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/_ahvzDzKdB0/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Growing a Language, by Guy Steele\"}},{\"node\":{\"description\":\"Jane Street Capital is a proprietary trading company that has shifted from developing software in mainstream programming languages to developing software almost entirely in OCaml, a statically typed functional programming language that has only modest industrial use. The scope of the enterprise is small but growing: Jane Street now has over 30 OCaml programmers that have collectively written hundreds of thousands of lines of OCaml code. OCaml is used for building everything from trading systems to research infrastructure to user interfaces to systems administration tools. This talk will discuss the motivations behind Jane Street's adoption of OCaml, and why we think that statically typed functional programming languages are a good ﬁt for the world of trading and ﬁnance.\\n\",\"meta\":{\"duration\":\"PT1H12M43S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"hKcOkWzj0_s\",\"provider\":\"youtube\"},\"slug\":\"caml-trading\",\"tag\":[\"googlevideo\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/hKcOkWzj0_s/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Caml Trading\"}}]}},\"pathContext\":{\"slug\":\"googlevideo\",\"tag\":\"googlevideo\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tag-googlevideo.json\n// module id = 2321\n// module chunks = 216199500381812"],"sourceRoot":""}