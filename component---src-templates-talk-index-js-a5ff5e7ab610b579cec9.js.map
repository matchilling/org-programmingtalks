{"version":3,"sources":["webpack:///./src/templates/talk/index.js"],"names":["TalkTemplate","render","talk","this","props","data","talkJson","title","presenter","name","meta","content","description","videoId","source","id","className","duration","path","slug","String","slugify","tags","tag","map","list","normalizeResult","allTalkJson","React","Component","query"],"mappings":"mVAWqBA,E,gLACnBC,OAAA,WACE,IAAMC,EAAOC,KAAKC,MAAMC,KAAKC,SAE7B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MACEL,EAAKM,UAAUC,KACRP,EAAKK,MADZ,OACwBL,EAAKM,UAAUC,KACnCP,EAAKK,MAEXG,KAAM,CAAC,CAAED,KAAM,cAAeE,QAAST,EAAKU,gBAG9C,kBAAC,IAAD,CAAQC,QAASX,EAAKY,OAAOC,KAE7B,yBAAKC,UAAU,eACb,kBAAC,IAAD,MACA,kBAAC,IAAD,CACEJ,YAAaV,EAAKU,YAClBK,SAAUf,EAAKQ,KAAKO,SACpBC,KAAI,SAAWhB,EAAKiB,KACpBX,UAAW,CACTC,KAAMP,EAAKM,UAAUC,KACrBS,KAAK,YAAaE,IAAOC,QAAQnB,EAAKM,UAAUC,OAElDa,KAAMpB,EAAKqB,IAAIC,KAAI,SAAAD,GACjB,MAAO,CAAEd,KAAMc,EAAKL,KAAK,QAASE,IAAOC,QAAQE,OAEnDhB,MAAOL,EAAKK,QAGd,kBAAC,IAAD,CACEkB,KAAMC,0BAAgBvB,KAAKC,MAAMC,KAAKsB,aAAaH,KAAI,SAAAtB,GACrD,OAAO,OAAP,QACEgB,KAAK,SAAUhB,EAAKiB,KACpBG,KAAMpB,EAAKqB,IAAIC,KAAI,SAAAD,GACjB,MAAO,CAAEd,KAAMc,EAAKL,KAAK,QAASE,IAAOC,QAAQE,OAEnDf,UAAW,CACTC,KAAMP,EAAKM,UAAUC,KACrBS,KAAK,YAAaE,IAAOC,QAAQnB,EAAKM,UAAUC,QAE/CP,MAGPK,MAAM,qB,GA/CwBqB,IAAMC,WAwDnCC,EAAK","file":"component---src-templates-talk-index-js-a5ff5e7ab610b579cec9.js","sourcesContent":["import Helmet from 'react-helmet'\nimport { normalizeResult } from '../../utils/graphql'\nimport Player from '../../components/Player'\nimport React from 'react'\nimport Search from '../../components/Search'\nimport String from '../../utils/string'\nimport Talk from '../../components/Talk'\nimport TalkList from '../../components/TalkList'\nimport { graphql } from 'gatsby'\nimport Layout from '../../components/Layout'\n\nexport default class TalkTemplate extends React.Component {\n  render() {\n    const talk = this.props.data.talkJson\n\n    return (\n      <Layout>\n        <Helmet\n          title={\n            talk.presenter.name\n              ? `${talk.title} by ${talk.presenter.name}`\n              : talk.title\n          }\n          meta={[{ name: 'description', content: talk.description }]}\n        />\n\n        <Player videoId={talk.source.id} />\n\n        <div className=\"row content\">\n          <Search />\n          <Talk\n            description={talk.description}\n            duration={talk.meta.duration}\n            path={`/talk/${talk.slug}`}\n            presenter={{\n              name: talk.presenter.name,\n              path: `/speaker/${String.slugify(talk.presenter.name)}`,\n            }}\n            tags={talk.tag.map(tag => {\n              return { name: tag, path: `/tag/${String.slugify(tag)}` }\n            })}\n            title={talk.title}\n          />\n\n          <TalkList\n            list={normalizeResult(this.props.data.allTalkJson).map(talk => {\n              return {\n                path: `/talk/${talk.slug}`,\n                tags: talk.tag.map(tag => {\n                  return { name: tag, path: `/tag/${String.slugify(tag)}` }\n                }),\n                presenter: {\n                  name: talk.presenter.name,\n                  path: `/speaker/${String.slugify(talk.presenter.name)}`,\n                },\n                ...talk,\n              }\n            })}\n            title=\"Related Talks\"\n          />\n        </div>\n      </Layout>\n    )\n  }\n}\n\n/*eslint no-undef: \"off\"*/\nexport const query = graphql`\n  query TalkQuery($slug: String, $tags: [String]) {\n    talkJson(slug: { eq: $slug }) {\n      description\n      meta {\n        duration\n      }\n      presenter {\n        name\n      }\n      slug\n      source {\n        id\n        provider\n      }\n      tag\n      title\n    }\n    allTalkJson(\n      limit: 10\n      filter: { tag: { in: $tags }, slug: { ne: $slug } }\n    ) {\n      edges {\n        node {\n          description\n          meta {\n            duration\n          }\n          presenter {\n            name\n          }\n          source {\n            id\n            provider\n          }\n          slug\n          tag\n          thumbnails {\n            default {\n              url\n              height\n              width\n            }\n          }\n          title\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}