{"version":3,"sources":["webpack:///path---talk-minimizing-the-slippery-surface-of-failure-jon-pretty-05564b005e15fdbd261f.js","webpack:///./.cache/json/talk-minimizing-the-slippery-surface-of-failure-jon-pretty.json"],"names":["webpackJsonp","3090","module","exports","data","talkJson","description","meta","duration","presenter","name","slug","source","id","provider","tag","title","allTalkJson","edges","node","thumbnails","default","url","height","width","pathContext","tags"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,UAAYC,YAAA,kiCAAAC,MAAwjCC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,KAAA,wDAAAC,QAA0EC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,SAAAC,MAAA,2DAAmFC,aAAgBC,QAAUC,MAAQb,YAAA,uZAAAC,MAA6aC,SAAA,YAAsBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,uDAAAI,KAAA,4GAAAK,YAAgMC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,2DAAoEG,MAAQb,YAAA,usBAAAC,MAA6tBC,SAAA,cAAwBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,oBAAAI,KAAA,uEAAAK,YAAwHC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,uBAAgCG,MAAQb,YAAA,wuBAAAC,MAA8vBC,SAAA,YAAsBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,qCAAAI,KAAA,gEAAAK,YAAkIC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,wCAAiDG,MAAQb,YAAA,0sCAAAC,MAAguCC,SAAA,YAAsBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,4BAAAI,KAAA,yEAAAK,YAAkIC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,mCAA2CS,aAAgBd,KAAA,wDAAAe,MAAA","file":"path---talk-minimizing-the-slippery-surface-of-failure-jon-pretty-05564b005e15fdbd261f.js","sourcesContent":["webpackJsonp([75093365743734],{\n\n/***/ 3090:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"talkJson\":{\"description\":\"Scala's type system allows us to enforce compile-time constraints on our programs, and to take advantage of these constraints to help reason about our code. Yet we still frequently encounter situations where extracting a value from a map is not guaranteed to succeed, or mapping across a set of cases is not guaranteed to be exhaustive. With dependent types we can make operations like these completely safe by construction, in the process eliminating entire classes of errors, and furthermore we can do this without complicating user code.\\n\\nAdditionally, with more precise type information becoming available at compile time, we elicit the exciting opportunity to use it to optimize performance at runtime, beyond what would be possible without dependent typing.\\n\\nThe talk will cover several simple and intermediate examples using dependent types, and will give a brief outline of some of the the challenges involved in implementing typesafe libraries with dependent types in Scala, but the majority of the talk will be accessible to all Scala users.\",\"meta\":{\"duration\":\"PT59M28S\"},\"presenter\":{\"name\":null},\"slug\":\"minimizing-the-slippery-surface-of-failure-jon-pretty\",\"source\":{\"id\":\"26UHdZUsKkE\",\"provider\":\"youtube\"},\"tag\":[\"scala\"],\"title\":\"Minimizing the Slippery Surface of Failure — Jon Pretty\"},\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"In this video tutorial, Dan Rosen will show you how to use Scala's capacity for monadic design to eliminate repetitive boilerplate in your code.  You'll learn to recognize places where the perpetual clutter of null checks, try-catch blocks and more can be hidden within a monad, to make your code's logic stand out clearly.\\r\\n\\r\\n** Head to http://marakana.com for more open source educational resources\",\"meta\":{\"duration\":\"PT31M22S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"Mw_Jnn_Y5iA\",\"provider\":\"youtube\"},\"slug\":\"scala-monads-declutter-your-code-with-monadic-design\",\"tag\":[\"scala\",\"monad\",\"monadic\",\"design patterns\",\"monadic design\",\"dan rosen\",\"marakana\",\"techtv\",\"Code\",\"Demo\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/Mw_Jnn_Y5iA/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Scala Monads: Declutter Your Code With Monadic Design\"}},{\"node\":{\"description\":\"Java is no longer alone on the JVM. It now has to share space with its younger siblings JRuby, Jython, Groovy, Clojure, Scala and many others. Each new language has its own set of advantages and disadvantages compared to Java, and its own niche in which it performs best, but Scala in particular is gaining momentum.\\n\\nIn this presentation to San Francisco Java User Group on January 18, 2012, Marakana's own Dan Rosen introduces Scala to Java developers and shows off some of its expressive power -- higher-order functions, type inference, and pattern matching -- by building a simple web service. You'll never look at Java the same way.\\n\\nSlides from this presentation available here http://bit.ly/ztgVxa\",\"meta\":{\"duration\":\"PT1H32M35S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"PKc5IwHG68k\",\"provider\":\"youtube\"},\"slug\":\"scala-versus-java\",\"tag\":[\"scala\",\"java\",\"marakana\",\"techtv\",\"typesafe\",\"dan rosen\",\"sbt\",\"jdk\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/PKc5IwHG68k/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Scala Versus Java\"}},{\"node\":{\"description\":\"Blake Matheny approaches his talk at NEScala with a collection of trial-and-error experiences he's acquired as the VP of Engineering at Tumblr (who for the past year and half has adopted Scala as their primary backend development language). Blake draws on actual code used at Tumblr, describes their implications in a server context, and shows us where things have gone wrong and how they were corrected.\\n \\nThis talk will be most pertinent to engineers who build backend service applications, but should be of interest to anyone looking to find additional methods for troubleshooting code in Scala.\\n\\n** Visit our site for more content on Scala, including the rest of the presentations from NE Scala 2013: http://marakana.com/s/tags/scala\",\"meta\":{\"duration\":\"PT29M53S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"dCEZDlH1ygo\",\"provider\":\"youtube\"},\"slug\":\"concurrency-anti-patterns-in-scala\",\"tag\":[\"scala\",\"blake matheny\",\"tumblr\",\"nescala\",\"marakana\",\"techtv\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/dCEZDlH1ygo/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Concurrency Anti-patterns in Scala\"}},{\"node\":{\"description\":\"Paul Phillips is a co-founder of Typesafe and the most prolific committer to Scala. He's spent the last 5 years developing the language, writing a lot of code and drawing a lot of conclusions, but has decided to walk away. In this talk, he explains why.\\n\\nHe outlines what he believes to be certain shortcomings of the Scala collections library. In Paul's words, \\\"Based on my extensive experience with Scala collections, I'm writing my own. The focus is much tighter: immutable, performant, predictable, correct. The talk will alternate between why the Scala collections manage none of those things, and how I hope to do better.\\\"\\n\\nA day after the SF Scala event, Paul left this comment on their meetup page, which seems relevant, \\\"[...] I already discovered that if I say nothing about it then people will draw very incorrect conclusions about what the major issues are and why I've moved on. It's not sad, it's not happy, it's only a question of whether you want the real picture or some distant reflection of it.\\\"\\n\\nFollow along with Paul's slides: http://crcl.to/zdybs\\n\\nFree Scala resources: http://crcl.to/zhwdp\\nProfessional Scala training: http://crcl.to/w6kf7\\n\\nInformation on SF Scala: http://sfscala.org\",\"meta\":{\"duration\":\"PT45M42S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"uiJycy6dFSQ\",\"provider\":\"youtube\"},\"slug\":\"scala-collections-why-not\",\"tag\":[\"paul phillips\",\"typesafe\",\"scala\",\"collections\",\"sf scala\",\"newcircle\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/uiJycy6dFSQ/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Scala Collections: Why Not?\"}}]}},\"pathContext\":{\"slug\":\"minimizing-the-slippery-surface-of-failure-jon-pretty\",\"tags\":[\"scala\"]}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---talk-minimizing-the-slippery-surface-of-failure-jon-pretty-05564b005e15fdbd261f.js","module.exports = {\"data\":{\"talkJson\":{\"description\":\"Scala's type system allows us to enforce compile-time constraints on our programs, and to take advantage of these constraints to help reason about our code. Yet we still frequently encounter situations where extracting a value from a map is not guaranteed to succeed, or mapping across a set of cases is not guaranteed to be exhaustive. With dependent types we can make operations like these completely safe by construction, in the process eliminating entire classes of errors, and furthermore we can do this without complicating user code.\\n\\nAdditionally, with more precise type information becoming available at compile time, we elicit the exciting opportunity to use it to optimize performance at runtime, beyond what would be possible without dependent typing.\\n\\nThe talk will cover several simple and intermediate examples using dependent types, and will give a brief outline of some of the the challenges involved in implementing typesafe libraries with dependent types in Scala, but the majority of the talk will be accessible to all Scala users.\",\"meta\":{\"duration\":\"PT59M28S\"},\"presenter\":{\"name\":null},\"slug\":\"minimizing-the-slippery-surface-of-failure-jon-pretty\",\"source\":{\"id\":\"26UHdZUsKkE\",\"provider\":\"youtube\"},\"tag\":[\"scala\"],\"title\":\"Minimizing the Slippery Surface of Failure — Jon Pretty\"},\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"In this video tutorial, Dan Rosen will show you how to use Scala's capacity for monadic design to eliminate repetitive boilerplate in your code.  You'll learn to recognize places where the perpetual clutter of null checks, try-catch blocks and more can be hidden within a monad, to make your code's logic stand out clearly.\\r\\n\\r\\n** Head to http://marakana.com for more open source educational resources\",\"meta\":{\"duration\":\"PT31M22S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"Mw_Jnn_Y5iA\",\"provider\":\"youtube\"},\"slug\":\"scala-monads-declutter-your-code-with-monadic-design\",\"tag\":[\"scala\",\"monad\",\"monadic\",\"design patterns\",\"monadic design\",\"dan rosen\",\"marakana\",\"techtv\",\"Code\",\"Demo\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/Mw_Jnn_Y5iA/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Scala Monads: Declutter Your Code With Monadic Design\"}},{\"node\":{\"description\":\"Java is no longer alone on the JVM. It now has to share space with its younger siblings JRuby, Jython, Groovy, Clojure, Scala and many others. Each new language has its own set of advantages and disadvantages compared to Java, and its own niche in which it performs best, but Scala in particular is gaining momentum.\\n\\nIn this presentation to San Francisco Java User Group on January 18, 2012, Marakana's own Dan Rosen introduces Scala to Java developers and shows off some of its expressive power -- higher-order functions, type inference, and pattern matching -- by building a simple web service. You'll never look at Java the same way.\\n\\nSlides from this presentation available here http://bit.ly/ztgVxa\",\"meta\":{\"duration\":\"PT1H32M35S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"PKc5IwHG68k\",\"provider\":\"youtube\"},\"slug\":\"scala-versus-java\",\"tag\":[\"scala\",\"java\",\"marakana\",\"techtv\",\"typesafe\",\"dan rosen\",\"sbt\",\"jdk\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/PKc5IwHG68k/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Scala Versus Java\"}},{\"node\":{\"description\":\"Blake Matheny approaches his talk at NEScala with a collection of trial-and-error experiences he's acquired as the VP of Engineering at Tumblr (who for the past year and half has adopted Scala as their primary backend development language). Blake draws on actual code used at Tumblr, describes their implications in a server context, and shows us where things have gone wrong and how they were corrected.\\n \\nThis talk will be most pertinent to engineers who build backend service applications, but should be of interest to anyone looking to find additional methods for troubleshooting code in Scala.\\n\\n** Visit our site for more content on Scala, including the rest of the presentations from NE Scala 2013: http://marakana.com/s/tags/scala\",\"meta\":{\"duration\":\"PT29M53S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"dCEZDlH1ygo\",\"provider\":\"youtube\"},\"slug\":\"concurrency-anti-patterns-in-scala\",\"tag\":[\"scala\",\"blake matheny\",\"tumblr\",\"nescala\",\"marakana\",\"techtv\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/dCEZDlH1ygo/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Concurrency Anti-patterns in Scala\"}},{\"node\":{\"description\":\"Paul Phillips is a co-founder of Typesafe and the most prolific committer to Scala. He's spent the last 5 years developing the language, writing a lot of code and drawing a lot of conclusions, but has decided to walk away. In this talk, he explains why.\\n\\nHe outlines what he believes to be certain shortcomings of the Scala collections library. In Paul's words, \\\"Based on my extensive experience with Scala collections, I'm writing my own. The focus is much tighter: immutable, performant, predictable, correct. The talk will alternate between why the Scala collections manage none of those things, and how I hope to do better.\\\"\\n\\nA day after the SF Scala event, Paul left this comment on their meetup page, which seems relevant, \\\"[...] I already discovered that if I say nothing about it then people will draw very incorrect conclusions about what the major issues are and why I've moved on. It's not sad, it's not happy, it's only a question of whether you want the real picture or some distant reflection of it.\\\"\\n\\nFollow along with Paul's slides: http://crcl.to/zdybs\\n\\nFree Scala resources: http://crcl.to/zhwdp\\nProfessional Scala training: http://crcl.to/w6kf7\\n\\nInformation on SF Scala: http://sfscala.org\",\"meta\":{\"duration\":\"PT45M42S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"uiJycy6dFSQ\",\"provider\":\"youtube\"},\"slug\":\"scala-collections-why-not\",\"tag\":[\"paul phillips\",\"typesafe\",\"scala\",\"collections\",\"sf scala\",\"newcircle\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/uiJycy6dFSQ/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Scala Collections: Why Not?\"}}]}},\"pathContext\":{\"slug\":\"minimizing-the-slippery-surface-of-failure-jon-pretty\",\"tags\":[\"scala\"]}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/talk-minimizing-the-slippery-surface-of-failure-jon-pretty.json\n// module id = 3090\n// module chunks = 75093365743734"],"sourceRoot":""}