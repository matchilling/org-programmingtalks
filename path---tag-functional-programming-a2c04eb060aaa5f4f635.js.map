{"version":3,"sources":["webpack:///path---tag-functional-programming-a2c04eb060aaa5f4f635.js","webpack:///./.cache/json/tag-functional-programming.json"],"names":["webpackJsonp","2270","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,m/BAAAC,MAAygCC,SAAA,cAAwBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,mCAAAC,KAAA,oLAAAC,YAAoPC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,yCAAkDhB,MAAQC,YAAA,szDAAAC,MAA40DC,SAAA,aAAuBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,oCAAAC,KAAA,qFAAAC,YAAsJC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,yCAAkDhB,MAAQC,YAAA,unBAAAC,MAA6oBC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,sCAAAC,KAAA,2KAAAC,YAA8OC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,8CAAsDC,aAAgBR,KAAA,yBAAAC,IAAA","file":"path---tag-functional-programming-a2c04eb060aaa5f4f635.js","sourcesContent":["webpackJsonp([74054154464167],{\n\n/***/ 2270:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Abstract \\nThe introduction of lambdas and first class function objects forever changed the nature of C++, opening up the floodgates to functional programming. Sometimes the best library design is based on a pattern that's very familiar to a Haskell programmer but alien to a C++ programmer. The new std::future proposal for C++17 hides several functional patterns including that of a monad -- the boogeyman of generations of imperative programmers. But once seen in action, the monad becomes just one more pattern in the toolbox of a library designer. \\nBio\\nBartosz Milewski always tries to be where the action is. He started as a quantum physicist when supertstrings were hot, joined the software industry to build the search engine for Microsoft Windows, became an avid proponent of object-oriented programming, and wrote a book on C++. He got into concurrency and parallelism when the multicores hit the market, and now he's evangelizing functional programming as the Holy Grail of software development.\",\"meta\":{\"duration\":\"PT1H20M59S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"BFnhhPehpKw\",\"provider\":\"youtube\"},\"slug\":\"c17-i-see-a-monad-in-your-future\",\"tag\":[\"NWCPP\",\"Bartosz Milewski\",\"Monad\",\"functional programming\",\"Haskel\",\"futures\",\"promise\",\"design patterns\",\"software development\",\"concurrent programming\",\"parallell programming\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/BFnhhPehpKw/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"C++17: I See a Monad in Your Future\"}},{\"node\":{\"description\":\"Cross posted from msdn's channel 9.\\n\\nFunctional programming is increasing in popularity these days given the inherent problems with shared mutable state that is rife in the imperative world. As we march on to a world of multi and many-core chipsets, software engineering must evolve to better equip software engineers with the tools to exploit the vast power of multiple core processors as it won't come for free as it did in the recent past which was predictably based on Moore's law.\\n\\nOf course, learning new ways to think about programming semantics and code patterns are not always straight forward. For example, most imperative programmers (which include most of us who build software for a living...) are somewhat perplexed by the notion of functions as first class data structures that can be combined to create powerful and composable systems. Languages like Haskell are pure functional languages and require programmers to think in a different way, often in a precise mathematical fashion where composing and chaining functions is \\\"the Way\\\".\\n\\nDr. Brian Beckman, a Channel 9 celebrity, astrophysicist and senior software engineer thought it would be a very good idea to address the complexity of monads in an easy to understand way: a technical conversation at the whiteboard with yours truly for Channel 9.\\n\\nThis video interview is the result of Brian's idea that he can in fact remove the fear of monads from anybody who pays attention to his explanation. Of course, you can't just cover monads in a vacuum (category theory is not really addressed here) so the context is functional programming (Brian covers functions and composable functional structures (function chains) and of course monoids and then monads).\\n\\nTune in. There's a lot to learn here and only Brian can make monads easy to understand for the rest of us!\",\"meta\":{\"duration\":\"PT1H7M11S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"ZhuHCtR3xq8\",\"provider\":\"youtube\"},\"slug\":\"brian-beckman-dont-fear-the-monad\",\"tag\":[\"haskell\",\"monads\",\"programming\",\"brian beckman\",\"functional programming\",\"Haskell\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/ZhuHCtR3xq8/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Brian Beckman: Don't fear the Monad\"}},{\"node\":{\"description\":\"Brian Lonsdorf has a love-hate relationship with Underscore.js. Yes, it offers a bunch of tools included in today's functional programming paradigm (like map, filter, reduce, take, drop, compose, etc.), but in Underscore the functions are sometimes verbose and unintuitive. It claims to be a functional programming language, but how true is that?\\n\\nDespite certain characteristics, Brian offers some solutions for using Underscore productively. He plays a bit of catchup for the functional programming newbie, but then dives into the denser more theoretical concepts.\\n\\n**Follow along with Brian's slides: http://mrkn.co/5nvjz\",\"meta\":{\"duration\":\"PT36M31S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"m3svKOdZijA\",\"provider\":\"youtube\"},\"slug\":\"hey-underscore-youre-doing-it-wrong\",\"tag\":[\"brian lonsdorf\",\"html5\",\"html5devconf\",\"san francisco\",\"Underscore\",\"Underscore.js\",\"functional programming\",\"marakana\",\"tips\",\"tricks\",\"use underscore.js productively\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/m3svKOdZijA/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Hey Underscore, You're Doing It Wrong!\"}}]}},\"pathContext\":{\"slug\":\"functional-programming\",\"tag\":\"functional programming\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tag-functional-programming-a2c04eb060aaa5f4f635.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Abstract \\nThe introduction of lambdas and first class function objects forever changed the nature of C++, opening up the floodgates to functional programming. Sometimes the best library design is based on a pattern that's very familiar to a Haskell programmer but alien to a C++ programmer. The new std::future proposal for C++17 hides several functional patterns including that of a monad -- the boogeyman of generations of imperative programmers. But once seen in action, the monad becomes just one more pattern in the toolbox of a library designer. \\nBio\\nBartosz Milewski always tries to be where the action is. He started as a quantum physicist when supertstrings were hot, joined the software industry to build the search engine for Microsoft Windows, became an avid proponent of object-oriented programming, and wrote a book on C++. He got into concurrency and parallelism when the multicores hit the market, and now he's evangelizing functional programming as the Holy Grail of software development.\",\"meta\":{\"duration\":\"PT1H20M59S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"BFnhhPehpKw\",\"provider\":\"youtube\"},\"slug\":\"c17-i-see-a-monad-in-your-future\",\"tag\":[\"NWCPP\",\"Bartosz Milewski\",\"Monad\",\"functional programming\",\"Haskel\",\"futures\",\"promise\",\"design patterns\",\"software development\",\"concurrent programming\",\"parallell programming\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/BFnhhPehpKw/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"C++17: I See a Monad in Your Future\"}},{\"node\":{\"description\":\"Cross posted from msdn's channel 9.\\n\\nFunctional programming is increasing in popularity these days given the inherent problems with shared mutable state that is rife in the imperative world. As we march on to a world of multi and many-core chipsets, software engineering must evolve to better equip software engineers with the tools to exploit the vast power of multiple core processors as it won't come for free as it did in the recent past which was predictably based on Moore's law.\\n\\nOf course, learning new ways to think about programming semantics and code patterns are not always straight forward. For example, most imperative programmers (which include most of us who build software for a living...) are somewhat perplexed by the notion of functions as first class data structures that can be combined to create powerful and composable systems. Languages like Haskell are pure functional languages and require programmers to think in a different way, often in a precise mathematical fashion where composing and chaining functions is \\\"the Way\\\".\\n\\nDr. Brian Beckman, a Channel 9 celebrity, astrophysicist and senior software engineer thought it would be a very good idea to address the complexity of monads in an easy to understand way: a technical conversation at the whiteboard with yours truly for Channel 9.\\n\\nThis video interview is the result of Brian's idea that he can in fact remove the fear of monads from anybody who pays attention to his explanation. Of course, you can't just cover monads in a vacuum (category theory is not really addressed here) so the context is functional programming (Brian covers functions and composable functional structures (function chains) and of course monoids and then monads).\\n\\nTune in. There's a lot to learn here and only Brian can make monads easy to understand for the rest of us!\",\"meta\":{\"duration\":\"PT1H7M11S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"ZhuHCtR3xq8\",\"provider\":\"youtube\"},\"slug\":\"brian-beckman-dont-fear-the-monad\",\"tag\":[\"haskell\",\"monads\",\"programming\",\"brian beckman\",\"functional programming\",\"Haskell\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/ZhuHCtR3xq8/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Brian Beckman: Don't fear the Monad\"}},{\"node\":{\"description\":\"Brian Lonsdorf has a love-hate relationship with Underscore.js. Yes, it offers a bunch of tools included in today's functional programming paradigm (like map, filter, reduce, take, drop, compose, etc.), but in Underscore the functions are sometimes verbose and unintuitive. It claims to be a functional programming language, but how true is that?\\n\\nDespite certain characteristics, Brian offers some solutions for using Underscore productively. He plays a bit of catchup for the functional programming newbie, but then dives into the denser more theoretical concepts.\\n\\n**Follow along with Brian's slides: http://mrkn.co/5nvjz\",\"meta\":{\"duration\":\"PT36M31S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"m3svKOdZijA\",\"provider\":\"youtube\"},\"slug\":\"hey-underscore-youre-doing-it-wrong\",\"tag\":[\"brian lonsdorf\",\"html5\",\"html5devconf\",\"san francisco\",\"Underscore\",\"Underscore.js\",\"functional programming\",\"marakana\",\"tips\",\"tricks\",\"use underscore.js productively\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/m3svKOdZijA/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Hey Underscore, You're Doing It Wrong!\"}}]}},\"pathContext\":{\"slug\":\"functional-programming\",\"tag\":\"functional programming\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tag-functional-programming.json\n// module id = 2270\n// module chunks = 74054154464167"],"sourceRoot":""}