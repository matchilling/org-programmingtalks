{
  "description": "Transducers allow to express transformations on sequential inputs (like std::transform, std::filter, most of boost::range::adators and more) in a way that is independent of the input source. They are simple high order functions agnostic of the notion of iterator or collection and can be combined by simple function composition. They can later be applied eagerly or lazily over iterators, but most interestingly, also to other kinds of \"reactive\" sources, like networked streams, inter-process channels or reactive observables (e.g. RxCpp). Not only they provide an elegant decoupling between the \"what\" and the \"how\" and higher level of reuse, their implementation is often simpler and and more performant than similar boost::range adaptors.\n\nTransducers were introduced in Clojure by Rich Hickey. At Ableton we implemented them in C++ and released them as part of our Open Source modern C++ toolkit: Atria. Our implementation introduces innovations of its own, like implementing state-full transducers without mutation, enabling further safety and reusability. We also use Eric Niebler's technique to describe and check its concepts in standard compliant C++11.\n\nIn this session we will introduce the concept of transducers and how they can be implemented in modern C++.",
  "id": "d5804b50-afd0-4d40-90e9-3b759a3b921b",
  "meta": {
    "duration": "PT1H4S"
  },
  "presenter": {
    "name": "Juan Pedro Bol√≠var Puente"
  },
  "slug": "transducers-from-clojure-to-c",
  "source": {
    "id": "vohGJjGxtJQ",
    "provider": "youtube"
  },
  "tag": ["Clojure", "CppCon 2015"],
  "title": "Transducers: from Clojure to C++",
  "thumbnails": {
    "default": {
      "url": "https://i.ytimg.com/vi/vohGJjGxtJQ/default.jpg",
      "width": 120,
      "height": 90
    },
    "medium": {
      "url": "https://i.ytimg.com/vi/vohGJjGxtJQ/mqdefault.jpg",
      "width": 320,
      "height": 180
    },
    "high": {
      "url": "https://i.ytimg.com/vi/vohGJjGxtJQ/hqdefault.jpg",
      "width": 480,
      "height": 360
    }
  }
}
