webpackJsonp([80116642237857],{3028:function(e,a){e.exports={data:{talkJson:{description:"Brian Lonsdorf has a love-hate relationship with Underscore.js. Yes, it offers a bunch of tools included in today's functional programming paradigm (like map, filter, reduce, take, drop, compose, etc.), but in Underscore the functions are sometimes verbose and unintuitive. It claims to be a functional programming language, but how true is that?\n\nDespite certain characteristics, Brian offers some solutions for using Underscore productively. He plays a bit of catchup for the functional programming newbie, but then dives into the denser more theoretical concepts.\n\n**Follow along with Brian's slides: http://mrkn.co/5nvjz",meta:{duration:"PT36M31S"},presenter:{name:null},slug:"hey-underscore-youre-doing-it-wrong",source:{id:"m3svKOdZijA",provider:"youtube"},tag:["brian lonsdorf","html5","html5devconf","san francisco","Underscore","Underscore.js","functional programming","marakana","tips","tricks","use underscore.js productively"],title:"Hey Underscore, You're Doing It Wrong!"},allTalkJson:{edges:[{node:{description:"Abstract \nThe introduction of lambdas and first class function objects forever changed the nature of C++, opening up the floodgates to functional programming. Sometimes the best library design is based on a pattern that's very familiar to a Haskell programmer but alien to a C++ programmer. The new std::future proposal for C++17 hides several functional patterns including that of a monad -- the boogeyman of generations of imperative programmers. But once seen in action, the monad becomes just one more pattern in the toolbox of a library designer. \nBio\nBartosz Milewski always tries to be where the action is. He started as a quantum physicist when supertstrings were hot, joined the software industry to build the search engine for Microsoft Windows, became an avid proponent of object-oriented programming, and wrote a book on C++. He got into concurrency and parallelism when the multicores hit the market, and now he's evangelizing functional programming as the Holy Grail of software development.",meta:{duration:"PT1H20M59S"},presenter:{name:null},source:{id:"BFnhhPehpKw",provider:"youtube"},slug:"c17-i-see-a-monad-in-your-future",tag:["NWCPP","Bartosz Milewski","Monad","functional programming","Haskel","futures","promise","design patterns","software development","concurrent programming","parallell programming"],thumbnails:{default:{url:"https://i.ytimg.com/vi/BFnhhPehpKw/default.jpg",height:90,width:120}},title:"C++17: I See a Monad in Your Future"}},{node:{description:"In this video tutorial, Dan Rosen will show you how to use Scala's capacity for monadic design to eliminate repetitive boilerplate in your code.  You'll learn to recognize places where the perpetual clutter of null checks, try-catch blocks and more can be hidden within a monad, to make your code's logic stand out clearly.\r\n\r\n** Head to http://marakana.com for more open source educational resources",meta:{duration:"PT31M22S"},presenter:{name:null},source:{id:"Mw_Jnn_Y5iA",provider:"youtube"},slug:"scala-monads-declutter-your-code-with-monadic-design",tag:["scala","monad","monadic","design patterns","monadic design","dan rosen","marakana","techtv","Code","Demo"],thumbnails:{default:{url:"https://i.ytimg.com/vi/Mw_Jnn_Y5iA/default.jpg",height:90,width:120}},title:"Scala Monads: Declutter Your Code With Monadic Design"}},{node:{description:"Java is no longer alone on the JVM. It now has to share space with its younger siblings JRuby, Jython, Groovy, Clojure, Scala and many others. Each new language has its own set of advantages and disadvantages compared to Java, and its own niche in which it performs best, but Scala in particular is gaining momentum.\n\nIn this presentation to San Francisco Java User Group on January 18, 2012, Marakana's own Dan Rosen introduces Scala to Java developers and shows off some of its expressive power -- higher-order functions, type inference, and pattern matching -- by building a simple web service. You'll never look at Java the same way.\n\nSlides from this presentation available here http://bit.ly/ztgVxa",meta:{duration:"PT1H32M35S"},presenter:{name:null},source:{id:"PKc5IwHG68k",provider:"youtube"},slug:"scala-versus-java",tag:["scala","java","marakana","techtv","typesafe","dan rosen","sbt","jdk"],thumbnails:{default:{url:"https://i.ytimg.com/vi/PKc5IwHG68k/default.jpg",height:90,width:120}},title:"Scala Versus Java"}},{node:{description:"Cross posted from msdn's channel 9.\n\nFunctional programming is increasing in popularity these days given the inherent problems with shared mutable state that is rife in the imperative world. As we march on to a world of multi and many-core chipsets, software engineering must evolve to better equip software engineers with the tools to exploit the vast power of multiple core processors as it won't come for free as it did in the recent past which was predictably based on Moore's law.\n\nOf course, learning new ways to think about programming semantics and code patterns are not always straight forward. For example, most imperative programmers (which include most of us who build software for a living...) are somewhat perplexed by the notion of functions as first class data structures that can be combined to create powerful and composable systems. Languages like Haskell are pure functional languages and require programmers to think in a different way, often in a precise mathematical fashion where composing and chaining functions is \"the Way\".\n\nDr. Brian Beckman, a Channel 9 celebrity, astrophysicist and senior software engineer thought it would be a very good idea to address the complexity of monads in an easy to understand way: a technical conversation at the whiteboard with yours truly for Channel 9.\n\nThis video interview is the result of Brian's idea that he can in fact remove the fear of monads from anybody who pays attention to his explanation. Of course, you can't just cover monads in a vacuum (category theory is not really addressed here) so the context is functional programming (Brian covers functions and composable functional structures (function chains) and of course monoids and then monads).\n\nTune in. There's a lot to learn here and only Brian can make monads easy to understand for the rest of us!",meta:{duration:"PT1H7M11S"},presenter:{name:null},source:{id:"ZhuHCtR3xq8",provider:"youtube"},slug:"brian-beckman-dont-fear-the-monad",tag:["haskell","monads","programming","brian beckman","functional programming","Haskell"],thumbnails:{default:{url:"https://i.ytimg.com/vi/ZhuHCtR3xq8/default.jpg",height:90,width:120}},title:"Brian Beckman: Don't fear the Monad"}},{node:{description:"Blake Matheny approaches his talk at NEScala with a collection of trial-and-error experiences he's acquired as the VP of Engineering at Tumblr (who for the past year and half has adopted Scala as their primary backend development language). Blake draws on actual code used at Tumblr, describes their implications in a server context, and shows us where things have gone wrong and how they were corrected.\n \nThis talk will be most pertinent to engineers who build backend service applications, but should be of interest to anyone looking to find additional methods for troubleshooting code in Scala.\n\n** Visit our site for more content on Scala, including the rest of the presentations from NE Scala 2013: http://marakana.com/s/tags/scala",meta:{duration:"PT29M53S"},presenter:{name:null},source:{id:"dCEZDlH1ygo",provider:"youtube"},slug:"concurrency-anti-patterns-in-scala",tag:["scala","blake matheny","tumblr","nescala","marakana","techtv"],thumbnails:{default:{url:"https://i.ytimg.com/vi/dCEZDlH1ygo/default.jpg",height:90,width:120}},title:"Concurrency Anti-patterns in Scala"}},{node:{description:'Callback Hell is a very real place. At least, according to Michael Jackson, co-founder of HUM, it is. But stay calm! In this presentation, Michael and his co-presenter\nDomenic Denicola, Software Engineer at Lab49, will walk you through all the steps required to avoid this dark and mysterious place.\n\nInstead of simply throwing together a clunky example, and a solution to a very specific case, Michael and Domenic dive deeper into more conceptual problems. How did we get to "callback hell" and what can we do it avoid it next time? This helpful demonstration covers handy tips about Promises and strategies for building fully asynchronous APIs in JavaScript.\n\n**Follow along with Michael and Domenic\'s slides: http://mrkn.co/lb0t1',meta:{duration:"PT50M25S"},presenter:{name:null},source:{id:"hf1T_AONQJU",provider:"youtube"},slug:"redemption-from-callback-hell",tag:["callback","callback hell","marakana","techtv","html5","html5devconf","michael jackson","michael jackson develoepr","domenic denicola","HUM","Lab49"],thumbnails:{default:{url:"https://i.ytimg.com/vi/hf1T_AONQJU/default.jpg",height:90,width:120}},title:"Redemption from Callback Hell"}}]}},pathContext:{slug:"hey-underscore-youre-doing-it-wrong",tags:["brian lonsdorf","html5","html5devconf","san francisco","Underscore","Underscore.js","functional programming","marakana","tips","tricks","use underscore.js productively"]}}}});
//# sourceMappingURL=path---talk-hey-underscore-youre-doing-it-wrong-9a86cf366674706a2e11.js.map