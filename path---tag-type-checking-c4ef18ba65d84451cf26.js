webpackJsonp([41930193041854],{2786:function(e,a){e.exports={data:{allTalkJson:{edges:[{node:{description:"Meetup: http://www.meetup.com/papers-we-love/events/214400572/\nPaper: http://www.cs.cmu.edu/~crary/819-f09/Hoare69.pdf\nSlides: https://speakerdeck.com/paperswelove/jean-yang-on-an-axiomatic-basis-for-computer-programming\nAudio: http://www.mixcloud.com/paperswelove/jean-yang-on-an-axiomatic-basis-for-computer-programming/\n---------------------------------------------------------------------------------------------\nSponsored by The Ladders (@TheLaddersDev)\n---------------------------------------------------------------------------------------------\n\nDescription\n---------------\nOur lives now run on software. Bugs are becoming not just annoyances for software developers, but sources of potentially catastrophic failures. A careless programmer mistake could leak our social security numbers or crash our cars. While testing provides some assurance, it is difficult to test all possibilities in complex systems--and practically impossible in concurrent systems. For the critical systems in our lives, we should demand mathematical guarantees that the software behaves the way the programmer expected.\n\nA single paper influenced much of the work towards providing these mathematical guarantees. C.A.R. Hoare’s seminal 1969 paper “An Axiomatic Basis for Computer Programming” introduces a method of reasoning about program correctness now known as Hoare logic. In this paper, Hoare provides a technique that 1) allows programmers to express program properties and 2) allows these properties to be automatically checked. These ideas have influenced decades of research in automated reasoning about software correctness.\n\nIn this talk, I will describe the main ideas in Hoare logic, as well as the impact of these ideas. I will talk about my personal experience using Hoare logic to verify memory guarantees in an operating system. I will also discuss takeaway lessons for working programmers.\n\nBio\n----\nJean Yang (@jeanqasaur) is a final-year PhD student at MIT. For her PhD thesis she has created Jeeves, a programming language for automatically enforcing information flow policies for security and privacy. You may be more familiar with one of her other projects, Haskell Ryan Gosling.",meta:{duration:"PT1H4M32S"},presenter:{name:null},source:{id:"GQi-6-d5ooQ",provider:"youtube"},slug:"jean-yang-on-an-axiomatic-basis-for-computer-programming",tag:["Computer Programming (Conference Subject)","Mathematics (Field Of Study)","Software Engineering (Industry)","Program Correctness","Ryan Gosling","Hoare Logic","Type Checking","Computer (Industry)","Programming Language"],thumbnails:{default:{url:"https://i.ytimg.com/vi/GQi-6-d5ooQ/default.jpg",height:90,width:120}},title:"Jean Yang on An Axiomatic Basis for Computer Programming"}}]}},pathContext:{slug:"type-checking",tag:"Type Checking"}}}});
//# sourceMappingURL=path---tag-type-checking-c4ef18ba65d84451cf26.js.map