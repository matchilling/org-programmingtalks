webpackJsonp([78534619776488],{3170:function(e,t){e.exports={data:{talkJson:{description:"If you always wanted to know more about about Clang's AST [1], for example because you want to implement an awesome tool [2, 3] based on Clang, or simply because you want to start contributing, this talk is for you.\n\nMake sure to watch in HD to be able to read the font in the terminal!\n\nThe semantic code completion in the vim session is powered by YCM [4], and the quick formatting is done by clang-format [5].\n\n[1] http://clang.llvm.org/docs/IntroductionToTheClangAST.html\n[2] http://clang.llvm.org/docs/Tooling.html\n[3] http://clang.llvm.org/docs/LibTooling.html\n[4] https://github.com/Valloric/YouCompleteMe\n[5] http://clang.llvm.org/docs/ClangFormat.html\n\nFrom the LLVM Euro Conference 2013: http://llvm.org/devmtg/2013-04/",meta:{duration:"PT44M53S"},presenter:{name:null},slug:"the-clang-ast-a-tutorial",source:{id:"VqCkCDFLSsc",provider:"youtube"},tag:["C++","Clang","compiler","programming"],title:"The Clang AST - a Tutorial"},allTalkJson:{edges:[{node:{description:'We know how to write bad code: litter our programs with casts, macros, pointers, naked new and deletes, and complicated control structures. Alternatively (or additionally), we could obscure every design decision in a mess of deeply nested abstractions using the latest object-oriented programming and generic programming tricks. Then, for good measure, we might complicate our algorithms with interesting special cases. Such code is incomprehensible, unmaintainable, usually inefficient, and not uncommon.\n\nBut how do we write good code? What principles, techniques, and idioms can we exploit to make it easier to produce quality code? In this presentation, I make an argument for type-rich interfaces, compact data structures, integrated resource management and error handling, and highly-structured algorithmic code. I illustrate my ideas and guidelines with a few idiomatic code examples.\n\nI use C++11 freely. Examples include auto, general constant expressions, uniform initialization, type aliases, type safe threading, and user-defined literals. C++11 features are only just starting to appear in production compilers, so some of my suggestions are conjecture. Developing a "modern style," however, is essential if we don\'t want to maintain newly-written 1970s and 1980s style code in 2020.\n\nThis presentation reflects my thoughts on what "Modern C++" should mean in the 2010s: a language for programming based on light-weight abstraction with direct and efficient mapping to hardware, suitable for infrastructure code.',meta:{duration:"PT1H29M48S"},presenter:{name:"Bjarne Stroustrup"},source:{id:"0iWb_qi2-uI",provider:"youtube"},slug:"keynote-goingnative-2012",tag:["C++","GoingNative","Keynote"],thumbnails:{default:{url:"https://i.ytimg.com/vi/0iWb_qi2-uI/default.jpg",height:90,width:120}},title:"Keynote GoingNative 2012 C++"}},{node:{description:"Hartmut Kaisers Keynote from Meeting C++ 2014\n\nSlides:\nhttp://meetingcpp.com/index.php/tv14/items/26.html",meta:{duration:"PT1H27M36S"},presenter:{name:null},source:{id:"4OCUEgSNIAY",provider:"youtube"},slug:"plain-threads-are-the-goto-of-todays-computing-hartmut-kaiser-keynote-meeting-c-2014",tag:["Software (Industry)","C (Programming Language)","C++","Meeting C++","Keynote","Parallelism","Concurrency","Threading","Thread","HPX","Meeting C++ 2014"],thumbnails:{default:{url:"https://i.ytimg.com/vi/4OCUEgSNIAY/default.jpg",height:90,width:120}},title:"Plain Threads are the GOTO of todays computing - Hartmut Kaiser - Keynote Meeting C++ 2014"}},{node:{description:"What’s the single most important design guideline for the creation of high-quality software? For Scott Meyers, it’s all about interface design. That includes user interfaces, of course, but also APIs, i.e., class interfaces, function interfaces, template interfaces, etc. The guideline is simple: make interfaces easy to use correctly and hard to use incorrectly, but achieving it can be challenging. In this presentation, Scott describes a number of specific ways to approach the design of high-quality interfaces. Much of the material is language- and domain-independent, but some of the ideas assume that you’re using a programming language with relatively strong static typing (e.g., C, C++, Java, C#).",meta:{duration:"PT58M42S"},presenter:{name:null},source:{id:"5tg1ONG18H8",provider:"youtube"},slug:"scott-meyers-the-most-important-design-guideline",tag:["Application Programming Interface (Literature Subject)","Scott Meyers","C++"],thumbnails:{default:{url:"https://i.ytimg.com/vi/5tg1ONG18H8/default.jpg",height:90,width:120}},title:"Scott Meyers – The Most Important Design Guideline"}},{node:{description:"The D Programming Language Conference, May 21-23 2014, Menlo Park, CA.",meta:{duration:"PT48M37S"},presenter:{name:null},source:{id:"AhR4PSExnqk",provider:"youtube"},slug:"dconf-2014-sdc-a-d-compiler-as-a-library-by-amaury-sechet",tag:["D programming language","programming languages","programming","dconf","dlang"],thumbnails:{default:{url:"https://i.ytimg.com/vi/AhR4PSExnqk/default.jpg",height:90,width:120}},title:"DConf 2014: SDC, a D Compiler as a Library by Amaury Sechet"}},{node:{description:"We would like to thank everyone for attending the first edition of Atmosphere Conference, which was held on the 13th-14th May 2013 in Concordia Design in Poznan. Considering the fact that the event was organised for the first time, we must admit that there was a great number of attendees interested in web scalability and performance. Together with organisers we managed to gather over 200 people. Two tracks of lectures, interviews and thousands of conversations behind the scenes guaranteed a successful conference, which we are proud to be organisers of. We hope that this event has met your expectations and gave you a chance to exchange experience, establish cooperation and meet people with similar interests. The first edition of Atmosphere would not be possible if not a great partners' support. Main Partner was the Allegro Group, which has also helped us create the conference schedule. Gold Sponsors were Akamai Technologies and Cisco Systems, whereas Silver Sponsor was the Dell Company. We would also like to thank our media partners, online services and bloggers who helped us promote the event. Photos, presentations and videos will be available soon on the website. Once again - thank you all for creating the first edition of Atmosphere Conference and see you next year.",meta:{duration:"PT51M26S"},presenter:{name:null},source:{id:"C4z_9F6nfS8",provider:"youtube"},slug:"atmosphere-2013-your-css-is-a-mess-jonathan-snook-shopify",tag:["atmosphere","conference","2013","allegro","allegrogroup","cisco systems","cisco","dell","akamai","akamai technologies","performance","scalability","devops","web","java","javascript","css","http","developer","programming","tdd","data","john paul","conde nast"],thumbnails:{default:{url:"https://i.ytimg.com/vi/C4z_9F6nfS8/default.jpg",height:90,width:120}},title:'Atmosphere 2013: "Your CSS is a Mess" Jonathan Snook (Shopify)'}},{node:{description:"Build Your Own Lisp for Great Justice\n\nImplementing a toy Lisp interpreter is practically a rite of passage for the budding computer scientist. This hallowed tradition is described in detail in \"Lisp in Small Pieces,\" the seminal work on the making of Lisps, but everybody loves a tl;dr, so let's do the 40 minute executive summary.\n\nWe'll charge at high speed\nthrough the following topics, with Clojure code to follow along with as we go (because there's no better language for implementing a Lisp than another Lisp):\n\n* Parsing: turning text files into ASTs\n* Fundamental Lisp datatypes\n* McCarthy's elementary functions\n* Evaluating Lisp code\n* Lambdas and lexical scope\n* Your friend, the state monad\n* Beyond Lisp: pattern matching and type systems\n\nWhen we're done, you'll be ready to go forth and fill the world with Lisps of all shapes, colours and Greenspun violations for Great Justice. Also, it'll be good fun.\n\nSpeaker\nBodil Stokke (@bodil) is a compulsive conference speaker in the fields of functional programming and internets technologies, and is a co-organiser of three annual developer conferences in her home\ntown of Oslo, Norway, mostly because she's still learning how to stop. She is a prolific contributor to the Free Software community, primarily as a Clojure developer, and has recently taken up designing new programming languages as a hobby. In her spare time, she works as a web developer for Comoyo, which is like Hulu for non-Americans.",meta:{duration:"PT53M52S"},presenter:{name:null},source:{id:"DHubfS8E--o",provider:"youtube"},slug:"functional-programming-bodil-stokke",tag:["programming","lisp","geek","functional","clojure"],thumbnails:{default:{url:"https://i.ytimg.com/vi/DHubfS8E--o/default.jpg",height:90,width:120}},title:"Functional programming - Bodil Stokke"}},{node:{description:"The C++ programming language is accelerating with amazing new features, but sometimes it can feel like these features are out of reach. Unfortunately, many C++ developers are stuck using old C++ compilers, runtimes, and tools. They are missing out on some of the best features the language has to offer. LLVM is an open source project that can help address this, but even so it seems nearly impossible to address this growing gap between what C++ could be and what in practice it is today. This talk will explore these problems and what (if any) solutions might exist. Also, there might be some live demo. About the speaker: Chandler Carruth leads the LLVM and C++ teams at Google, building better compilers, libraries, tools, and more. He is an active contributor to the LLVM open source project, and sits on the board of directors for both the LLVM Foundation and the Standard C++ Foundation. Previously at Google, he worked on several pieces of Google’s distributed build system and helped maintain a few core C++ libraries within Google’s codebase. He received his M.S. and B.S. in Computer Science from Wake Forest University, but disavows all knowledge of the contents of his Master’s thesis. He is regularly found drinking Cherry Coke Zero in the daytime and pontificating over a single malt scotch in the evening.",meta:{duration:"PT1H23M18S"},presenter:{name:"Jason Turner"},source:{id:"OkgvqjJzH_Y",provider:"youtube"},slug:"rethinking-exceptions",tag:["C++","Exceptions","Pacific++"],thumbnails:{default:{url:"https://i.ytimg.com/vi/OkgvqjJzH_Y/default.jpg",height:90,width:120}},title:"Rethinking Exceptions"}},{node:{description:"In the 45+ years since Scott Meyers wrote his first program, he’s played many roles: programmer, user, educator, researcher, consultant. Different roles beget different perspectives on software development, and so many perspectives over so much time have led Scott to strong views about the things that really matter. In this presentation, he’ll share what he believes is especially important in software and software development, and he’ll try to convince you to embrace the same ideas he does.",meta:{duration:"PT1H6M37S"},presenter:{name:"Scott Meyers"},source:{id:"RT46MpK39rQ",provider:"youtube"},slug:"things-that-matter",tag:["DConf 2017","Software Development","Keynote","C++"],thumbnails:{default:{url:"https://i.ytimg.com/vi/RT46MpK39rQ/default.jpg",height:90,width:120}},title:"Things that Matter"}},{node:{description:'Learn from John Papa\'s talk "10 AngularJS Patterns" from Code on the Beach 2014 at One Ocean Resort & Spa, Atlantic Beach, Florida. Sunday, August 10, 2014. www.codeonthebeach.com\n\nAbstract:\n"Once you get beyond the AngularJS basics there are many decisions to be made on how to build robust and maintainable apps. Come learn how to build AngularJS apps that manage multiple screens, structure your application code, maintain clean code with popular patterns, implement CRUD, perform robust HTML validation, use local storage, pass unit tests, and use a automated build tasks. This session explores solutions to several of the common challenges that AngularJS developers face while building business applications."',meta:{duration:"PT1H1M27S"},presenter:{name:null},source:{id:"UlvCbnKAH3g",provider:"youtube"},slug:"john-papa-10-angularjs-patterns-code-on-the-beach-2014",tag:["John Papa","AngularJS (Software)","Beach","JavaScript","Single Page Apps","Patterns","Code on the Beach","conference","Software Engineering (Industry)","Software Development (Industry)","Software Design Pattern (Field Of Study)","Programming Language","programming","Jacksonville (City/Town/Village)","Florida (US State)"],thumbnails:{default:{url:"https://i.ytimg.com/vi/UlvCbnKAH3g/default.jpg",height:90,width:120}},title:"John Papa - 10 AngularJS Patterns - Code on the Beach 2014"}},{node:{description:"Cross posted from msdn's channel 9.\n\nFunctional programming is increasing in popularity these days given the inherent problems with shared mutable state that is rife in the imperative world. As we march on to a world of multi and many-core chipsets, software engineering must evolve to better equip software engineers with the tools to exploit the vast power of multiple core processors as it won't come for free as it did in the recent past which was predictably based on Moore's law.\n\nOf course, learning new ways to think about programming semantics and code patterns are not always straight forward. For example, most imperative programmers (which include most of us who build software for a living...) are somewhat perplexed by the notion of functions as first class data structures that can be combined to create powerful and composable systems. Languages like Haskell are pure functional languages and require programmers to think in a different way, often in a precise mathematical fashion where composing and chaining functions is \"the Way\".\n\nDr. Brian Beckman, a Channel 9 celebrity, astrophysicist and senior software engineer thought it would be a very good idea to address the complexity of monads in an easy to understand way: a technical conversation at the whiteboard with yours truly for Channel 9.\n\nThis video interview is the result of Brian's idea that he can in fact remove the fear of monads from anybody who pays attention to his explanation. Of course, you can't just cover monads in a vacuum (category theory is not really addressed here) so the context is functional programming (Brian covers functions and composable functional structures (function chains) and of course monoids and then monads).\n\nTune in. There's a lot to learn here and only Brian can make monads easy to understand for the rest of us!",meta:{duration:"PT1H7M11S"},presenter:{name:null},source:{id:"ZhuHCtR3xq8",provider:"youtube"},slug:"brian-beckman-dont-fear-the-monad",tag:["haskell","monads","programming","brian beckman","functional programming","Haskell"],thumbnails:{default:{url:"https://i.ytimg.com/vi/ZhuHCtR3xq8/default.jpg",height:90,width:120}},title:"Brian Beckman: Don't fear the Monad"}}]}},pathContext:{slug:"the-clang-ast-a-tutorial",tags:["C++","Clang","compiler","programming"]}}}});
//# sourceMappingURL=path---talk-the-clang-ast-a-tutorial-66792906679c64b50f29.js.map