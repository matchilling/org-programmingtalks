{"version":3,"sources":["webpack:///path---talk-jepsen-iv-hope-springs-eternal-kyle-kingsbury-d95666540fc30e980fe5.js","webpack:///./.cache/json/talk-jepsen-iv-hope-springs-eternal-kyle-kingsbury.json"],"names":["webpackJsonp","3032","module","exports","data","talkJson","description","meta","duration","presenter","name","slug","source","id","provider","tag","title","allTalkJson","edges","node","thumbnails","default","url","height","width","pathContext","tags"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,UAAYC,YAAA,ikBAAAC,MAAulBC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,KAAA,gDAAAC,QAAkEC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,4GAAAC,MAAA,oDAA+KC,aAAgBC,QAAUC,MAAQb,YAAA,2lBAAAC,MAAinBC,SAAA,YAAsBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,+CAAAI,KAAA,iNAAAK,YAA6RC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,kDAA2DG,MAAQb,YAAA,6dAAAC,MAAqfC,SAAA,WAAqBC,WAAcC,KAAA,cAAoBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,gCAAAI,KAAA,mCAAAK,YAAgGC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,oCAA6CG,MAAQb,YAAA,gxBAAAC,MAAsyBC,SAAA,YAAsBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,kEAAAI,KAAA,yJAAAK,YAAwPC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,yEAAkFG,MAAQb,YAAA,+dAAAC,MAAqfC,SAAA,WAAqBC,WAAcC,KAAA,mBAAyBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,kCAAAI,KAAA,+EAAAK,YAA8IC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,qCAA8CG,MAAQb,YAAA,oRAAAC,MAA0SC,SAAA,WAAqBC,WAAcC,KAAA,aAAmBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,+CAAAI,KAAA,kEAAAK,YAA8IC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,iDAA0DG,MAAQb,YAAA,4jCAAAC,MAAulCC,SAAA,WAAqBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,8BAAAI,KAAA,uOAAAK,YAAkSC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,mCAA4CG,MAAQb,YAAA,wgCAAAC,MAA8hCC,SAAA,YAAsBC,WAAcC,KAAA,iBAAuBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,qBAAAI,KAAA,sFAAAK,YAAwIC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,wBAAiCG,MAAQb,YAAA,y4CAAAC,MAAi6CC,SAAA,aAAuBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,oDAAAI,KAAA,2OAAAK,YAA4TC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,wDAAiEG,MAAQb,YAAA,gqEAAAC,MAAsrEC,SAAA,aAAuBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,2DAAAI,KAAA,8NAAAK,YAAsTC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,8DAAuEG,MAAQb,YAAA,+gBAAAC,MAAqiBC,SAAA,WAAqBC,WAAcC,KAAA,mBAAyBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,wCAAAI,KAAA,8EAAAK,YAAmJC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,gCAAwCS,aAAgBd,KAAA,gDAAAe,MAAA","file":"path---talk-jepsen-iv-hope-springs-eternal-kyle-kingsbury-d95666540fc30e980fe5.js","sourcesContent":["webpackJsonp([107348516228384],{\n\n/***/ 3032:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"talkJson\":{\"description\":\"This presentation was recorded at GOTO Chicago 2015\\nhttp://gotochgo.com\\n\\nKyle Kingsbury - Author of Jepsen\\n\\nABSTRACT\\nStateless applications aren't: they rely on other systems storing and transforming shared state correctly. On the basis of documentation and reputation we assume that our clients and database systems comprise a safe, [...]\\nDownload slides and read the full abstract here:\\nhttp://gotocon.com/chicago-2015/presentation/Jepsen%20IV:%20Hope%20Springs%20Eternal\\n\\nhttps://twitter.com/gotochgo\\nhttps://www.facebook.com/GOTOConference\\nhttp://gotocon.com\",\"meta\":{\"duration\":\"PT54M34S\"},\"presenter\":{\"name\":null},\"slug\":\"jepsen-iv-hope-springs-eternal-kyle-kingsbury\",\"source\":{\"id\":\"dE3KT7hHkKY\",\"provider\":\"youtube\"},\"tag\":[\"Kyle Kingsbury\",\"Jepsen IV\",\"Programming Language\",\"GOTO Conference\",\"GOTO Conference\",\"GOTOO Conference\"],\"title\":\"Jepsen IV: Hope Springs Eternal • Kyle Kingsbury\"},\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"This presentation was recorded at GOTO Chicago 2015\\nhttp://gotochgo.com\\n\\nBrian LeRoux - PhoneGap Project Team, Adobe\\n\\nABSTRACT\\nJavaScript has a long history of being difficult to structure and maintain. To deal with this complexity a swath of frameworks appeared over the years. Prototype.js was quickly followed by jQuery and hounded by Dojo, YUI, Mootools and [...]\\nDownload slides and read the full abstract here:\\nhttp://gotocon.com/chicago-2015/presentation/ECMAScript%206%20&%20Web%20Components\\n\\nhttps://twitter.com/gotochgo\\nhttps://www.facebook.com/GOTOConference\\nhttp://gotocon.com\",\"meta\":{\"duration\":\"PT36M12S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"2w4sRkTnhPM\",\"provider\":\"youtube\"},\"slug\":\"ecmascript-6-and-web-components-brian-leroux\",\"tag\":[\"Brian LeRoux\",\"ECMAScript (Programming Language)\",\"GOTO Conference\",\"GOTO Conference\",\"GOTO Conference\",\"World Wide Web (Video Game Platform)\",\"Software Development (Industry)\",\"Programming Language\",\"Java\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/2w4sRkTnhPM/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"ECMAScript 6 & Web Components • Brian LeRoux\"}},{\"node\":{\"description\":\"There are now several frameworks designed to address the demand for \\\"big agile.\\\"\\n\\nIn this talk Jez will explain the flaws in such frameworks, why they so often fail to produce the desired effects, and what we should do instead. He will also address some common organizational obstacles to moving fast at scale: governance, budgeting, and the project paradigm - and discuss how to address them. Warning: this talk will include liberal use of real, statistically sound data.\",\"meta\":{\"duration\":\"PT51M2S\"},\"presenter\":{\"name\":\"Jez Humble\"},\"source\":{\"id\":\"2zYxWEZ0gYg\",\"provider\":\"youtube\"},\"slug\":\"why-scaling-agile-doesnt-work\",\"tag\":[\"GOTO Conference\",\"Agile\",\"Scrum\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/2zYxWEZ0gYg/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Why Scaling Agile Doesn't Work\"}},{\"node\":{\"description\":\"The time has come to think concurrently. Traditional software concurrency management leads to non-deterministic race conditions and deadlocks that are hard to reproduce and debug, leading to unreliable software. That means it's time to introduce math. Tony Hoare's paradigm of communicating sequential processes, or CSP, is not only a robust way to manage concurrency, but it's fun too! Join us to learn more about how CSP in the Go programming language allows us to reason more clearly about many things happening at once.\\n\\nAbout Eric:\\n\\nEric Shull is a software consultant and developer at Atomic Object. He enjoys working in Go and ClojureScript, writing, sketchnoting, doing math, creating data visualizations, making experimental programming languages, and much, much more.\",\"meta\":{\"duration\":\"PT43M22S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"3gXWA6WEvOM\",\"provider\":\"youtube\"},\"slug\":\"eric-shull-communicating-sequential-processes-september-22-2015\",\"tag\":[\"Communicating Sequential Processes (Programming Language)\",\"Eric Shull\",\"Atomic Object\",\"Programming Language\",\"Programmer (Profession)\",\"Software GR\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/3gXWA6WEvOM/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Eric Shull: Communicating Sequential Processes (September 22, 2015)\"}},{\"node\":{\"description\":\"Cybercriminals are often perceived as having super powers to get into your systems and steal your money and data. The vast majority are just following simple cookbook recipes to take advantage of laziness, sloppiness and an failure to understand what might be risky behaviour. Defences against cybercrime do not have to be hi-tech or even very complex.\\nThis talk discusses various types of cybercrime and gives some practical advice as to how to make yourself a little safer.\",\"meta\":{\"duration\":\"PT51M4S\"},\"presenter\":{\"name\":\"Richard Clayton\"},\"source\":{\"id\":\"624S9ly09Xk\",\"provider\":\"youtube\"},\"slug\":\"a-practical-guide-to-cybercrime\",\"tag\":[\"GOTO Conference\",\"University of Cambridge\",\"Cybercrime\",\"Security\",\"Privacy\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/624S9ly09Xk/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"A Practical Guide to Cybercrime\"}},{\"node\":{\"description\":\"R is a domain-specific language for analyzing data. Why does data analysis need its own DSL? What does R do well and what does it do poorly? How can developers take advantage of R's strengths and mitigate its weaknesses? This talk will give some answers to these questions.\",\"meta\":{\"duration\":\"PT38M9S\"},\"presenter\":{\"name\":\"John Cook\"},\"source\":{\"id\":\"6S9r_YbqHy8\",\"provider\":\"youtube\"},\"slug\":\"the-r-language-the-good-the-bad-and-the-ugly\",\"tag\":[\"GOTO Conference\",\"Aarhus\",\"R Programming Language\",\"Statistics\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/6S9r_YbqHy8/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"The R Language: The Good The Bad & The Ugly\"}},{\"node\":{\"description\":\"Dan North - Agile Troublemaker, Developer, Originator of BDD\\n\\nABSTRACT\\nThus begins an old, and sadly lost in the mists of Usenet, love story about Vi and Ed (who becomes her \\\"ex\\\"), told entirely in Unix commands. I had no idea when I started learning these arcane (guess how the \\\"dd\\\" command got its name) and cryptic (what about \\\"grep\\\"?) Unix commands how incredibly useful they would become over the next two decades. If your primary OS is Linux or OSX on the desktop, and maybe iOS or Android on the move, you'll find this 40-something year joke (\\\"Unix\\\" itself was a bad pun) has managed to embed itself into every facet of your technological life.\\n\\nBeing comfortable at a shell prompt and having a healthy working knowledge of Unix commands and regular expressions will give you a whole new level of capability. In this fun talk I'll introduce a few commands and shell tricks you should have in your back pocket, and show you how to start taking control of your operating system. If you ask nicely I'll even tell you about the production system I wrote using Makefiles.\",\"meta\":{\"duration\":\"PT30M4S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"7uwW20odwEk\",\"provider\":\"youtube\"},\"slug\":\"power-use-of-unix-dan-north\",\"tag\":[\"Unix (Software)\",\"Unix Commands\",\"Grep (Software)\",\"Linux software\",\"OSx86 (Software)\",\"Android (Software)\",\"production system\",\"Makefiles\",\"Dan North\",\"GOTO Conference\",\"GOTO Conference\",\"GOTO Conference\",\"Programming Language\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/7uwW20odwEk/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Power Use of UNIX • Dan North\"}},{\"node\":{\"description\":\"Systems get bigger, technologies reach further, practices mature, advice changes... or at least some of it does. Some guidance remains unaffected by the passing of paradigms, the evolution of technology or the scaling of development: break your software into small, cohesive parts defined by clear interfaces and sound implementations, all the while striving for simplicity. The excuses for not doing so are as predictable as they are problematic. But if you want to create legacy code, make sure code is arbitrarily partitioned into large, incoherent parts characterised by unwieldy interfaces and incomprehensible implementations.\\nWhile there are many definitions of what a legacy system is, common to almost all perceptions of a legacy system is the concept of size — specifically, lots of it. The phrase 'small legacy system' can be considered an oxymoron. This talk sets out to re-assess and reassert the importance of thinking and implementing small as an essential property of software systems — yes, even the large ones.\",\"meta\":{\"duration\":\"PT1H7M3S\"},\"presenter\":{\"name\":\"Kevlin Henney\"},\"source\":{\"id\":\"B3b4tremI5o\",\"provider\":\"youtube\"},\"slug\":\"small-is-beautiful\",\"tag\":[\"GOTO Conference\",\"Keynote\",\"GOTO Copenhagen\",\"Scaling\",\"Legacy System\",\"Simplicity\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/B3b4tremI5o/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Small Is Beautiful\"}},{\"node\":{\"description\":\"This presentation was recorded at GOTO Chicago 2014\\nhttp://gotochgo.com\\n\\nAdrian Cockcroft - Technology Fellow at Battery Ventures and Former Netflix Cloud Architect Pioneer\\n\\nABSTRACT\\nTo deliver software products at high velocity requires four things. First, a culture of innovation that can see and respond to opportunities. Second, the data and analytics to evaluate alternatives. Third, a culture that can make decisions and assign resources quickly. Fourth, agile development and self service deployment. A fine grain loosely coupled architecture scales as the team size grows, a freedom and responsibility culture provides autonomy for innovation and fast decision making, unstructured \\\"Big Data\\\" analytics gets answers quickly, cloud removes the latency of resource allocation, and DevOps removes the coordination latency that slows down deployment. Traditional enterprise architectures are based on monolithic applications and relational databases. Cloud native architectures are based on buiding single function REST-based microservices that support integration across denormalized NoSQL data stores and a wide range of web services. This talk will also discuss strategies, patterns and pathways to perform a gradual migration towards cloud native.\\n\\nLink to slides: http://gotocon.com/dl/goto-chicago-20...\\n\\nhttps://twitter.com/gotochgo\\nhttps://www.facebook.com/GOTOConference\\nhttp://gotocon.com\",\"meta\":{\"duration\":\"PT1H4M52S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"BeNrVl2_nyI\",\"provider\":\"youtube\"},\"slug\":\"speed-and-scale-how-to-get-there-adrian-cockcroft\",\"tag\":[\"Software Engineering (Industry)\",\"Innovation (Quotation Subject)\",\"Database (Software Genre)\",\"DevOps\",\"big data\",\"pathways\",\"adrian cockcroft\",\"GOTO Conference\",\"GOTO Conference\",\"GOTO Conference\",\"Adrian Cockcroft\",\"Speed & Scale\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/BeNrVl2_nyI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Speed & Scale: How to get there • Adrian Cockcroft\"}},{\"node\":{\"description\":\"Meetup: http://www.meetup.com/papers-we-love/events/214400572/\\nPaper: http://www.cs.cmu.edu/~crary/819-f09/Hoare69.pdf\\nSlides: https://speakerdeck.com/paperswelove/jean-yang-on-an-axiomatic-basis-for-computer-programming\\nAudio: http://www.mixcloud.com/paperswelove/jean-yang-on-an-axiomatic-basis-for-computer-programming/\\n---------------------------------------------------------------------------------------------\\nSponsored by The Ladders (@TheLaddersDev)\\n---------------------------------------------------------------------------------------------\\n\\nDescription\\n---------------\\nOur lives now run on software. Bugs are becoming not just annoyances for software developers, but sources of potentially catastrophic failures. A careless programmer mistake could leak our social security numbers or crash our cars. While testing provides some assurance, it is difficult to test all possibilities in complex systems--and practically impossible in concurrent systems. For the critical systems in our lives, we should demand mathematical guarantees that the software behaves the way the programmer expected.\\n\\nA single paper influenced much of the work towards providing these mathematical guarantees. C.A.R. Hoare’s seminal 1969 paper “An Axiomatic Basis for Computer Programming” introduces a method of reasoning about program correctness now known as Hoare logic. In this paper, Hoare provides a technique that 1) allows programmers to express program properties and 2) allows these properties to be automatically checked. These ideas have influenced decades of research in automated reasoning about software correctness.\\n\\nIn this talk, I will describe the main ideas in Hoare logic, as well as the impact of these ideas. I will talk about my personal experience using Hoare logic to verify memory guarantees in an operating system. I will also discuss takeaway lessons for working programmers.\\n\\nBio\\n----\\nJean Yang (@jeanqasaur) is a final-year PhD student at MIT. For her PhD thesis she has created Jeeves, a programming language for automatically enforcing information flow policies for security and privacy. You may be more familiar with one of her other projects, Haskell Ryan Gosling.\",\"meta\":{\"duration\":\"PT1H4M32S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"GQi-6-d5ooQ\",\"provider\":\"youtube\"},\"slug\":\"jean-yang-on-an-axiomatic-basis-for-computer-programming\",\"tag\":[\"Computer Programming (Conference Subject)\",\"Mathematics (Field Of Study)\",\"Software Engineering (Industry)\",\"Program Correctness\",\"Ryan Gosling\",\"Hoare Logic\",\"Type Checking\",\"Computer (Industry)\",\"Programming Language\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/GQi-6-d5ooQ/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Jean Yang on An Axiomatic Basis for Computer Programming\"}},{\"node\":{\"description\":\"This presentation was recorded at GOTO Berlin 2015\\nhttp://gotober.com\\n\\nKevin Goldsmith - Vice President, Engineering at Spotify\\n\\nABSTRACT\\nThe software industry used to be all about building monoliths: monolithic applications and services, with bing-bang product releasees. All that has now changed [...]\\nDownload slides and read the full abstract here:\\nhttp://gotocon.com/berlin-2015/presentation/Microservices%20@%20Spotify\\n\\nhttps://twitter.com/gotober\\nhttps://www.facebook.com/GOTOConference\\nhttp://gotocon.com\",\"meta\":{\"duration\":\"PT49M8S\"},\"presenter\":{\"name\":\"Kevin Goldsmith\"},\"source\":{\"id\":\"7LGPeBgNFuU\",\"provider\":\"youtube\"},\"slug\":\"microservices-spotify-kevin-goldsmith\",\"tag\":[\"GOTO Conference\",\"Berlin\",\"Microservices\",\"Spotify\",\"Programming Languages\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/7LGPeBgNFuU/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Microservices at Spotify\"}}]}},\"pathContext\":{\"slug\":\"jepsen-iv-hope-springs-eternal-kyle-kingsbury\",\"tags\":[\"Kyle Kingsbury\",\"Jepsen IV\",\"Programming Language\",\"GOTO Conference\",\"GOTO Conference\",\"GOTOO Conference\"]}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---talk-jepsen-iv-hope-springs-eternal-kyle-kingsbury-d95666540fc30e980fe5.js","module.exports = {\"data\":{\"talkJson\":{\"description\":\"This presentation was recorded at GOTO Chicago 2015\\nhttp://gotochgo.com\\n\\nKyle Kingsbury - Author of Jepsen\\n\\nABSTRACT\\nStateless applications aren't: they rely on other systems storing and transforming shared state correctly. On the basis of documentation and reputation we assume that our clients and database systems comprise a safe, [...]\\nDownload slides and read the full abstract here:\\nhttp://gotocon.com/chicago-2015/presentation/Jepsen%20IV:%20Hope%20Springs%20Eternal\\n\\nhttps://twitter.com/gotochgo\\nhttps://www.facebook.com/GOTOConference\\nhttp://gotocon.com\",\"meta\":{\"duration\":\"PT54M34S\"},\"presenter\":{\"name\":null},\"slug\":\"jepsen-iv-hope-springs-eternal-kyle-kingsbury\",\"source\":{\"id\":\"dE3KT7hHkKY\",\"provider\":\"youtube\"},\"tag\":[\"Kyle Kingsbury\",\"Jepsen IV\",\"Programming Language\",\"GOTO Conference\",\"GOTO Conference\",\"GOTOO Conference\"],\"title\":\"Jepsen IV: Hope Springs Eternal • Kyle Kingsbury\"},\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"This presentation was recorded at GOTO Chicago 2015\\nhttp://gotochgo.com\\n\\nBrian LeRoux - PhoneGap Project Team, Adobe\\n\\nABSTRACT\\nJavaScript has a long history of being difficult to structure and maintain. To deal with this complexity a swath of frameworks appeared over the years. Prototype.js was quickly followed by jQuery and hounded by Dojo, YUI, Mootools and [...]\\nDownload slides and read the full abstract here:\\nhttp://gotocon.com/chicago-2015/presentation/ECMAScript%206%20&%20Web%20Components\\n\\nhttps://twitter.com/gotochgo\\nhttps://www.facebook.com/GOTOConference\\nhttp://gotocon.com\",\"meta\":{\"duration\":\"PT36M12S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"2w4sRkTnhPM\",\"provider\":\"youtube\"},\"slug\":\"ecmascript-6-and-web-components-brian-leroux\",\"tag\":[\"Brian LeRoux\",\"ECMAScript (Programming Language)\",\"GOTO Conference\",\"GOTO Conference\",\"GOTO Conference\",\"World Wide Web (Video Game Platform)\",\"Software Development (Industry)\",\"Programming Language\",\"Java\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/2w4sRkTnhPM/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"ECMAScript 6 & Web Components • Brian LeRoux\"}},{\"node\":{\"description\":\"There are now several frameworks designed to address the demand for \\\"big agile.\\\"\\n\\nIn this talk Jez will explain the flaws in such frameworks, why they so often fail to produce the desired effects, and what we should do instead. He will also address some common organizational obstacles to moving fast at scale: governance, budgeting, and the project paradigm - and discuss how to address them. Warning: this talk will include liberal use of real, statistically sound data.\",\"meta\":{\"duration\":\"PT51M2S\"},\"presenter\":{\"name\":\"Jez Humble\"},\"source\":{\"id\":\"2zYxWEZ0gYg\",\"provider\":\"youtube\"},\"slug\":\"why-scaling-agile-doesnt-work\",\"tag\":[\"GOTO Conference\",\"Agile\",\"Scrum\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/2zYxWEZ0gYg/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Why Scaling Agile Doesn't Work\"}},{\"node\":{\"description\":\"The time has come to think concurrently. Traditional software concurrency management leads to non-deterministic race conditions and deadlocks that are hard to reproduce and debug, leading to unreliable software. That means it's time to introduce math. Tony Hoare's paradigm of communicating sequential processes, or CSP, is not only a robust way to manage concurrency, but it's fun too! Join us to learn more about how CSP in the Go programming language allows us to reason more clearly about many things happening at once.\\n\\nAbout Eric:\\n\\nEric Shull is a software consultant and developer at Atomic Object. He enjoys working in Go and ClojureScript, writing, sketchnoting, doing math, creating data visualizations, making experimental programming languages, and much, much more.\",\"meta\":{\"duration\":\"PT43M22S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"3gXWA6WEvOM\",\"provider\":\"youtube\"},\"slug\":\"eric-shull-communicating-sequential-processes-september-22-2015\",\"tag\":[\"Communicating Sequential Processes (Programming Language)\",\"Eric Shull\",\"Atomic Object\",\"Programming Language\",\"Programmer (Profession)\",\"Software GR\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/3gXWA6WEvOM/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Eric Shull: Communicating Sequential Processes (September 22, 2015)\"}},{\"node\":{\"description\":\"Cybercriminals are often perceived as having super powers to get into your systems and steal your money and data. The vast majority are just following simple cookbook recipes to take advantage of laziness, sloppiness and an failure to understand what might be risky behaviour. Defences against cybercrime do not have to be hi-tech or even very complex.\\nThis talk discusses various types of cybercrime and gives some practical advice as to how to make yourself a little safer.\",\"meta\":{\"duration\":\"PT51M4S\"},\"presenter\":{\"name\":\"Richard Clayton\"},\"source\":{\"id\":\"624S9ly09Xk\",\"provider\":\"youtube\"},\"slug\":\"a-practical-guide-to-cybercrime\",\"tag\":[\"GOTO Conference\",\"University of Cambridge\",\"Cybercrime\",\"Security\",\"Privacy\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/624S9ly09Xk/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"A Practical Guide to Cybercrime\"}},{\"node\":{\"description\":\"R is a domain-specific language for analyzing data. Why does data analysis need its own DSL? What does R do well and what does it do poorly? How can developers take advantage of R's strengths and mitigate its weaknesses? This talk will give some answers to these questions.\",\"meta\":{\"duration\":\"PT38M9S\"},\"presenter\":{\"name\":\"John Cook\"},\"source\":{\"id\":\"6S9r_YbqHy8\",\"provider\":\"youtube\"},\"slug\":\"the-r-language-the-good-the-bad-and-the-ugly\",\"tag\":[\"GOTO Conference\",\"Aarhus\",\"R Programming Language\",\"Statistics\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/6S9r_YbqHy8/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"The R Language: The Good The Bad & The Ugly\"}},{\"node\":{\"description\":\"Dan North - Agile Troublemaker, Developer, Originator of BDD\\n\\nABSTRACT\\nThus begins an old, and sadly lost in the mists of Usenet, love story about Vi and Ed (who becomes her \\\"ex\\\"), told entirely in Unix commands. I had no idea when I started learning these arcane (guess how the \\\"dd\\\" command got its name) and cryptic (what about \\\"grep\\\"?) Unix commands how incredibly useful they would become over the next two decades. If your primary OS is Linux or OSX on the desktop, and maybe iOS or Android on the move, you'll find this 40-something year joke (\\\"Unix\\\" itself was a bad pun) has managed to embed itself into every facet of your technological life.\\n\\nBeing comfortable at a shell prompt and having a healthy working knowledge of Unix commands and regular expressions will give you a whole new level of capability. In this fun talk I'll introduce a few commands and shell tricks you should have in your back pocket, and show you how to start taking control of your operating system. If you ask nicely I'll even tell you about the production system I wrote using Makefiles.\",\"meta\":{\"duration\":\"PT30M4S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"7uwW20odwEk\",\"provider\":\"youtube\"},\"slug\":\"power-use-of-unix-dan-north\",\"tag\":[\"Unix (Software)\",\"Unix Commands\",\"Grep (Software)\",\"Linux software\",\"OSx86 (Software)\",\"Android (Software)\",\"production system\",\"Makefiles\",\"Dan North\",\"GOTO Conference\",\"GOTO Conference\",\"GOTO Conference\",\"Programming Language\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/7uwW20odwEk/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Power Use of UNIX • Dan North\"}},{\"node\":{\"description\":\"Systems get bigger, technologies reach further, practices mature, advice changes... or at least some of it does. Some guidance remains unaffected by the passing of paradigms, the evolution of technology or the scaling of development: break your software into small, cohesive parts defined by clear interfaces and sound implementations, all the while striving for simplicity. The excuses for not doing so are as predictable as they are problematic. But if you want to create legacy code, make sure code is arbitrarily partitioned into large, incoherent parts characterised by unwieldy interfaces and incomprehensible implementations.\\nWhile there are many definitions of what a legacy system is, common to almost all perceptions of a legacy system is the concept of size — specifically, lots of it. The phrase 'small legacy system' can be considered an oxymoron. This talk sets out to re-assess and reassert the importance of thinking and implementing small as an essential property of software systems — yes, even the large ones.\",\"meta\":{\"duration\":\"PT1H7M3S\"},\"presenter\":{\"name\":\"Kevlin Henney\"},\"source\":{\"id\":\"B3b4tremI5o\",\"provider\":\"youtube\"},\"slug\":\"small-is-beautiful\",\"tag\":[\"GOTO Conference\",\"Keynote\",\"GOTO Copenhagen\",\"Scaling\",\"Legacy System\",\"Simplicity\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/B3b4tremI5o/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Small Is Beautiful\"}},{\"node\":{\"description\":\"This presentation was recorded at GOTO Chicago 2014\\nhttp://gotochgo.com\\n\\nAdrian Cockcroft - Technology Fellow at Battery Ventures and Former Netflix Cloud Architect Pioneer\\n\\nABSTRACT\\nTo deliver software products at high velocity requires four things. First, a culture of innovation that can see and respond to opportunities. Second, the data and analytics to evaluate alternatives. Third, a culture that can make decisions and assign resources quickly. Fourth, agile development and self service deployment. A fine grain loosely coupled architecture scales as the team size grows, a freedom and responsibility culture provides autonomy for innovation and fast decision making, unstructured \\\"Big Data\\\" analytics gets answers quickly, cloud removes the latency of resource allocation, and DevOps removes the coordination latency that slows down deployment. Traditional enterprise architectures are based on monolithic applications and relational databases. Cloud native architectures are based on buiding single function REST-based microservices that support integration across denormalized NoSQL data stores and a wide range of web services. This talk will also discuss strategies, patterns and pathways to perform a gradual migration towards cloud native.\\n\\nLink to slides: http://gotocon.com/dl/goto-chicago-20...\\n\\nhttps://twitter.com/gotochgo\\nhttps://www.facebook.com/GOTOConference\\nhttp://gotocon.com\",\"meta\":{\"duration\":\"PT1H4M52S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"BeNrVl2_nyI\",\"provider\":\"youtube\"},\"slug\":\"speed-and-scale-how-to-get-there-adrian-cockcroft\",\"tag\":[\"Software Engineering (Industry)\",\"Innovation (Quotation Subject)\",\"Database (Software Genre)\",\"DevOps\",\"big data\",\"pathways\",\"adrian cockcroft\",\"GOTO Conference\",\"GOTO Conference\",\"GOTO Conference\",\"Adrian Cockcroft\",\"Speed & Scale\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/BeNrVl2_nyI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Speed & Scale: How to get there • Adrian Cockcroft\"}},{\"node\":{\"description\":\"Meetup: http://www.meetup.com/papers-we-love/events/214400572/\\nPaper: http://www.cs.cmu.edu/~crary/819-f09/Hoare69.pdf\\nSlides: https://speakerdeck.com/paperswelove/jean-yang-on-an-axiomatic-basis-for-computer-programming\\nAudio: http://www.mixcloud.com/paperswelove/jean-yang-on-an-axiomatic-basis-for-computer-programming/\\n---------------------------------------------------------------------------------------------\\nSponsored by The Ladders (@TheLaddersDev)\\n---------------------------------------------------------------------------------------------\\n\\nDescription\\n---------------\\nOur lives now run on software. Bugs are becoming not just annoyances for software developers, but sources of potentially catastrophic failures. A careless programmer mistake could leak our social security numbers or crash our cars. While testing provides some assurance, it is difficult to test all possibilities in complex systems--and practically impossible in concurrent systems. For the critical systems in our lives, we should demand mathematical guarantees that the software behaves the way the programmer expected.\\n\\nA single paper influenced much of the work towards providing these mathematical guarantees. C.A.R. Hoare’s seminal 1969 paper “An Axiomatic Basis for Computer Programming” introduces a method of reasoning about program correctness now known as Hoare logic. In this paper, Hoare provides a technique that 1) allows programmers to express program properties and 2) allows these properties to be automatically checked. These ideas have influenced decades of research in automated reasoning about software correctness.\\n\\nIn this talk, I will describe the main ideas in Hoare logic, as well as the impact of these ideas. I will talk about my personal experience using Hoare logic to verify memory guarantees in an operating system. I will also discuss takeaway lessons for working programmers.\\n\\nBio\\n----\\nJean Yang (@jeanqasaur) is a final-year PhD student at MIT. For her PhD thesis she has created Jeeves, a programming language for automatically enforcing information flow policies for security and privacy. You may be more familiar with one of her other projects, Haskell Ryan Gosling.\",\"meta\":{\"duration\":\"PT1H4M32S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"GQi-6-d5ooQ\",\"provider\":\"youtube\"},\"slug\":\"jean-yang-on-an-axiomatic-basis-for-computer-programming\",\"tag\":[\"Computer Programming (Conference Subject)\",\"Mathematics (Field Of Study)\",\"Software Engineering (Industry)\",\"Program Correctness\",\"Ryan Gosling\",\"Hoare Logic\",\"Type Checking\",\"Computer (Industry)\",\"Programming Language\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/GQi-6-d5ooQ/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Jean Yang on An Axiomatic Basis for Computer Programming\"}},{\"node\":{\"description\":\"This presentation was recorded at GOTO Berlin 2015\\nhttp://gotober.com\\n\\nKevin Goldsmith - Vice President, Engineering at Spotify\\n\\nABSTRACT\\nThe software industry used to be all about building monoliths: monolithic applications and services, with bing-bang product releasees. All that has now changed [...]\\nDownload slides and read the full abstract here:\\nhttp://gotocon.com/berlin-2015/presentation/Microservices%20@%20Spotify\\n\\nhttps://twitter.com/gotober\\nhttps://www.facebook.com/GOTOConference\\nhttp://gotocon.com\",\"meta\":{\"duration\":\"PT49M8S\"},\"presenter\":{\"name\":\"Kevin Goldsmith\"},\"source\":{\"id\":\"7LGPeBgNFuU\",\"provider\":\"youtube\"},\"slug\":\"microservices-spotify-kevin-goldsmith\",\"tag\":[\"GOTO Conference\",\"Berlin\",\"Microservices\",\"Spotify\",\"Programming Languages\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/7LGPeBgNFuU/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Microservices at Spotify\"}}]}},\"pathContext\":{\"slug\":\"jepsen-iv-hope-springs-eternal-kyle-kingsbury\",\"tags\":[\"Kyle Kingsbury\",\"Jepsen IV\",\"Programming Language\",\"GOTO Conference\",\"GOTO Conference\",\"GOTOO Conference\"]}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/talk-jepsen-iv-hope-springs-eternal-kyle-kingsbury.json\n// module id = 3032\n// module chunks = 107348516228384"],"sourceRoot":""}