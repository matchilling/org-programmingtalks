webpackJsonp([0xb2ad8c06c120],{3082:function(e,a){e.exports={data:{talkJson:{description:"Racket is the best programming language that embraces the premise that there is no best programming language. In other words, Racket is designed to support the creation of programming languages which can then be used to build programs. Using Racket, we have built program languages ranging from large, general-purpose languages matching particular programming paradigms to small, specialized programming languages designed for just a single file in some larger program.\n\nIn this talk, I will bring across how it feels to program in such a language, discuss some of the technical support Racket has to make such programming practical, and show how Racket’s standard libraries have embraced this perspective, enabling us to include lots of batteries.\n\nRobby is an associate professor of computer science at Northwestern University and received his PhD from Rice University in 2002. He is the author or two textbooks, one on introductory programming and one on operational semantics. Robby is one of the core developers of Racket and has helped shape the design the language since its inception in 1994.\n\nFor more on Lambda Jam, visit http://www.lambdajam.com",meta:{duration:"PT51M43S"},presenter:{name:null},slug:"lambda-jam-2015-robby-findler-racket-a-programming-language-programming-language",source:{id:"hFlIl0Zo234",provider:"youtube"},tag:["Robby Findler","Lambda Jam 2015","Racket","Programming Languages","Functional Programming"],title:"Lambda Jam 2015 - Robby Findler - Racket: A Programming-Language Programming Language"},allTalkJson:{edges:[{node:{description:"The Model-View-Controller (MVC) approach to user interfaces was first proposed by Trygve Reenskaug in a 1979 Xerox PARC note. As Object Oriented methodologies gained popularity, MVC too gained traction as a natural and logical way to construct user interfaces despite obvious shortcomings. Even though OO researchers moved forward with alternative approaches likes Morphic and constraint based systems, MVC today maintains a stranglehold on mainstream developer approaches to UI.\n\nCan functional programming take the good lessons from MVC while advancing the state of the art? Functional Reactive Programming and its derivatives primarily solve complexities around events - what of component modularity and abstraction?\n\nWe'll examine how a new library for ClojureScript called Om, a simple functional layer over Facebook's React, makes some traditional hard problems in MVC based UIs simple without abandoning the abstractions OO programmers find so useful. These concepts are easily portable to other systems provided the presence of persistent data structures.",meta:{duration:"PT27M2S"},presenter:{name:"David Nolen"},source:{id:"DMtwq3QtddY",provider:"youtube"},slug:"the-functional-final-frontier",tag:["Clojure","Functional Programming"],thumbnails:{default:{url:"https://i.ytimg.com/vi/DMtwq3QtddY/default.jpg",height:90,width:120}},title:"The Functional Final Frontier"}},{node:{description:"Why is functional programming becoming such a hot topic? Just what _is_ functional programming anyway? And when am I going to have to know about it? In this talk Uncle Bob will walk you through the rationale that is driving the current push towards functional programming. He'll also introduce you to the basics by walking through some simple Clojure code.",meta:{duration:"PT58M27S"},presenter:{name:'"Uncle Bob" - Robert Cecil Martin'},source:{id:"7Zlp9rKHGD4",provider:"youtube"},slug:"functional-programming-what-why-when",tag:["Functional Programming","NDC Conference 2014"],thumbnails:{default:{url:"https://i.ytimg.com/vi/7Zlp9rKHGD4/default.jpg",height:90,width:120}},title:"Functional Programming; What? Why? When?"}},{node:{description:"This presentation was recorded at GOTO Berlin 2015\nhttp://gotober.com\n\nKevin Goldsmith - Vice President, Engineering at Spotify\n\nABSTRACT\nThe software industry used to be all about building monoliths: monolithic applications and services, with bing-bang product releasees. All that has now changed [...]\nDownload slides and read the full abstract here:\nhttp://gotocon.com/berlin-2015/presentation/Microservices%20@%20Spotify\n\nhttps://twitter.com/gotober\nhttps://www.facebook.com/GOTOConference\nhttp://gotocon.com",meta:{duration:"PT49M8S"},presenter:{name:"Kevin Goldsmith"},source:{id:"7LGPeBgNFuU",provider:"youtube"},slug:"microservices-spotify-kevin-goldsmith",tag:["GOTO Conference","Berlin","Microservices","Spotify","Programming Languages"],thumbnails:{default:{url:"https://i.ytimg.com/vi/7LGPeBgNFuU/default.jpg",height:90,width:120}},title:"Microservices at Spotify"}},{node:{description:"RxJava is a library for composing asynchronous and event-based programs by using observable sequences for the Java VM. It supports Java 6+, Clojure, Scala, Groovy, JRuby, and Java 8 lambdas. In this session, learn how the Netflix API uses RxJava to implement highly concurrent Web services against asynchronous datasources without blocking, synchronization, or thread safety concerns by using declarative functional reactive composition.",meta:{duration:"PT49M27S"},presenter:{name:"Ben Christensen"},source:{id:"_t06LRX0DV0",provider:"youtube"},slug:"functional-reactive-programming-rxjava",tag:["Functional Programming","Reactive","RxJava","Netflix","GOTO 2013"],thumbnails:{default:{url:"https://i.ytimg.com/vi/_t06LRX0DV0/default.jpg",height:90,width:120}},title:"Functional Reactive Programming with RxJava"}},{node:{description:"Slides: http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf\n\nThis was a talk I gave at the second New York Haskell User Group Meeting (http://www.meetup.com/NY-Haskell/) on the new lens library, which provides a highly composable toolbox for accessing and modifying multiple parts of data structures.\n\nStarting with building blocks such as fmap and (.), we build up combinators suitable for working with a wide array of data structures. These generalize the notions you already know how to use into a form that is easier to compose and simultaneously allow them to be used for monomorphic containers such as Data.Text. \n\nAll without compromising on your ability to reason about them using laws!\n\nFinally, once I've built up some foundations, I do a bit of a deep dive, exploring consequences of this design. In particular we discuss the efficient generic programming programming framework exported by lens, and type-safe Traversal-based zippers.\n\nFamiliarity with the Applicative and Traversable classes from the Haskell base libraries will be helpful (links provided below), but a basic understanding of the concepts get introduced as I go along. \n\nUseful (but not mandatory) references:\n\nThe lens library and documentation: http://hackage.haskell.org/package/lens\nA previous, more introductory talk on how to use the lenses Edward Kmett wrote for the scalaz in the Scala programming language: https://www.youtube.com/watch?v=efv0SQNde5Q\nThe original Applicative paper: http://www.soi.city.ac.uk/~ross/papers/Applicative.pdf\nLots of information on Traversable: http://www.cs.ox.ac.uk/jeremy.gibbons/publications/iterator.pdf\nA write-up of this talk, as presented at the Bay Area Haskell Users Group: http://google-opensource.blogspot.com/2012/10/lenses-folds-and-traversals-haskell.html\n\nThe original Keynote version of the slides are available from http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.key\n\nThanks go to Johan Kiviniemi, who worked magic when it came to cleaning up the audio for this recording!",meta:{duration:"PT1H54M46S"},presenter:{name:null},source:{id:"cefnmjtAolY",provider:"youtube"},slug:"lenses-folds-and-traversals",tag:["Haskell","Functional Programming","Haskell","Mathematics","Lecture","Talk","Academic","Talking","Computer"],thumbnails:{default:{url:"https://i.ytimg.com/vi/cefnmjtAolY/default.jpg",height:90,width:120}},title:"Lenses, Folds, and Traversals"}},{node:{description:'Meetup: http://www.meetup.com/papers-we-love/events/220021234/\nPaper: https://www.cs.utah.edu/plt/publications/macromod.pdf\nSlides: http://bit.ly/1KNwpjC\nAudio: https://www.mixcloud.com/paperswelove/sam-tobin-hochstadt-on-composable-and-compilable-macros/\n--------------------------------------------------------------------------------------------------------------------------------------------------\nSponsored by Two Sigma (@twosigma), The Ladders (@TheLaddersDev), and LispNYC (@lispnyc)\n--------------------------------------------------------------------------------------------------------------------------------------------------\n\nDescription\n---------------\n"Composable and Compilable Macros" introduces the Racket module system, which addresses the following problem: When you have macros that run programs at compile-time, how does this interact with separate compilation and ahead-of-time compilation. The paper introduces "phases", which enable Racket to behave the same regardless of when and how you compile your program. It also introduces the idea of writing different modules in different languages, which is now used for systems like Typed Racket.\n\nA few related papers:\n\n- Syntactic Abstraction in Scheme, Dybvig Hieb & Bruggeman, Lisp andSymbolic Computation 1993\n\n- Macros that Work Together, Flatt, Findler, Culpepper, & Darais, JFP 2012- Submodules in Racket, Flatt GPCE 2013\n\n- Implicit phasing for R6RS libraries,  Ghuloum & Dybvig, ICFP 2007\n\n- Extending the scope of syntactic abstraction, Waddell & Dybvig, POPL 1999 \n\nBio\n----\nSam Tobin-Hochstadt (@samth) is an Assistant Professor in the School of Informatics and Computing at Indiana University. He has worked on dynamic languages, type systems, module systems, and metaprogramming, including creating the Typed Racket system and popularizing the phrase “scripts to programs.” He is a member of the ECMA TC39 working group responsible for standardizing JavaScript, where he co-designed the module system for ES6, the next version of JavaScript. He received his PhD in 2010 from Northeastern University under Matthias Felleisen.',meta:{duration:"PT54M49S"},presenter:{name:null},source:{id:"pK2E63mhRxI",provider:"youtube"},slug:"sam-tobin-hochstadt-on-composable-and-compilable-macros",tag:["Computer Programming (Conference Subject)","Programming Languages","Macros","Racket","Modules","Scheme","Papers We Love","ICFP"],thumbnails:{default:{url:"https://i.ytimg.com/vi/pK2E63mhRxI/default.jpg",height:90,width:120}},title:"Sam Tobin-Hochstadt on Composable and Compilable Macros"}}]}},pathContext:{slug:"lambda-jam-2015-robby-findler-racket-a-programming-language-programming-language",tags:["Robby Findler","Lambda Jam 2015","Racket","Programming Languages","Functional Programming"]}}}});
//# sourceMappingURL=path---talk-lambda-jam-2015-robby-findler-racket-a-programming-language-programming-language-dca5874d89aff169a285.js.map