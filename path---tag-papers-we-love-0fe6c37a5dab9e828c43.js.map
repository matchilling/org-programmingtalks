{"version":3,"sources":["webpack:///path---tag-papers-we-love-0fe6c37a5dab9e828c43.js","webpack:///./.cache/json/tag-papers-we-love.json"],"names":["webpackJsonp","2565","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,+tCAAAC,MAAqvCC,SAAA,cAAwBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,oEAAAC,KAAA,8IAAAC,YAA+OC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,uEAAgFhB,MAAQC,YAAA,ylEAAAC,MAAmnEC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,0DAAAC,KAAA,kIAAAC,YAAyNC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,+DAAuEC,aAAgBR,KAAA,iBAAAC,IAAA","file":"path---tag-papers-we-love-0fe6c37a5dab9e828c43.js","sourcesContent":["webpackJsonp([36087520215545],{\n\n/***/ 2565:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Meetup: http://www.meetup.com/papers-we-love/events/220902753/\\nPaper: http://www.cs.cmu.edu/~crary/819-f09/Strachey67.pdf\\nSlides: http://bit.ly/1BnBb08\\nAudio: http://bit.ly/1HAdXci\\n\\n---------------------------------------------------------------------------------------------\\nSponsored by Two Sigma (@twosigma) and The Ladders (@TheLaddersDev)\\n---------------------------------------------------------------------------------------------\\n\\nDescription\\n---------------\\nStrachey's lectures on \\\"Fundamental Concepts in Programming Languages\\\" provided an extremely broad survey of core issues in programming language design that provided much of the terminology we use today, including definitions of the kinds of polymorphism and the kinds of expressions we see in programming languages. Published as a paper many years later, Strachey's lectures provide an especially readable overview of programming languages concepts.\\n\\nBio\\n----\\nJohn Myles White (@johnmyleswhite) is a Julia hacker who loves thinking about the ways in which the design of technical programming languages influences the way in which we think about statistics and machine learning. He's written two books about machine learning for O'Reilly and works at Facebook.\",\"meta\":{\"duration\":\"PT1H16M39S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"cO41uoi5cZs\",\"provider\":\"youtube\"},\"slug\":\"john-myles-white-on-fundamental-concepts-in-programming-languages\",\"tag\":[\"programming languages\",\"paperswelove\",\"Papers We Love\",\"computer science\",\"john myles white\",\"julia\",\"semantics\",\"foundations of computing\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/cO41uoi5cZs/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"John Myles White on Fundamental Concepts in Programming Languages\"}},{\"node\":{\"description\":\"Meetup: http://www.meetup.com/papers-we-love/events/220021234/\\nPaper: https://www.cs.utah.edu/plt/publications/macromod.pdf\\nSlides: http://bit.ly/1KNwpjC\\nAudio: https://www.mixcloud.com/paperswelove/sam-tobin-hochstadt-on-composable-and-compilable-macros/\\n--------------------------------------------------------------------------------------------------------------------------------------------------\\nSponsored by Two Sigma (@twosigma), The Ladders (@TheLaddersDev), and LispNYC (@lispnyc)\\n--------------------------------------------------------------------------------------------------------------------------------------------------\\n\\nDescription\\n---------------\\n\\\"Composable and Compilable Macros\\\" introduces the Racket module system, which addresses the following problem: When you have macros that run programs at compile-time, how does this interact with separate compilation and ahead-of-time compilation. The paper introduces \\\"phases\\\", which enable Racket to behave the same regardless of when and how you compile your program. It also introduces the idea of writing different modules in different languages, which is now used for systems like Typed Racket.\\n\\nA few related papers:\\n\\n- Syntactic Abstraction in Scheme, Dybvig Hieb & Bruggeman, Lisp andSymbolic Computation 1993\\n\\n- Macros that Work Together, Flatt, Findler, Culpepper, & Darais, JFP 2012- Submodules in Racket, Flatt GPCE 2013\\n\\n- Implicit phasing for R6RS libraries,  Ghuloum & Dybvig, ICFP 2007\\n\\n- Extending the scope of syntactic abstraction, Waddell & Dybvig, POPL 1999 \\n\\nBio\\n----\\nSam Tobin-Hochstadt (@samth) is an Assistant Professor in the School of Informatics and Computing at Indiana University. He has worked on dynamic languages, type systems, module systems, and metaprogramming, including creating the Typed Racket system and popularizing the phrase “scripts to programs.” He is a member of the ECMA TC39 working group responsible for standardizing JavaScript, where he co-designed the module system for ES6, the next version of JavaScript. He received his PhD in 2010 from Northeastern University under Matthias Felleisen.\",\"meta\":{\"duration\":\"PT54M49S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"pK2E63mhRxI\",\"provider\":\"youtube\"},\"slug\":\"sam-tobin-hochstadt-on-composable-and-compilable-macros\",\"tag\":[\"Computer Programming (Conference Subject)\",\"Programming Languages\",\"Macros\",\"Racket\",\"Modules\",\"Scheme\",\"Papers We Love\",\"ICFP\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/pK2E63mhRxI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Sam Tobin-Hochstadt on Composable and Compilable Macros\"}}]}},\"pathContext\":{\"slug\":\"papers-we-love\",\"tag\":\"Papers We Love\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tag-papers-we-love-0fe6c37a5dab9e828c43.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Meetup: http://www.meetup.com/papers-we-love/events/220902753/\\nPaper: http://www.cs.cmu.edu/~crary/819-f09/Strachey67.pdf\\nSlides: http://bit.ly/1BnBb08\\nAudio: http://bit.ly/1HAdXci\\n\\n---------------------------------------------------------------------------------------------\\nSponsored by Two Sigma (@twosigma) and The Ladders (@TheLaddersDev)\\n---------------------------------------------------------------------------------------------\\n\\nDescription\\n---------------\\nStrachey's lectures on \\\"Fundamental Concepts in Programming Languages\\\" provided an extremely broad survey of core issues in programming language design that provided much of the terminology we use today, including definitions of the kinds of polymorphism and the kinds of expressions we see in programming languages. Published as a paper many years later, Strachey's lectures provide an especially readable overview of programming languages concepts.\\n\\nBio\\n----\\nJohn Myles White (@johnmyleswhite) is a Julia hacker who loves thinking about the ways in which the design of technical programming languages influences the way in which we think about statistics and machine learning. He's written two books about machine learning for O'Reilly and works at Facebook.\",\"meta\":{\"duration\":\"PT1H16M39S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"cO41uoi5cZs\",\"provider\":\"youtube\"},\"slug\":\"john-myles-white-on-fundamental-concepts-in-programming-languages\",\"tag\":[\"programming languages\",\"paperswelove\",\"Papers We Love\",\"computer science\",\"john myles white\",\"julia\",\"semantics\",\"foundations of computing\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/cO41uoi5cZs/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"John Myles White on Fundamental Concepts in Programming Languages\"}},{\"node\":{\"description\":\"Meetup: http://www.meetup.com/papers-we-love/events/220021234/\\nPaper: https://www.cs.utah.edu/plt/publications/macromod.pdf\\nSlides: http://bit.ly/1KNwpjC\\nAudio: https://www.mixcloud.com/paperswelove/sam-tobin-hochstadt-on-composable-and-compilable-macros/\\n--------------------------------------------------------------------------------------------------------------------------------------------------\\nSponsored by Two Sigma (@twosigma), The Ladders (@TheLaddersDev), and LispNYC (@lispnyc)\\n--------------------------------------------------------------------------------------------------------------------------------------------------\\n\\nDescription\\n---------------\\n\\\"Composable and Compilable Macros\\\" introduces the Racket module system, which addresses the following problem: When you have macros that run programs at compile-time, how does this interact with separate compilation and ahead-of-time compilation. The paper introduces \\\"phases\\\", which enable Racket to behave the same regardless of when and how you compile your program. It also introduces the idea of writing different modules in different languages, which is now used for systems like Typed Racket.\\n\\nA few related papers:\\n\\n- Syntactic Abstraction in Scheme, Dybvig Hieb & Bruggeman, Lisp andSymbolic Computation 1993\\n\\n- Macros that Work Together, Flatt, Findler, Culpepper, & Darais, JFP 2012- Submodules in Racket, Flatt GPCE 2013\\n\\n- Implicit phasing for R6RS libraries,  Ghuloum & Dybvig, ICFP 2007\\n\\n- Extending the scope of syntactic abstraction, Waddell & Dybvig, POPL 1999 \\n\\nBio\\n----\\nSam Tobin-Hochstadt (@samth) is an Assistant Professor in the School of Informatics and Computing at Indiana University. He has worked on dynamic languages, type systems, module systems, and metaprogramming, including creating the Typed Racket system and popularizing the phrase “scripts to programs.” He is a member of the ECMA TC39 working group responsible for standardizing JavaScript, where he co-designed the module system for ES6, the next version of JavaScript. He received his PhD in 2010 from Northeastern University under Matthias Felleisen.\",\"meta\":{\"duration\":\"PT54M49S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"pK2E63mhRxI\",\"provider\":\"youtube\"},\"slug\":\"sam-tobin-hochstadt-on-composable-and-compilable-macros\",\"tag\":[\"Computer Programming (Conference Subject)\",\"Programming Languages\",\"Macros\",\"Racket\",\"Modules\",\"Scheme\",\"Papers We Love\",\"ICFP\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/pK2E63mhRxI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Sam Tobin-Hochstadt on Composable and Compilable Macros\"}}]}},\"pathContext\":{\"slug\":\"papers-we-love\",\"tag\":\"Papers We Love\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tag-papers-we-love.json\n// module id = 2565\n// module chunks = 36087520215545"],"sourceRoot":""}