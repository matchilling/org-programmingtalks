{"version":3,"sources":["webpack:///path---speaker-david-nolen-d42c77215d18ab67c1fd.js","webpack:///./.cache/json/speaker-david-nolen.json"],"names":["webpackJsonp","1861","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext","speaker"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,ooBAAAC,MAA0pBC,SAAA,YAAsBC,WAAcC,KAAA,eAAqBC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,yCAAAC,KAAA,sCAAAC,YAA4GC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,6DAAsEhB,MAAQC,YAAA,8iCAAAC,MAAokCC,SAAA,WAAqBC,WAAcC,KAAA,eAAqBC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,gCAAAC,KAAA,oCAAAC,YAAiGC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,mCAA4ChB,MAAQC,YAAA,qPAAAC,MAA2QC,SAAA,YAAsBC,WAAcC,KAAA,eAAqBC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,sBAAAC,KAAA,WAAAC,YAA8DC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,aAAsBhB,MAAQC,YAAA,ygCAAAC,MAA+hCC,SAAA,WAAqBC,WAAcC,KAAA,eAAqBC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,8BAAAC,KAAA,oCAAAC,YAA+FC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,mCAA4ChB,MAAQC,YAAA,07BAAAC,MAAg9BC,SAAA,WAAqBC,WAAcC,KAAA,eAAqBC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,iDAAAC,KAAA,4BAAAC,YAA0GC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,qDAA8DhB,MAAQC,YAAA,ofAAAC,MAA0gBC,SAAA,YAAsBC,WAAcC,KAAA,eAAqBC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,YAAAC,KAAA,oDAAAC,YAA6FC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,eAAwBhB,MAAQC,YAAA,s2BAAAC,MAA43BC,SAAA,YAAsBC,WAAcC,KAAA,eAAqBC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,4CAAAC,KAAA,uDAAAC,YAAgIC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,gDAAwDC,aAAgBC,QAAA","file":"path---speaker-david-nolen-d42c77215d18ab67c1fd.js","sourcesContent":["webpackJsonp([254205502885275],{\n\n/***/ 1861:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"In this talk, we hear from David Nolen from the New York Times about core.async, the new library for asynchronous programming in Clojure and ClojureScript. He'll be talking about Clojure, Communicating Sequential Processes & Responsive Design. This talk was recorded at the NY Clojure Users Group meetup at Two Sigma Investments.\\n\\nAs clients diversify on all fronts, how do we program flexible user interfaces without getting mired in software bloat and rampant complexity? Communicating Sequential Processes gives us the tools we need to design modular user interface components - we'll see how with Clojure, ClojureScript and core.async.\",\"meta\":{\"duration\":\"PT55M32S\"},\"presenter\":{\"name\":\"David Nolen\"},\"source\":{\"id\":\"AhxcGGeh5ho\",\"provider\":\"youtube\"},\"slug\":\"coreasync-for-asynchronous-programming\",\"tag\":[\"Clojure\",\"Asynchronous Programming\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/AhxcGGeh5ho/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Clojure Library Core.async for Asynchronous Programming\"}},{\"node\":{\"description\":\"The Model-View-Controller (MVC) approach to user interfaces was first proposed by Trygve Reenskaug in a 1979 Xerox PARC note. As Object Oriented methodologies gained popularity, MVC too gained traction as a natural and logical way to construct user interfaces despite obvious shortcomings. Even though OO researchers moved forward with alternative approaches likes Morphic and constraint based systems, MVC today maintains a stranglehold on mainstream developer approaches to UI.\\n\\nCan functional programming take the good lessons from MVC while advancing the state of the art? Functional Reactive Programming and its derivatives primarily solve complexities around events - what of component modularity and abstraction?\\n\\nWe'll examine how a new library for ClojureScript called Om, a simple functional layer over Facebook's React, makes some traditional hard problems in MVC based UIs simple without abandoning the abstractions OO programmers find so useful. These concepts are easily portable to other systems provided the presence of persistent data structures.\",\"meta\":{\"duration\":\"PT27M2S\"},\"presenter\":{\"name\":\"David Nolen\"},\"source\":{\"id\":\"DMtwq3QtddY\",\"provider\":\"youtube\"},\"slug\":\"the-functional-final-frontier\",\"tag\":[\"Clojure\",\"Functional Programming\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/DMtwq3QtddY/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"The Functional Final Frontier\"}},{\"node\":{\"description\":\"Rationale and high level design of Om Next.\\n\\nAbout the speaker: David Nolen is a software engineer for Cognitect. He enjoys making music, writing JavaScript, writing ClojureScript, and exploring new approaches to user interface programming.\",\"meta\":{\"duration\":\"PT39M23S\"},\"presenter\":{\"name\":\"David Nolen\"},\"source\":{\"id\":\"MDZpSIngwm4\",\"provider\":\"youtube\"},\"slug\":\"om-next-david-nolen\",\"tag\":[\"Clojure\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/MDZpSIngwm4/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Om Next\"}},{\"node\":{\"description\":\"More than 55 years ago John McCarthy had an insanely great idea called Lisp. Lisp marked the beginning of functional programming, interpreters, high-level metaprogramming, garbage collection, and much more. Yet after such auspicious beginnings the idea of Lisp has since faded and many of its innovations have been adopted by much more popular programming languages. Until recently Lisp even appeared doomed to fade into obscurity but several things have conspired to make Lisp somewhat cool again - one of these is Clojure, a fun modern Lisp targeting the Java Virtual Machine.\\n\\nHowever the Web doesn't speak JVM bytecodes. It speaks JavaScript - thus the cornucopia of languages that now compile to JavaScript. The most well known include GWT, CoffeeScript, and more recently Dart and TypeScript. However none of these represent a real break from the status quo.\\n\\nJohn McCarthy's insanely great idea still has a lot to offer the Web and we'll see how with ClojureScript, an implementation of Clojure that targets JavaScript.\",\"meta\":{\"duration\":\"PT32M3S\"},\"presenter\":{\"name\":\"David Nolen\"},\"source\":{\"id\":\"MTawgp3SKy8\",\"provider\":\"youtube\"},\"slug\":\"clojurescript-lisps-revenge\",\"tag\":[\"Clojure\",\"Lisp\",\"GOTO Conference\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/MTawgp3SKy8/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"ClojureScript: Lisp's Revenge\"}},{\"node\":{\"description\":\"We live in a time of vast computational resources - many of us carry around in our pockets what just thirty years ago would have been considered a supercomputer. But it's not just the hardware, these bite sized supercomputers run software using state of the art dynamic compilation techniques to deliver stellar performance without sacrificing flexibility.\\n\\nWhile all of this may sound incredibly futuristic, many of us still program these Dream Machines with miserly techniques not far removed from the best practices of the 1960s.\\n\\nWe have cycles to spare, by investing some of them into immutable data structures our programs get new wonderful properties that enable us to design solutions at a much higher level of abstraction. Om is a new library I've created just to explore these possibilities. While Om itself is written in ClojureScript, we'll focus primarily on the big ideas present in Om all of which are easily portable to JavaScript.\",\"meta\":{\"duration\":\"PT22M6S\"},\"presenter\":{\"name\":\"David Nolen\"},\"source\":{\"id\":\"SiFwRtCnxv4\",\"provider\":\"youtube\"},\"slug\":\"immutability-putting-the-dream-machine-to-work\",\"tag\":[\"JSConf 2014\",\"JavaScript\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/SiFwRtCnxv4/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Immutability: Putting The Dream Machine To Work\"}},{\"node\":{\"description\":\"For an industry steeped in a mythos of innovation and invention, the path towards reliable software is often obstructed by a web of fixed ideas. Fixed ideas, by actively obscuring alternatives, lead us to inaccurately the weigh the risks and benefits associated with our choices whether they be of an engineering, managerial or business nature. Alan Kay famously quipped that a difference in perspective is worth 80 IQ points but in this talk we'll see that it's worth considerably more than that.\",\"meta\":{\"duration\":\"PT39M37S\"},\"presenter\":{\"name\":\"David Nolen\"},\"source\":{\"id\":\"lzXHMy4ewtM\",\"provider\":\"youtube\"},\"slug\":\"idee-fixe\",\"tag\":[\"GOTO Conference\",\"Chicago\",\"Keynote\",\"Innovation\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/lzXHMy4ewtM/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Id√©e Fixe\"}},{\"node\":{\"description\":\"This is a talk from Barcelona FutureJS 2014 (http://futurejs.org).\\n\\nSurprisingly the high performance mutation available in modern JavaScript engines is a great foundation for building high performance immutable collections. Even more surprisingly efficient immutable collections permit new ways of approaching user interface programming. While the details will be in Om, an immutable user interface toolkit written in ClojureScript over Facebook's React, the talk will be primarily focused on high level concepts easily ported to JavaScript. We'll dive in and see how trees of JavaScript arrays can permit building these efficient immutable collections. Then we'll see how embracing immutable values dramatically simplifies some classic hard problems in client side programming including but not limited to undo, error playback, and online/offline synchronization.\",\"meta\":{\"duration\":\"PT26M20S\"},\"presenter\":{\"name\":\"David Nolen\"},\"source\":{\"id\":\"mS264h8KGwk\",\"provider\":\"youtube\"},\"slug\":\"immutability-interactivity-and-javascript\",\"tag\":[\"JavaScript\",\"Clojure\",\"Immutability\",\"FutureJS 2014\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/mS264h8KGwk/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Immutability, interactivity & JavaScript\"}}]}},\"pathContext\":{\"speaker\":\"David Nolen\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---speaker-david-nolen-d42c77215d18ab67c1fd.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"In this talk, we hear from David Nolen from the New York Times about core.async, the new library for asynchronous programming in Clojure and ClojureScript. He'll be talking about Clojure, Communicating Sequential Processes & Responsive Design. This talk was recorded at the NY Clojure Users Group meetup at Two Sigma Investments.\\n\\nAs clients diversify on all fronts, how do we program flexible user interfaces without getting mired in software bloat and rampant complexity? Communicating Sequential Processes gives us the tools we need to design modular user interface components - we'll see how with Clojure, ClojureScript and core.async.\",\"meta\":{\"duration\":\"PT55M32S\"},\"presenter\":{\"name\":\"David Nolen\"},\"source\":{\"id\":\"AhxcGGeh5ho\",\"provider\":\"youtube\"},\"slug\":\"coreasync-for-asynchronous-programming\",\"tag\":[\"Clojure\",\"Asynchronous Programming\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/AhxcGGeh5ho/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Clojure Library Core.async for Asynchronous Programming\"}},{\"node\":{\"description\":\"The Model-View-Controller (MVC) approach to user interfaces was first proposed by Trygve Reenskaug in a 1979 Xerox PARC note. As Object Oriented methodologies gained popularity, MVC too gained traction as a natural and logical way to construct user interfaces despite obvious shortcomings. Even though OO researchers moved forward with alternative approaches likes Morphic and constraint based systems, MVC today maintains a stranglehold on mainstream developer approaches to UI.\\n\\nCan functional programming take the good lessons from MVC while advancing the state of the art? Functional Reactive Programming and its derivatives primarily solve complexities around events - what of component modularity and abstraction?\\n\\nWe'll examine how a new library for ClojureScript called Om, a simple functional layer over Facebook's React, makes some traditional hard problems in MVC based UIs simple without abandoning the abstractions OO programmers find so useful. These concepts are easily portable to other systems provided the presence of persistent data structures.\",\"meta\":{\"duration\":\"PT27M2S\"},\"presenter\":{\"name\":\"David Nolen\"},\"source\":{\"id\":\"DMtwq3QtddY\",\"provider\":\"youtube\"},\"slug\":\"the-functional-final-frontier\",\"tag\":[\"Clojure\",\"Functional Programming\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/DMtwq3QtddY/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"The Functional Final Frontier\"}},{\"node\":{\"description\":\"Rationale and high level design of Om Next.\\n\\nAbout the speaker: David Nolen is a software engineer for Cognitect. He enjoys making music, writing JavaScript, writing ClojureScript, and exploring new approaches to user interface programming.\",\"meta\":{\"duration\":\"PT39M23S\"},\"presenter\":{\"name\":\"David Nolen\"},\"source\":{\"id\":\"MDZpSIngwm4\",\"provider\":\"youtube\"},\"slug\":\"om-next-david-nolen\",\"tag\":[\"Clojure\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/MDZpSIngwm4/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Om Next\"}},{\"node\":{\"description\":\"More than 55 years ago John McCarthy had an insanely great idea called Lisp. Lisp marked the beginning of functional programming, interpreters, high-level metaprogramming, garbage collection, and much more. Yet after such auspicious beginnings the idea of Lisp has since faded and many of its innovations have been adopted by much more popular programming languages. Until recently Lisp even appeared doomed to fade into obscurity but several things have conspired to make Lisp somewhat cool again - one of these is Clojure, a fun modern Lisp targeting the Java Virtual Machine.\\n\\nHowever the Web doesn't speak JVM bytecodes. It speaks JavaScript - thus the cornucopia of languages that now compile to JavaScript. The most well known include GWT, CoffeeScript, and more recently Dart and TypeScript. However none of these represent a real break from the status quo.\\n\\nJohn McCarthy's insanely great idea still has a lot to offer the Web and we'll see how with ClojureScript, an implementation of Clojure that targets JavaScript.\",\"meta\":{\"duration\":\"PT32M3S\"},\"presenter\":{\"name\":\"David Nolen\"},\"source\":{\"id\":\"MTawgp3SKy8\",\"provider\":\"youtube\"},\"slug\":\"clojurescript-lisps-revenge\",\"tag\":[\"Clojure\",\"Lisp\",\"GOTO Conference\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/MTawgp3SKy8/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"ClojureScript: Lisp's Revenge\"}},{\"node\":{\"description\":\"We live in a time of vast computational resources - many of us carry around in our pockets what just thirty years ago would have been considered a supercomputer. But it's not just the hardware, these bite sized supercomputers run software using state of the art dynamic compilation techniques to deliver stellar performance without sacrificing flexibility.\\n\\nWhile all of this may sound incredibly futuristic, many of us still program these Dream Machines with miserly techniques not far removed from the best practices of the 1960s.\\n\\nWe have cycles to spare, by investing some of them into immutable data structures our programs get new wonderful properties that enable us to design solutions at a much higher level of abstraction. Om is a new library I've created just to explore these possibilities. While Om itself is written in ClojureScript, we'll focus primarily on the big ideas present in Om all of which are easily portable to JavaScript.\",\"meta\":{\"duration\":\"PT22M6S\"},\"presenter\":{\"name\":\"David Nolen\"},\"source\":{\"id\":\"SiFwRtCnxv4\",\"provider\":\"youtube\"},\"slug\":\"immutability-putting-the-dream-machine-to-work\",\"tag\":[\"JSConf 2014\",\"JavaScript\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/SiFwRtCnxv4/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Immutability: Putting The Dream Machine To Work\"}},{\"node\":{\"description\":\"For an industry steeped in a mythos of innovation and invention, the path towards reliable software is often obstructed by a web of fixed ideas. Fixed ideas, by actively obscuring alternatives, lead us to inaccurately the weigh the risks and benefits associated with our choices whether they be of an engineering, managerial or business nature. Alan Kay famously quipped that a difference in perspective is worth 80 IQ points but in this talk we'll see that it's worth considerably more than that.\",\"meta\":{\"duration\":\"PT39M37S\"},\"presenter\":{\"name\":\"David Nolen\"},\"source\":{\"id\":\"lzXHMy4ewtM\",\"provider\":\"youtube\"},\"slug\":\"idee-fixe\",\"tag\":[\"GOTO Conference\",\"Chicago\",\"Keynote\",\"Innovation\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/lzXHMy4ewtM/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Id√©e Fixe\"}},{\"node\":{\"description\":\"This is a talk from Barcelona FutureJS 2014 (http://futurejs.org).\\n\\nSurprisingly the high performance mutation available in modern JavaScript engines is a great foundation for building high performance immutable collections. Even more surprisingly efficient immutable collections permit new ways of approaching user interface programming. While the details will be in Om, an immutable user interface toolkit written in ClojureScript over Facebook's React, the talk will be primarily focused on high level concepts easily ported to JavaScript. We'll dive in and see how trees of JavaScript arrays can permit building these efficient immutable collections. Then we'll see how embracing immutable values dramatically simplifies some classic hard problems in client side programming including but not limited to undo, error playback, and online/offline synchronization.\",\"meta\":{\"duration\":\"PT26M20S\"},\"presenter\":{\"name\":\"David Nolen\"},\"source\":{\"id\":\"mS264h8KGwk\",\"provider\":\"youtube\"},\"slug\":\"immutability-interactivity-and-javascript\",\"tag\":[\"JavaScript\",\"Clojure\",\"Immutability\",\"FutureJS 2014\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/mS264h8KGwk/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Immutability, interactivity & JavaScript\"}}]}},\"pathContext\":{\"speaker\":\"David Nolen\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/speaker-david-nolen.json\n// module id = 1861\n// module chunks = 254205502885275"],"sourceRoot":""}