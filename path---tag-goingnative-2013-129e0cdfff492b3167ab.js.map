{"version":3,"sources":["webpack:///path---tag-goingnative-2013-129e0cdfff492b3167ab.js","webpack:///./.cache/json/tag-goingnative-2013.json"],"names":["webpackJsonp","2280","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,4xBAAAC,MAAkzBC,SAAA,WAAqBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,yBAAAC,KAAA,wCAAAC,YAA8FC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,6BAAsChB,MAAQC,YAAA,kiCAAAC,MAAwjCC,SAAA,cAAwBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,kCAAAC,KAAA,wCAAAC,YAAuGC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,0CAAkDC,aAAgBR,KAAA,mBAAAC,IAAA","file":"path---tag-goingnative-2013-129e0cdfff492b3167ab.js","sourcesContent":["webpackJsonp([184882674386765],{\n\n/***/ 2280:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Day 1 - C++ has powerful rules for dealing with low-level program structure.  Before a program is ever executed, the compiler determines valuable information about every expression in the source code.  The compiler understands exactly how long each object's resources will be needed (lifetime), whether each expression refers to an object that the program has no other way of accessing (rvalueness), and what operations can be performed on each object (type).  Using examples from C++98 through C++14, this presentation will demonstrate how to write code that works with the compiler's knowledge to increase robustness, efficiency, and clarity.  This presentation will also demonstrate the horrible things that happen when programmers think they can do tasks that are better left to compilers.\",\"meta\":{\"duration\":\"PT1H17M\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"AKtHxKJRwp4\",\"provider\":\"youtube\"},\"slug\":\"dont-help-the-compiler\",\"tag\":[\"c++\",\"goingnative\",\"goingnative 2013\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/AKtHxKJRwp4/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Don't Help the Compiler\"}},{\"node\":{\"description\":\"Day 1 - Contemporary computer architectures make it possible for slow code to work reasonably well. They also make it difficult to write really fast code that exploits the CPU amenities to their fullest. And the smart money is on fast code—we're running out of cool things to do with slow code, and the battle will be on doing really interesting and challenging things at the envelope of what the computing fabric endures.\\n\\nSo how to write quick code, quickly? Turns out it's quite difficult because today's complex architectures defy simple rules to be applied everywhere. It is not uncommon that innocuous high-level artifacts have a surprisingly high impact on the bottom line of an application's run time (and power consumed).\\n\\nThis talk is an attempt to set forth a few pieces of tactical advice for writing quick code in C++. Applying these is not guaranteed to produce optimal code, but is likely to put it reasonably within the ballpark. \\n\\nThese tips are based on practical experience but also motivated by the inner workings of modern CPUs.\",\"meta\":{\"duration\":\"PT1H11M37S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"ea5DiCg8HOY\",\"provider\":\"youtube\"},\"slug\":\"writing-quick-code-in-c-quickly\",\"tag\":[\"c++\",\"goingnative\",\"goingnative 2013\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/ea5DiCg8HOY/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Writing Quick Code in C++, Quickly\"}}]}},\"pathContext\":{\"slug\":\"goingnative-2013\",\"tag\":\"goingnative 2013\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tag-goingnative-2013-129e0cdfff492b3167ab.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Day 1 - C++ has powerful rules for dealing with low-level program structure.  Before a program is ever executed, the compiler determines valuable information about every expression in the source code.  The compiler understands exactly how long each object's resources will be needed (lifetime), whether each expression refers to an object that the program has no other way of accessing (rvalueness), and what operations can be performed on each object (type).  Using examples from C++98 through C++14, this presentation will demonstrate how to write code that works with the compiler's knowledge to increase robustness, efficiency, and clarity.  This presentation will also demonstrate the horrible things that happen when programmers think they can do tasks that are better left to compilers.\",\"meta\":{\"duration\":\"PT1H17M\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"AKtHxKJRwp4\",\"provider\":\"youtube\"},\"slug\":\"dont-help-the-compiler\",\"tag\":[\"c++\",\"goingnative\",\"goingnative 2013\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/AKtHxKJRwp4/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Don't Help the Compiler\"}},{\"node\":{\"description\":\"Day 1 - Contemporary computer architectures make it possible for slow code to work reasonably well. They also make it difficult to write really fast code that exploits the CPU amenities to their fullest. And the smart money is on fast code—we're running out of cool things to do with slow code, and the battle will be on doing really interesting and challenging things at the envelope of what the computing fabric endures.\\n\\nSo how to write quick code, quickly? Turns out it's quite difficult because today's complex architectures defy simple rules to be applied everywhere. It is not uncommon that innocuous high-level artifacts have a surprisingly high impact on the bottom line of an application's run time (and power consumed).\\n\\nThis talk is an attempt to set forth a few pieces of tactical advice for writing quick code in C++. Applying these is not guaranteed to produce optimal code, but is likely to put it reasonably within the ballpark. \\n\\nThese tips are based on practical experience but also motivated by the inner workings of modern CPUs.\",\"meta\":{\"duration\":\"PT1H11M37S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"ea5DiCg8HOY\",\"provider\":\"youtube\"},\"slug\":\"writing-quick-code-in-c-quickly\",\"tag\":[\"c++\",\"goingnative\",\"goingnative 2013\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/ea5DiCg8HOY/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Writing Quick Code in C++, Quickly\"}}]}},\"pathContext\":{\"slug\":\"goingnative-2013\",\"tag\":\"goingnative 2013\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tag-goingnative-2013.json\n// module id = 2280\n// module chunks = 184882674386765"],"sourceRoot":""}