{"version":3,"sources":["webpack:///path---tag-bayesian-approach-3b693640bd738292a829.js","webpack:///./.cache/json/tag-bayesian-approach.json"],"names":["webpackJsonp","2039","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,k3BAA6sBC,MAA2LC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,0DAAAC,KAAA,qEAAAC,YAA4JC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,iEAAyEC,aAAgBR,KAAA,oBAAAC,IAAA","file":"path---tag-bayesian-approach-3b693640bd738292a829.js","sourcesContent":["webpackJsonp([29127028090634],{\n\n/***/ 2039:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"PyData SV 2014 \\nMany real-world datasets have missing observations, noise and outliers; usually due to logistical problems, component failures and erroneous procedures during the data collection process. Although it is easy to avoid missing points and noise to some level, it is not easy to detect wrong measurements and outliers in the dataset. These outliers may present a larger problem in time-series signals since every data point has a temporal dependency to the data point before and after. Therefore, it is crucially important to be able to detect and possibly correct these outliers. In this talk, I will introduce three different methods to be able to detect outliers in time-series signals; Fast Fourier Transform(FFT), Median Filtering and Bayesian approach. http://bugra.github.io/work/notes/2014-03-31/outlier-detection-in-time-series-signals-fft-median-filtering/\",\"meta\":{\"duration\":\"PT36M30S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"t4zEeujVht8\",\"provider\":\"youtube\"},\"slug\":\"bugra-akyildiz-outlier-detection-in-time-series-signals\",\"tag\":[\"Python\",\"Data Analysis\",\"PyData\",\"Time Series\",\"Bayesian Approach\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/t4zEeujVht8/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Bugra Akyildiz - Outlier Detection in Time Series Signals\"}}]}},\"pathContext\":{\"slug\":\"bayesian-approach\",\"tag\":\"Bayesian Approach\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tag-bayesian-approach-3b693640bd738292a829.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"PyData SV 2014 \\nMany real-world datasets have missing observations, noise and outliers; usually due to logistical problems, component failures and erroneous procedures during the data collection process. Although it is easy to avoid missing points and noise to some level, it is not easy to detect wrong measurements and outliers in the dataset. These outliers may present a larger problem in time-series signals since every data point has a temporal dependency to the data point before and after. Therefore, it is crucially important to be able to detect and possibly correct these outliers. In this talk, I will introduce three different methods to be able to detect outliers in time-series signals; Fast Fourier Transform(FFT), Median Filtering and Bayesian approach. http://bugra.github.io/work/notes/2014-03-31/outlier-detection-in-time-series-signals-fft-median-filtering/\",\"meta\":{\"duration\":\"PT36M30S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"t4zEeujVht8\",\"provider\":\"youtube\"},\"slug\":\"bugra-akyildiz-outlier-detection-in-time-series-signals\",\"tag\":[\"Python\",\"Data Analysis\",\"PyData\",\"Time Series\",\"Bayesian Approach\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/t4zEeujVht8/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Bugra Akyildiz - Outlier Detection in Time Series Signals\"}}]}},\"pathContext\":{\"slug\":\"bayesian-approach\",\"tag\":\"Bayesian Approach\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tag-bayesian-approach.json\n// module id = 2039\n// module chunks = 29127028090634"],"sourceRoot":""}