{"version":3,"sources":["webpack:///path---tag-marakana-908d14edbbea4b16d4ca.js","webpack:///./.cache/json/tag-marakana.json"],"names":["webpackJsonp","2463","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,uZAAAC,MAA6aC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,uDAAAC,KAAA,4GAAAC,YAAgMC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,2DAAoEhB,MAAQC,YAAA,usBAAAC,MAA6tBC,SAAA,cAAwBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,oBAAAC,KAAA,uEAAAC,YAAwHC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,uBAAgChB,MAAQC,YAAA,wuBAAAC,MAA8vBC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,qCAAAC,KAAA,gEAAAC,YAAkIC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,wCAAiDhB,MAAQC,YAAA,quBAAAC,MAA4vBC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,gCAAAC,KAAA,sJAAAC,YAAmNC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,mCAA4ChB,MAAQC,YAAA,unBAAAC,MAA6oBC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,sCAAAC,KAAA,2KAAAC,YAA8OC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,8CAAsDC,aAAgBR,KAAA,WAAAC,IAAA","file":"path---tag-marakana-908d14edbbea4b16d4ca.js","sourcesContent":["webpackJsonp([169180343719111],{\n\n/***/ 2463:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"In this video tutorial, Dan Rosen will show you how to use Scala's capacity for monadic design to eliminate repetitive boilerplate in your code.  You'll learn to recognize places where the perpetual clutter of null checks, try-catch blocks and more can be hidden within a monad, to make your code's logic stand out clearly.\\r\\n\\r\\n** Head to http://marakana.com for more open source educational resources\",\"meta\":{\"duration\":\"PT31M22S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"Mw_Jnn_Y5iA\",\"provider\":\"youtube\"},\"slug\":\"scala-monads-declutter-your-code-with-monadic-design\",\"tag\":[\"scala\",\"monad\",\"monadic\",\"design patterns\",\"monadic design\",\"dan rosen\",\"marakana\",\"techtv\",\"Code\",\"Demo\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/Mw_Jnn_Y5iA/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Scala Monads: Declutter Your Code With Monadic Design\"}},{\"node\":{\"description\":\"Java is no longer alone on the JVM. It now has to share space with its younger siblings JRuby, Jython, Groovy, Clojure, Scala and many others. Each new language has its own set of advantages and disadvantages compared to Java, and its own niche in which it performs best, but Scala in particular is gaining momentum.\\n\\nIn this presentation to San Francisco Java User Group on January 18, 2012, Marakana's own Dan Rosen introduces Scala to Java developers and shows off some of its expressive power -- higher-order functions, type inference, and pattern matching -- by building a simple web service. You'll never look at Java the same way.\\n\\nSlides from this presentation available here http://bit.ly/ztgVxa\",\"meta\":{\"duration\":\"PT1H32M35S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"PKc5IwHG68k\",\"provider\":\"youtube\"},\"slug\":\"scala-versus-java\",\"tag\":[\"scala\",\"java\",\"marakana\",\"techtv\",\"typesafe\",\"dan rosen\",\"sbt\",\"jdk\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/PKc5IwHG68k/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Scala Versus Java\"}},{\"node\":{\"description\":\"Blake Matheny approaches his talk at NEScala with a collection of trial-and-error experiences he's acquired as the VP of Engineering at Tumblr (who for the past year and half has adopted Scala as their primary backend development language). Blake draws on actual code used at Tumblr, describes their implications in a server context, and shows us where things have gone wrong and how they were corrected.\\n \\nThis talk will be most pertinent to engineers who build backend service applications, but should be of interest to anyone looking to find additional methods for troubleshooting code in Scala.\\n\\n** Visit our site for more content on Scala, including the rest of the presentations from NE Scala 2013: http://marakana.com/s/tags/scala\",\"meta\":{\"duration\":\"PT29M53S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"dCEZDlH1ygo\",\"provider\":\"youtube\"},\"slug\":\"concurrency-anti-patterns-in-scala\",\"tag\":[\"scala\",\"blake matheny\",\"tumblr\",\"nescala\",\"marakana\",\"techtv\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/dCEZDlH1ygo/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Concurrency Anti-patterns in Scala\"}},{\"node\":{\"description\":\"Callback Hell is a very real place. At least, according to Michael Jackson, co-founder of HUM, it is. But stay calm! In this presentation, Michael and his co-presenter\\nDomenic Denicola, Software Engineer at Lab49, will walk you through all the steps required to avoid this dark and mysterious place.\\n\\nInstead of simply throwing together a clunky example, and a solution to a very specific case, Michael and Domenic dive deeper into more conceptual problems. How did we get to \\\"callback hell\\\" and what can we do it avoid it next time? This helpful demonstration covers handy tips about Promises and strategies for building fully asynchronous APIs in JavaScript.\\n\\n**Follow along with Michael and Domenic's slides: http://mrkn.co/lb0t1\",\"meta\":{\"duration\":\"PT50M25S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"hf1T_AONQJU\",\"provider\":\"youtube\"},\"slug\":\"redemption-from-callback-hell\",\"tag\":[\"callback\",\"callback hell\",\"marakana\",\"techtv\",\"html5\",\"html5devconf\",\"michael jackson\",\"michael jackson develoepr\",\"domenic denicola\",\"HUM\",\"Lab49\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/hf1T_AONQJU/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Redemption from Callback Hell\"}},{\"node\":{\"description\":\"Brian Lonsdorf has a love-hate relationship with Underscore.js. Yes, it offers a bunch of tools included in today's functional programming paradigm (like map, filter, reduce, take, drop, compose, etc.), but in Underscore the functions are sometimes verbose and unintuitive. It claims to be a functional programming language, but how true is that?\\n\\nDespite certain characteristics, Brian offers some solutions for using Underscore productively. He plays a bit of catchup for the functional programming newbie, but then dives into the denser more theoretical concepts.\\n\\n**Follow along with Brian's slides: http://mrkn.co/5nvjz\",\"meta\":{\"duration\":\"PT36M31S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"m3svKOdZijA\",\"provider\":\"youtube\"},\"slug\":\"hey-underscore-youre-doing-it-wrong\",\"tag\":[\"brian lonsdorf\",\"html5\",\"html5devconf\",\"san francisco\",\"Underscore\",\"Underscore.js\",\"functional programming\",\"marakana\",\"tips\",\"tricks\",\"use underscore.js productively\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/m3svKOdZijA/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Hey Underscore, You're Doing It Wrong!\"}}]}},\"pathContext\":{\"slug\":\"marakana\",\"tag\":\"marakana\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tag-marakana-908d14edbbea4b16d4ca.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"In this video tutorial, Dan Rosen will show you how to use Scala's capacity for monadic design to eliminate repetitive boilerplate in your code.  You'll learn to recognize places where the perpetual clutter of null checks, try-catch blocks and more can be hidden within a monad, to make your code's logic stand out clearly.\\r\\n\\r\\n** Head to http://marakana.com for more open source educational resources\",\"meta\":{\"duration\":\"PT31M22S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"Mw_Jnn_Y5iA\",\"provider\":\"youtube\"},\"slug\":\"scala-monads-declutter-your-code-with-monadic-design\",\"tag\":[\"scala\",\"monad\",\"monadic\",\"design patterns\",\"monadic design\",\"dan rosen\",\"marakana\",\"techtv\",\"Code\",\"Demo\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/Mw_Jnn_Y5iA/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Scala Monads: Declutter Your Code With Monadic Design\"}},{\"node\":{\"description\":\"Java is no longer alone on the JVM. It now has to share space with its younger siblings JRuby, Jython, Groovy, Clojure, Scala and many others. Each new language has its own set of advantages and disadvantages compared to Java, and its own niche in which it performs best, but Scala in particular is gaining momentum.\\n\\nIn this presentation to San Francisco Java User Group on January 18, 2012, Marakana's own Dan Rosen introduces Scala to Java developers and shows off some of its expressive power -- higher-order functions, type inference, and pattern matching -- by building a simple web service. You'll never look at Java the same way.\\n\\nSlides from this presentation available here http://bit.ly/ztgVxa\",\"meta\":{\"duration\":\"PT1H32M35S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"PKc5IwHG68k\",\"provider\":\"youtube\"},\"slug\":\"scala-versus-java\",\"tag\":[\"scala\",\"java\",\"marakana\",\"techtv\",\"typesafe\",\"dan rosen\",\"sbt\",\"jdk\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/PKc5IwHG68k/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Scala Versus Java\"}},{\"node\":{\"description\":\"Blake Matheny approaches his talk at NEScala with a collection of trial-and-error experiences he's acquired as the VP of Engineering at Tumblr (who for the past year and half has adopted Scala as their primary backend development language). Blake draws on actual code used at Tumblr, describes their implications in a server context, and shows us where things have gone wrong and how they were corrected.\\n \\nThis talk will be most pertinent to engineers who build backend service applications, but should be of interest to anyone looking to find additional methods for troubleshooting code in Scala.\\n\\n** Visit our site for more content on Scala, including the rest of the presentations from NE Scala 2013: http://marakana.com/s/tags/scala\",\"meta\":{\"duration\":\"PT29M53S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"dCEZDlH1ygo\",\"provider\":\"youtube\"},\"slug\":\"concurrency-anti-patterns-in-scala\",\"tag\":[\"scala\",\"blake matheny\",\"tumblr\",\"nescala\",\"marakana\",\"techtv\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/dCEZDlH1ygo/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Concurrency Anti-patterns in Scala\"}},{\"node\":{\"description\":\"Callback Hell is a very real place. At least, according to Michael Jackson, co-founder of HUM, it is. But stay calm! In this presentation, Michael and his co-presenter\\nDomenic Denicola, Software Engineer at Lab49, will walk you through all the steps required to avoid this dark and mysterious place.\\n\\nInstead of simply throwing together a clunky example, and a solution to a very specific case, Michael and Domenic dive deeper into more conceptual problems. How did we get to \\\"callback hell\\\" and what can we do it avoid it next time? This helpful demonstration covers handy tips about Promises and strategies for building fully asynchronous APIs in JavaScript.\\n\\n**Follow along with Michael and Domenic's slides: http://mrkn.co/lb0t1\",\"meta\":{\"duration\":\"PT50M25S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"hf1T_AONQJU\",\"provider\":\"youtube\"},\"slug\":\"redemption-from-callback-hell\",\"tag\":[\"callback\",\"callback hell\",\"marakana\",\"techtv\",\"html5\",\"html5devconf\",\"michael jackson\",\"michael jackson develoepr\",\"domenic denicola\",\"HUM\",\"Lab49\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/hf1T_AONQJU/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Redemption from Callback Hell\"}},{\"node\":{\"description\":\"Brian Lonsdorf has a love-hate relationship with Underscore.js. Yes, it offers a bunch of tools included in today's functional programming paradigm (like map, filter, reduce, take, drop, compose, etc.), but in Underscore the functions are sometimes verbose and unintuitive. It claims to be a functional programming language, but how true is that?\\n\\nDespite certain characteristics, Brian offers some solutions for using Underscore productively. He plays a bit of catchup for the functional programming newbie, but then dives into the denser more theoretical concepts.\\n\\n**Follow along with Brian's slides: http://mrkn.co/5nvjz\",\"meta\":{\"duration\":\"PT36M31S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"m3svKOdZijA\",\"provider\":\"youtube\"},\"slug\":\"hey-underscore-youre-doing-it-wrong\",\"tag\":[\"brian lonsdorf\",\"html5\",\"html5devconf\",\"san francisco\",\"Underscore\",\"Underscore.js\",\"functional programming\",\"marakana\",\"tips\",\"tricks\",\"use underscore.js productively\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/m3svKOdZijA/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Hey Underscore, You're Doing It Wrong!\"}}]}},\"pathContext\":{\"slug\":\"marakana\",\"tag\":\"marakana\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tag-marakana.json\n// module id = 2463\n// module chunks = 169180343719111"],"sourceRoot":""}