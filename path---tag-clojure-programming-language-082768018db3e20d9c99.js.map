{"version":3,"sources":["webpack:///path---tag-clojure-programming-language-082768018db3e20d9c99.js","webpack:///./.cache/json/tag-clojure-programming-language.json"],"names":["webpackJsonp","2102","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,4hBAAAC,MAAkjBC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,yDAAAC,KAAA,gEAAAC,YAAsJC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,8DAAyEhB,MAAQC,YAAA,8gDAAAC,MAAoiDC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,mEAAAC,KAAA,kCAAAC,YAAkIC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,yEAAoFhB,MAAQC,YAAA,g4BAAAC,MAAu5BC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,gDAAAC,KAAA,kCAAAC,YAA+GC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,uDAAiEC,aAAgBR,KAAA,+BAAAC,IAAA","file":"path---tag-clojure-programming-language-082768018db3e20d9c99.js","sourcesContent":["webpackJsonp([112157617048792],{\n\n/***/ 2102:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Typed Clojure is an optional type system for Clojure. Typed Clojure is being used in production systems to help programmers verify, document and design correct Clojure code.\\nIn this talk, we introduce the goals of Typed Clojure and discuss how effectively Typed Clojure works in practice.\\nWe give an overview of the kinds of problems being solved today with Typed Clojure, and where your Clojure projects might benefit from a type system like it.\\n\\nby Ambrose Bonnaire-Sergeant (@ambrosebs)\\n\\nAmbrose is the creator of Typed Clojure.\",\"meta\":{\"duration\":\"PT41M58S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"a0gT0syAXsY\",\"provider\":\"youtube\"},\"slug\":\"typed-clojure-in-practice-by-ambrose-bonnaire-sergeant\",\"tag\":[\"Clojure (Programming Language)\",\"Typed Clojure\",\"Type System\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/a0gT0syAXsY/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"\\\"Typed Clojure in Practice\\\" by Ambrose Bonnaire Sergeant\"}},{\"node\":{\"description\":\"Clojure revolves around immutable values and manipulation of those values. However, it does not provide good mechanisms for manipulating combinations of those values: like a map of sequences of maps of maps. Code that aims to manipulate these nested data structures complects navigation code with the desired query or transformation. Code like this is painful to write and ugly to read.\\n\\nSpecter is a library that makes querying and transformation of nested data structures simple, easy, and efficient. At its core it abstracts away the concept of data structure navigation and makes these navigations highly composable. Specter can manipulate any of Clojure's maps, sequences, records, and sets, and by hooking into Specter's protocols you can use it to manipulate any data structure. On top of all this, Specter is highly performant: for example, Specter's equivalent to update-in runs 5x faster. Once you've used Specter, it's hard to imagine programming Clojure without it.\\n\\nNathan Marz\\nRED PLANET LABS, INC.\\n@nathanmarz\\n\\nNathan is the creator of the open source projects Apache Storm and Cascalog. He is the author of the book \\\"Big Data: principles and best practices of scalable realtime data systems\\\". He was the lead engineer of BackType until BackType was acquired by Twitter. At Twitter, he created the streaming compute team, a core infrastructure team within the company. He left Twitter in 2013 to work on a new startup. When not coding, you can often find him 3500 feet overhead, flying a small plane and enjoying the view.\",\"meta\":{\"duration\":\"PT41M51S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"mXZxkpX5nt8\",\"provider\":\"youtube\"},\"slug\":\"specter-overcome-your-fear-of-nested-clojure-data-by-nathan-marz\",\"tag\":[\"Clojure (Programming Language)\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/mXZxkpX5nt8/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"\\\"Specter: overcome your fear of nested Clojure data\\\" by Nathan Marz\"}},{\"node\":{\"description\":\"ClojureScript is a compiler for the Clojure programming language that targets Javascript. One of ClojureScript's goals is to provide features that Javascript lacks. Some of these features are macros, concurrent programming and persistent data structures. With the release of ES6 and other Javascript advancements, one might ask \\\"is ClojureScript still relevant?\\\".\\n\\nIn this talk, we will discuss how ClojureScript stacks up against ES6. Code examples in Javascript and ClojureScript will be demonstrated. At the end of the talk, an attendee will have enough information to make an informed decision about using ClojureScript.\\n\\nJearvon Dharrie\\nCOMCAST\\n@jearvon\\n\\nJearvon Dharrie is a software engineer at Comcast. Jearvon spends his day working with Ruby, and the JVM. In his free time he enjoys toying with programming languages. He is currently interested in Clojure and ClojureScript.\",\"meta\":{\"duration\":\"PT36M17S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"pX6tUpgktxo\",\"provider\":\"youtube\"},\"slug\":\"relevance-of-clojurescript-by-jearvon-dharrie\",\"tag\":[\"Clojure (Programming Language)\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/pX6tUpgktxo/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"\\\"Relevance of ClojureScript\\\" by Jearvon Dharrie\"}}]}},\"pathContext\":{\"slug\":\"clojure-programming-language\",\"tag\":\"Clojure (Programming Language)\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tag-clojure-programming-language-082768018db3e20d9c99.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Typed Clojure is an optional type system for Clojure. Typed Clojure is being used in production systems to help programmers verify, document and design correct Clojure code.\\nIn this talk, we introduce the goals of Typed Clojure and discuss how effectively Typed Clojure works in practice.\\nWe give an overview of the kinds of problems being solved today with Typed Clojure, and where your Clojure projects might benefit from a type system like it.\\n\\nby Ambrose Bonnaire-Sergeant (@ambrosebs)\\n\\nAmbrose is the creator of Typed Clojure.\",\"meta\":{\"duration\":\"PT41M58S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"a0gT0syAXsY\",\"provider\":\"youtube\"},\"slug\":\"typed-clojure-in-practice-by-ambrose-bonnaire-sergeant\",\"tag\":[\"Clojure (Programming Language)\",\"Typed Clojure\",\"Type System\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/a0gT0syAXsY/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"\\\"Typed Clojure in Practice\\\" by Ambrose Bonnaire Sergeant\"}},{\"node\":{\"description\":\"Clojure revolves around immutable values and manipulation of those values. However, it does not provide good mechanisms for manipulating combinations of those values: like a map of sequences of maps of maps. Code that aims to manipulate these nested data structures complects navigation code with the desired query or transformation. Code like this is painful to write and ugly to read.\\n\\nSpecter is a library that makes querying and transformation of nested data structures simple, easy, and efficient. At its core it abstracts away the concept of data structure navigation and makes these navigations highly composable. Specter can manipulate any of Clojure's maps, sequences, records, and sets, and by hooking into Specter's protocols you can use it to manipulate any data structure. On top of all this, Specter is highly performant: for example, Specter's equivalent to update-in runs 5x faster. Once you've used Specter, it's hard to imagine programming Clojure without it.\\n\\nNathan Marz\\nRED PLANET LABS, INC.\\n@nathanmarz\\n\\nNathan is the creator of the open source projects Apache Storm and Cascalog. He is the author of the book \\\"Big Data: principles and best practices of scalable realtime data systems\\\". He was the lead engineer of BackType until BackType was acquired by Twitter. At Twitter, he created the streaming compute team, a core infrastructure team within the company. He left Twitter in 2013 to work on a new startup. When not coding, you can often find him 3500 feet overhead, flying a small plane and enjoying the view.\",\"meta\":{\"duration\":\"PT41M51S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"mXZxkpX5nt8\",\"provider\":\"youtube\"},\"slug\":\"specter-overcome-your-fear-of-nested-clojure-data-by-nathan-marz\",\"tag\":[\"Clojure (Programming Language)\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/mXZxkpX5nt8/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"\\\"Specter: overcome your fear of nested Clojure data\\\" by Nathan Marz\"}},{\"node\":{\"description\":\"ClojureScript is a compiler for the Clojure programming language that targets Javascript. One of ClojureScript's goals is to provide features that Javascript lacks. Some of these features are macros, concurrent programming and persistent data structures. With the release of ES6 and other Javascript advancements, one might ask \\\"is ClojureScript still relevant?\\\".\\n\\nIn this talk, we will discuss how ClojureScript stacks up against ES6. Code examples in Javascript and ClojureScript will be demonstrated. At the end of the talk, an attendee will have enough information to make an informed decision about using ClojureScript.\\n\\nJearvon Dharrie\\nCOMCAST\\n@jearvon\\n\\nJearvon Dharrie is a software engineer at Comcast. Jearvon spends his day working with Ruby, and the JVM. In his free time he enjoys toying with programming languages. He is currently interested in Clojure and ClojureScript.\",\"meta\":{\"duration\":\"PT36M17S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"pX6tUpgktxo\",\"provider\":\"youtube\"},\"slug\":\"relevance-of-clojurescript-by-jearvon-dharrie\",\"tag\":[\"Clojure (Programming Language)\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/pX6tUpgktxo/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"\\\"Relevance of ClojureScript\\\" by Jearvon Dharrie\"}}]}},\"pathContext\":{\"slug\":\"clojure-programming-language\",\"tag\":\"Clojure (Programming Language)\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tag-clojure-programming-language.json\n// module id = 2102\n// module chunks = 112157617048792"],"sourceRoot":""}