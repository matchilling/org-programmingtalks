{"version":3,"sources":["webpack:///path---tag-optimization-816fb615325a284d4e5f.js","webpack:///./.cache/json/tag-optimization.json"],"names":["webpackJsonp","2571","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,ysBAAAC,MAA+tBC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,mFAAAC,KAAA,2JAAAC,YAA2QC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,uFAAgGhB,MAAQC,YAAA,0mBAAAC,MAAgoBC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,sDAAAC,KAAA,sLAAAC,YAAyQC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,8DAAyEhB,MAAQC,YAAA,srCAAAC,MAA4sCC,SAAA,WAAqBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,uBAAAC,KAAA,oHAAAC,YAAwKC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,4BAAoCC,aAAgBR,KAAA,eAAAC,IAAA","file":"path---tag-optimization-816fb615325a284d4e5f.js","sourcesContent":["webpackJsonp([18930039597037],{\n\n/***/ 2571:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Higgs, a JIT compiler for JavaScript written in D, was presented at DConf 2013. Basic block versioning, a novel optimization technique in early stages of testing at the time, was also introduced. Experimental results demonstratring how basic block versioning fares on multiple metrics across a variety of benchmarks can now be shown. We discuss how we have interpreted these results to inform further development of Higgs and introduce a JIT compiler architecture based on the idea of lazy/incremental compilation and inlining. We also explore how D has influenced the development of Higgs and take a more in-depth look at how various D features such as templates and CTFE are used in the Higgs implementation.\",\"meta\":{\"duration\":\"PT43M57S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"FGgFMZhnXvU\",\"provider\":\"youtube\"},\"slug\":\"dconf-2014-day-2-talk-2-refactoring-jit-compilation-by-maxime-chevalier-boisvert\",\"tag\":[\"Compiler (Software Genre)\",\"Just In Time\",\"optimization\",\"javascript\",\"compilation\",\"jit\",\"dconf\",\"higgs\",\"conference\",\"talk\",\"Just-in-time Compilation\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/FGgFMZhnXvU/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"DConf 2014 Day 2 Talk 2: Refactoring JIT Compilation by Maxime Chevalier-Boisvert\"}},{\"node\":{\"description\":\"Fluent 2014, \\\"Keynote With Paul Irish\\\".\\n\\nAbout Paul Irish (Google):\\nPaul Irish is a front-end developer who loves the web. He is on Google Chrome's Developer Relations team as well as jQuery's.\\n\\nHe develops the HTML5 Boilerplate, the HTML5/CSS3 feature detection library Modernizr, HTML5 Please, CSS3 Please, and other bits and bobs of open source code.\\n\\nDon't miss an upload! Subscribe! http://goo.gl/szEauh\\nStay Connected to O'Reilly Media by Email - http://goo.gl/YZSWbO\\n\\nFollow O'Reilly Media:\\nhttp://plus.google.com/+oreillymedia\\nhttps://www.facebook.com/OReilly\\nhttps://twitter.com/OReillyMedia\",\"meta\":{\"duration\":\"PT23M25S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"R8W_6xWphtw\",\"provider\":\"youtube\"},\"slug\":\"paul-irish-delivering-the-goods-fluent-2014-keynote\",\"tag\":[\"Paul Irish\",\"fluent 2014\",\"fluentconf\",\"fluentcon\",\"fluent conference\",\"optimization\",\"Engineering (Industry)\",\"O'Reilly\",\"O'Reilly Media\",\"OReilly\",\"OReilly Media\",\"OReillyMedia\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/R8W_6xWphtw/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Paul Irish, \\\"Delivering the goods\\\" - Fluent 2014 Keynote\"}},{\"node\":{\"description\":\"Compilers are caught in a tug-of-war between increasingly exotic architectures and instruction set extensions on one hand, and our desire for advanced programming languages and PL features on the other. A multi-language, multi-target compiler infrastructure such as LLVM ameliorates the situation somewhat, but engineering fast, effective and correct optimizations for LLVM is challenging. Even after a decade of intense development, there is a long tail of unimplemented optimizations.\\n\\nUniversity of Utah Associate Professor John Regehr presents Souper, a superoptimizer that gives us a look at some of the optimizations that are missing from LLVM while also avoiding the bugs that are often found in hand-written optimization passes. Souper works by turning LLVM code into queries for an automated theorem prover. When Souper is run on LLVM itself, it identifies thousands of uncaught optimizations and also ranks them according to the likely improvement in code size or code speed that would result from implementing each one.\\n\\nJohn Regehr, Associate Professor, School of Computing, University of Utah\\n\\n12/2/2014\\n\\nhttps://www.cs.washington.edu/htbin-post/mvis/mvis?ID=2643\\n\\nhttp://uwtv.org\",\"meta\":{\"duration\":\"PT49M7S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"Ux0YnVEaI6A\",\"provider\":\"youtube\"},\"slug\":\"superoptimizing-llvm\",\"tag\":[\"UW\",\"University of Washington\",\"Engineering and Computer Science\",\"optimization\",\"superoptimizer\",\"LLVM\",\"Souper\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/Ux0YnVEaI6A/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Superoptimizing LLVM\"}}]}},\"pathContext\":{\"slug\":\"optimization\",\"tag\":\"optimization\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tag-optimization-816fb615325a284d4e5f.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Higgs, a JIT compiler for JavaScript written in D, was presented at DConf 2013. Basic block versioning, a novel optimization technique in early stages of testing at the time, was also introduced. Experimental results demonstratring how basic block versioning fares on multiple metrics across a variety of benchmarks can now be shown. We discuss how we have interpreted these results to inform further development of Higgs and introduce a JIT compiler architecture based on the idea of lazy/incremental compilation and inlining. We also explore how D has influenced the development of Higgs and take a more in-depth look at how various D features such as templates and CTFE are used in the Higgs implementation.\",\"meta\":{\"duration\":\"PT43M57S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"FGgFMZhnXvU\",\"provider\":\"youtube\"},\"slug\":\"dconf-2014-day-2-talk-2-refactoring-jit-compilation-by-maxime-chevalier-boisvert\",\"tag\":[\"Compiler (Software Genre)\",\"Just In Time\",\"optimization\",\"javascript\",\"compilation\",\"jit\",\"dconf\",\"higgs\",\"conference\",\"talk\",\"Just-in-time Compilation\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/FGgFMZhnXvU/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"DConf 2014 Day 2 Talk 2: Refactoring JIT Compilation by Maxime Chevalier-Boisvert\"}},{\"node\":{\"description\":\"Fluent 2014, \\\"Keynote With Paul Irish\\\".\\n\\nAbout Paul Irish (Google):\\nPaul Irish is a front-end developer who loves the web. He is on Google Chrome's Developer Relations team as well as jQuery's.\\n\\nHe develops the HTML5 Boilerplate, the HTML5/CSS3 feature detection library Modernizr, HTML5 Please, CSS3 Please, and other bits and bobs of open source code.\\n\\nDon't miss an upload! Subscribe! http://goo.gl/szEauh\\nStay Connected to O'Reilly Media by Email - http://goo.gl/YZSWbO\\n\\nFollow O'Reilly Media:\\nhttp://plus.google.com/+oreillymedia\\nhttps://www.facebook.com/OReilly\\nhttps://twitter.com/OReillyMedia\",\"meta\":{\"duration\":\"PT23M25S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"R8W_6xWphtw\",\"provider\":\"youtube\"},\"slug\":\"paul-irish-delivering-the-goods-fluent-2014-keynote\",\"tag\":[\"Paul Irish\",\"fluent 2014\",\"fluentconf\",\"fluentcon\",\"fluent conference\",\"optimization\",\"Engineering (Industry)\",\"O'Reilly\",\"O'Reilly Media\",\"OReilly\",\"OReilly Media\",\"OReillyMedia\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/R8W_6xWphtw/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Paul Irish, \\\"Delivering the goods\\\" - Fluent 2014 Keynote\"}},{\"node\":{\"description\":\"Compilers are caught in a tug-of-war between increasingly exotic architectures and instruction set extensions on one hand, and our desire for advanced programming languages and PL features on the other. A multi-language, multi-target compiler infrastructure such as LLVM ameliorates the situation somewhat, but engineering fast, effective and correct optimizations for LLVM is challenging. Even after a decade of intense development, there is a long tail of unimplemented optimizations.\\n\\nUniversity of Utah Associate Professor John Regehr presents Souper, a superoptimizer that gives us a look at some of the optimizations that are missing from LLVM while also avoiding the bugs that are often found in hand-written optimization passes. Souper works by turning LLVM code into queries for an automated theorem prover. When Souper is run on LLVM itself, it identifies thousands of uncaught optimizations and also ranks them according to the likely improvement in code size or code speed that would result from implementing each one.\\n\\nJohn Regehr, Associate Professor, School of Computing, University of Utah\\n\\n12/2/2014\\n\\nhttps://www.cs.washington.edu/htbin-post/mvis/mvis?ID=2643\\n\\nhttp://uwtv.org\",\"meta\":{\"duration\":\"PT49M7S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"Ux0YnVEaI6A\",\"provider\":\"youtube\"},\"slug\":\"superoptimizing-llvm\",\"tag\":[\"UW\",\"University of Washington\",\"Engineering and Computer Science\",\"optimization\",\"superoptimizer\",\"LLVM\",\"Souper\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/Ux0YnVEaI6A/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Superoptimizing LLVM\"}}]}},\"pathContext\":{\"slug\":\"optimization\",\"tag\":\"optimization\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tag-optimization.json\n// module id = 2571\n// module chunks = 18930039597037"],"sourceRoot":""}