{"version":3,"sources":["webpack:///path---talk-one-hacker-way-49fb6a25b3d85b7aec20.js","webpack:///./.cache/json/talk-one-hacker-way.json"],"names":["webpackJsonp","3092","module","exports","data","talkJson","description","meta","duration","presenter","name","slug","source","id","provider","tag","title","allTalkJson","edges","node","thumbnails","default","url","height","width","pathContext","tags"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,UAAYC,YAAA,ymBAAAC,MAA+nBC,SAAA,YAAsBC,WAAcC,KAAA,eAAqBC,KAAA,iBAAAC,QAAmCC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,uCAAAC,MAAA,kBAAwEC,aAAgBC,QAAUC,MAAQb,YAAA,ubAAAC,MAA6cC,SAAA,YAAsBC,WAAcC,KAAA,eAAqBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,sBAAAI,KAAA,0BAAAK,YAA6EC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,yBAAkCG,MAAQb,YAAA,+/CAAAC,MAAwhDC,SAAA,cAAwBC,WAAcC,KAAA,qBAA2BE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,2BAAAI,KAAA,+BAAAK,YAAuFC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,kCAA2CG,MAAQb,YAAA,6dAAAC,MAAqfC,SAAA,WAAqBC,WAAcC,KAAA,cAAoBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,gCAAAI,KAAA,mCAAAK,YAAgGC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,oCAA6CG,MAAQb,YAAA,+GAAAC,MAAqIC,SAAA,cAAwBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,uFAAAI,KAAA,0JAAAK,YAA8QC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,gGAAyGG,MAAQb,YAAA,ytBAAAC,MAA+uBC,SAAA,YAAsBC,WAAcC,KAAA,eAAqBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,wCAAAI,KAAA,wBAAAK,YAA6FC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,4CAAqDG,MAAQb,YAAA,wgCAAAC,MAA8hCC,SAAA,YAAsBC,WAAcC,KAAA,iBAAuBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,qBAAAI,KAAA,sFAAAK,YAAwIC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,wBAAiCG,MAAQb,YAAA,gJAAAC,MAAwKC,SAAA,YAAsBC,WAAcC,KAAA,gBAAsBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,mDAAAI,KAAA,0DAAAK,YAA0IC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,2BAAsCG,MAAQb,YAAA,w+BAAAC,MAA8/BC,SAAA,aAAuBC,WAAcC,KAAA,YAAkBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,sCAAAI,KAAA,oCAAAK,YAAuGC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,2CAAoDG,MAAQb,YAAA,kfAAAC,MAAwgBC,SAAA,aAAuBC,WAAcC,KAAA,gBAAsBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,qBAAAI,KAAA,qDAAAK,YAAuGC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,wBAAiCG,MAAQb,YAAA,yrBAAAC,MAA+sBC,SAAA,WAAqBC,WAAcC,KAAA,iBAAuBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,iDAAAI,KAAA,uCAAAK,YAAqHC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,sDAA8DS,aAAgBd,KAAA,iBAAAe,MAAA","file":"path---talk-one-hacker-way-49fb6a25b3d85b7aec20.js","sourcesContent":["webpackJsonp([195977817496960],{\n\n/***/ 3092:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"talkJson\":{\"description\":\"This presentation was recorded at GOTO Copenhagen 2015\\nhttp://gotocph.com\\n\\nErik Meijer - Founder at Applied Duality, Inc.\\n\\nABSTRACT\\nErik challenges the basic ideas on Scrum & Agile and how developers should be developing code for the future. In the next decade every business will be digitized and effectively become a software company. Leveraging software, and, in general, computational [...]\\nDownload slides and read the full abstract here:\\nhttp://gotocon.com/cph-2015/presentation/Keynote:%20One%20Hacker%20Way\\n\\nhttps://twitter.com/gotocph\\nhttps://www.facebook.com/GOTOConference\\nhttp://gotocon.com\",\"meta\":{\"duration\":\"PT55M37S\"},\"presenter\":{\"name\":\"Erik Meijer\"},\"slug\":\"one-hacker-way\",\"source\":{\"id\":\"FvMuPtuvP5w\",\"provider\":\"youtube\"},\"tag\":[\"GOTO 2015\",\"Keynote\",\"Scrum\",\"Agile\"],\"title\":\"One Hacker Way\"},\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"In this keynote speech from JaxConf 2012, Rich Hickey, creator of Clojure and founder of Datomic gives an awesome analysis of the changing way we think about values (not the philosphoical kind) in light of the increasing complexity of information technology and the advent of Big Data. The broad subject of the talk makes it worth watching for almost anyone in the programming world, and was one of the highlights of the JaxConf lineup.\",\"meta\":{\"duration\":\"PT31M44S\"},\"presenter\":{\"name\":\"Rich Hickey\"},\"source\":{\"id\":\"-6BsiVyC1kM\",\"provider\":\"youtube\"},\"slug\":\"the-value-of-values\",\"tag\":[\"JaxConf 2012\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/-6BsiVyC1kM/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"The Value of Values\"}},{\"node\":{\"description\":\"We know how to write bad code: litter our programs with casts, macros, pointers, naked new and deletes, and complicated control structures. Alternatively (or additionally), we could obscure every design decision in a mess of deeply nested abstractions using the latest object-oriented programming and generic programming tricks. Then, for good measure, we might complicate our algorithms with interesting special cases. Such code is incomprehensible, unmaintainable, usually inefficient, and not uncommon.\\n\\nBut how do we write good code? What principles, techniques, and idioms can we exploit to make it easier to produce quality code? In this presentation, I make an argument for type-rich interfaces, compact data structures, integrated resource management and error handling, and highly-structured algorithmic code. I illustrate my ideas and guidelines with a few idiomatic code examples.\\n\\nI use C++11 freely. Examples include auto, general constant expressions, uniform initialization, type aliases, type safe threading, and user-defined literals. C++11 features are only just starting to appear in production compilers, so some of my suggestions are conjecture. Developing a \\\"modern style,\\\" however, is essential if we don't want to maintain newly-written 1970s and 1980s style code in 2020.\\n\\nThis presentation reflects my thoughts on what \\\"Modern C++\\\" should mean in the 2010s: a language for programming based on light-weight abstraction with direct and efficient mapping to hardware, suitable for infrastructure code.\",\"meta\":{\"duration\":\"PT1H29M48S\"},\"presenter\":{\"name\":\"Bjarne Stroustrup\"},\"source\":{\"id\":\"0iWb_qi2-uI\",\"provider\":\"youtube\"},\"slug\":\"keynote-goingnative-2012\",\"tag\":[\"C++\",\"GoingNative\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/0iWb_qi2-uI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Keynote GoingNative 2012 C++\"}},{\"node\":{\"description\":\"There are now several frameworks designed to address the demand for \\\"big agile.\\\"\\n\\nIn this talk Jez will explain the flaws in such frameworks, why they so often fail to produce the desired effects, and what we should do instead. He will also address some common organizational obstacles to moving fast at scale: governance, budgeting, and the project paradigm - and discuss how to address them. Warning: this talk will include liberal use of real, statistically sound data.\",\"meta\":{\"duration\":\"PT51M2S\"},\"presenter\":{\"name\":\"Jez Humble\"},\"source\":{\"id\":\"2zYxWEZ0gYg\",\"provider\":\"youtube\"},\"slug\":\"why-scaling-agile-doesnt-work\",\"tag\":[\"GOTO Conference\",\"Agile\",\"Scrum\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/2zYxWEZ0gYg/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Why Scaling Agile Doesn't Work\"}},{\"node\":{\"description\":\"Hartmut Kaisers Keynote from Meeting C++ 2014\\n\\nSlides:\\nhttp://meetingcpp.com/index.php/tv14/items/26.html\",\"meta\":{\"duration\":\"PT1H27M36S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"4OCUEgSNIAY\",\"provider\":\"youtube\"},\"slug\":\"plain-threads-are-the-goto-of-todays-computing-hartmut-kaiser-keynote-meeting-c-2014\",\"tag\":[\"Software (Industry)\",\"C (Programming Language)\",\"C++\",\"Meeting C++\",\"Keynote\",\"Parallelism\",\"Concurrency\",\"Threading\",\"Thread\",\"HPX\",\"Meeting C++ 2014\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/4OCUEgSNIAY/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Plain Threads are the GOTO of todays computing - Hartmut Kaiser - Keynote Meeting C++ 2014\"}},{\"node\":{\"description\":\"Mob Programming is a development practice where the whole team works on the same thing, at the same time, in the same space, and on the same computer. It is a whole-team approach to doing all the work the team does including designing, coding, testing, and working with the customers, users and other stakeholders. This is an evolutionary step beyond pair programming, and accentuates face-to-face communication, team alignment, collaboration, and self-organizing team concepts of the Agile approach to software development. Mob Programming can be a highly effective approach to software development. Please join me as I share how the concept got started, the benefits, techniques we use, and some of the problems we've faced.\",\"meta\":{\"duration\":\"PT50M25S\"},\"presenter\":{\"name\":\"Woody Zuill\"},\"source\":{\"id\":\"8cy64qkgTyI\",\"provider\":\"youtube\"},\"slug\":\"mob-programming-a-whole-team-approach\",\"tag\":[\"Agile\",\"Productivity\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/8cy64qkgTyI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Mob Programming, A Whole Team Approach\"}},{\"node\":{\"description\":\"Systems get bigger, technologies reach further, practices mature, advice changes... or at least some of it does. Some guidance remains unaffected by the passing of paradigms, the evolution of technology or the scaling of development: break your software into small, cohesive parts defined by clear interfaces and sound implementations, all the while striving for simplicity. The excuses for not doing so are as predictable as they are problematic. But if you want to create legacy code, make sure code is arbitrarily partitioned into large, incoherent parts characterised by unwieldy interfaces and incomprehensible implementations.\\nWhile there are many definitions of what a legacy system is, common to almost all perceptions of a legacy system is the concept of size — specifically, lots of it. The phrase 'small legacy system' can be considered an oxymoron. This talk sets out to re-assess and reassert the importance of thinking and implementing small as an essential property of software systems — yes, even the large ones.\",\"meta\":{\"duration\":\"PT1H7M3S\"},\"presenter\":{\"name\":\"Kevlin Henney\"},\"source\":{\"id\":\"B3b4tremI5o\",\"provider\":\"youtube\"},\"slug\":\"small-is-beautiful\",\"tag\":[\"GOTO Conference\",\"Keynote\",\"GOTO Copenhagen\",\"Scaling\",\"Legacy System\",\"Simplicity\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/B3b4tremI5o/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Small Is Beautiful\"}},{\"node\":{\"description\":\"Aaron Swartz keynote - \\\"How we stopped SOPA\\\"  at F2C:Freedom to Connect 2012, Washington DC on May 21 2012.\\n\\nhttp://freedom-to-connect.net/\",\"meta\":{\"duration\":\"PT22M52S\"},\"presenter\":{\"name\":\"Aaron Swartz\"},\"source\":{\"id\":\"Fgh2dFngFsg\",\"provider\":\"youtube\"},\"slug\":\"f2c2012-aaron-swartz-keynote-how-we-stopped-sopa\",\"tag\":[\"SOPA\",\"freedom to connect\",\"internet freedom\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/Fgh2dFngFsg/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"\\\"How we stopped SOPA\\\"\"}},{\"node\":{\"description\":\"Our increasingly complex needs have led us to build increasing complex software. We’ve done this in an incremental fashion, building code on top of code. We write understandable snippets of code built on programming languages we know well and then bundle them into program structures to perform complex tasks. This incremental process may seem to have low risk at the snippet level, but it leads to program structures that can be hundreds of millions of lines of code that is intractable to change, redesign, and understanding, nor in the end is it easy to design. It also leads to code with potentially unwanted emergent properties. Today, we know how to create programs that can create programming languages. So why not write software that closely follows the problem, without a programming language, then let other programs create the programming language to support it? If we apply this rethinking to the design process, both problems and solutions can be thought of in terms of relational str\",\"meta\":{\"duration\":\"PT1H7M19S\"},\"presenter\":{\"name\":\"Alan Kay\"},\"source\":{\"id\":\"QboI_1WJUlM\",\"provider\":\"youtube\"},\"slug\":\"rethinking-design-risk-and-software\",\"tag\":[\"Inspiring\",\"Keynote\",\"COFES 2012\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/QboI_1WJUlM/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Rethinking Design, Risk, and Software\"}},{\"node\":{\"description\":\"In the 45+ years since Scott Meyers wrote his first program, he’s played many roles: programmer, user, educator, researcher, consultant. Different roles beget different perspectives on software development, and so many perspectives over so much time have led Scott to strong views about the things that really matter. In this presentation, he’ll share what he believes is especially important in software and software development, and he’ll try to convince you to embrace the same ideas he does.\",\"meta\":{\"duration\":\"PT1H6M37S\"},\"presenter\":{\"name\":\"Scott Meyers\"},\"source\":{\"id\":\"RT46MpK39rQ\",\"provider\":\"youtube\"},\"slug\":\"things-that-matter\",\"tag\":[\"DConf 2017\",\"Software Development\",\"Keynote\",\"C++\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/RT46MpK39rQ/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Things that Matter\"}},{\"node\":{\"description\":\"Towards the end of last year I attended a workshop with my colleagues in ThoughtWorks to discuss the nature of “event-driven” applications. Over the last few years we've been building lots of systems that make a lot of use of events, and they've been often praised, and often damned. Our North American office organized a summit, and ThoughtWorks senior developers from all over the world showed up to share ideas.\\nThe biggest outcome of the summit was recognizing that when people talk about “events”, they actually mean some quite different things. So we spent a lot of time trying to tease out what some useful patterns might be. This note is a brief summary of the main ones we identified.\",\"meta\":{\"duration\":\"PT50M6S\"},\"presenter\":{\"name\":\"Martin Fowler\"},\"source\":{\"id\":\"STKCRSUsyP0\",\"provider\":\"youtube\"},\"slug\":\"the-many-meanings-of-event-driven-architecture\",\"tag\":[\"GOTO Conference\",\"Chicago\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/STKCRSUsyP0/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"The Many Meanings of Event-Driven Architecture\"}}]}},\"pathContext\":{\"slug\":\"one-hacker-way\",\"tags\":[\"GOTO 2015\",\"Keynote\",\"Scrum\",\"Agile\"]}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---talk-one-hacker-way-49fb6a25b3d85b7aec20.js","module.exports = {\"data\":{\"talkJson\":{\"description\":\"This presentation was recorded at GOTO Copenhagen 2015\\nhttp://gotocph.com\\n\\nErik Meijer - Founder at Applied Duality, Inc.\\n\\nABSTRACT\\nErik challenges the basic ideas on Scrum & Agile and how developers should be developing code for the future. In the next decade every business will be digitized and effectively become a software company. Leveraging software, and, in general, computational [...]\\nDownload slides and read the full abstract here:\\nhttp://gotocon.com/cph-2015/presentation/Keynote:%20One%20Hacker%20Way\\n\\nhttps://twitter.com/gotocph\\nhttps://www.facebook.com/GOTOConference\\nhttp://gotocon.com\",\"meta\":{\"duration\":\"PT55M37S\"},\"presenter\":{\"name\":\"Erik Meijer\"},\"slug\":\"one-hacker-way\",\"source\":{\"id\":\"FvMuPtuvP5w\",\"provider\":\"youtube\"},\"tag\":[\"GOTO 2015\",\"Keynote\",\"Scrum\",\"Agile\"],\"title\":\"One Hacker Way\"},\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"In this keynote speech from JaxConf 2012, Rich Hickey, creator of Clojure and founder of Datomic gives an awesome analysis of the changing way we think about values (not the philosphoical kind) in light of the increasing complexity of information technology and the advent of Big Data. The broad subject of the talk makes it worth watching for almost anyone in the programming world, and was one of the highlights of the JaxConf lineup.\",\"meta\":{\"duration\":\"PT31M44S\"},\"presenter\":{\"name\":\"Rich Hickey\"},\"source\":{\"id\":\"-6BsiVyC1kM\",\"provider\":\"youtube\"},\"slug\":\"the-value-of-values\",\"tag\":[\"JaxConf 2012\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/-6BsiVyC1kM/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"The Value of Values\"}},{\"node\":{\"description\":\"We know how to write bad code: litter our programs with casts, macros, pointers, naked new and deletes, and complicated control structures. Alternatively (or additionally), we could obscure every design decision in a mess of deeply nested abstractions using the latest object-oriented programming and generic programming tricks. Then, for good measure, we might complicate our algorithms with interesting special cases. Such code is incomprehensible, unmaintainable, usually inefficient, and not uncommon.\\n\\nBut how do we write good code? What principles, techniques, and idioms can we exploit to make it easier to produce quality code? In this presentation, I make an argument for type-rich interfaces, compact data structures, integrated resource management and error handling, and highly-structured algorithmic code. I illustrate my ideas and guidelines with a few idiomatic code examples.\\n\\nI use C++11 freely. Examples include auto, general constant expressions, uniform initialization, type aliases, type safe threading, and user-defined literals. C++11 features are only just starting to appear in production compilers, so some of my suggestions are conjecture. Developing a \\\"modern style,\\\" however, is essential if we don't want to maintain newly-written 1970s and 1980s style code in 2020.\\n\\nThis presentation reflects my thoughts on what \\\"Modern C++\\\" should mean in the 2010s: a language for programming based on light-weight abstraction with direct and efficient mapping to hardware, suitable for infrastructure code.\",\"meta\":{\"duration\":\"PT1H29M48S\"},\"presenter\":{\"name\":\"Bjarne Stroustrup\"},\"source\":{\"id\":\"0iWb_qi2-uI\",\"provider\":\"youtube\"},\"slug\":\"keynote-goingnative-2012\",\"tag\":[\"C++\",\"GoingNative\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/0iWb_qi2-uI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Keynote GoingNative 2012 C++\"}},{\"node\":{\"description\":\"There are now several frameworks designed to address the demand for \\\"big agile.\\\"\\n\\nIn this talk Jez will explain the flaws in such frameworks, why they so often fail to produce the desired effects, and what we should do instead. He will also address some common organizational obstacles to moving fast at scale: governance, budgeting, and the project paradigm - and discuss how to address them. Warning: this talk will include liberal use of real, statistically sound data.\",\"meta\":{\"duration\":\"PT51M2S\"},\"presenter\":{\"name\":\"Jez Humble\"},\"source\":{\"id\":\"2zYxWEZ0gYg\",\"provider\":\"youtube\"},\"slug\":\"why-scaling-agile-doesnt-work\",\"tag\":[\"GOTO Conference\",\"Agile\",\"Scrum\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/2zYxWEZ0gYg/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Why Scaling Agile Doesn't Work\"}},{\"node\":{\"description\":\"Hartmut Kaisers Keynote from Meeting C++ 2014\\n\\nSlides:\\nhttp://meetingcpp.com/index.php/tv14/items/26.html\",\"meta\":{\"duration\":\"PT1H27M36S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"4OCUEgSNIAY\",\"provider\":\"youtube\"},\"slug\":\"plain-threads-are-the-goto-of-todays-computing-hartmut-kaiser-keynote-meeting-c-2014\",\"tag\":[\"Software (Industry)\",\"C (Programming Language)\",\"C++\",\"Meeting C++\",\"Keynote\",\"Parallelism\",\"Concurrency\",\"Threading\",\"Thread\",\"HPX\",\"Meeting C++ 2014\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/4OCUEgSNIAY/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Plain Threads are the GOTO of todays computing - Hartmut Kaiser - Keynote Meeting C++ 2014\"}},{\"node\":{\"description\":\"Mob Programming is a development practice where the whole team works on the same thing, at the same time, in the same space, and on the same computer. It is a whole-team approach to doing all the work the team does including designing, coding, testing, and working with the customers, users and other stakeholders. This is an evolutionary step beyond pair programming, and accentuates face-to-face communication, team alignment, collaboration, and self-organizing team concepts of the Agile approach to software development. Mob Programming can be a highly effective approach to software development. Please join me as I share how the concept got started, the benefits, techniques we use, and some of the problems we've faced.\",\"meta\":{\"duration\":\"PT50M25S\"},\"presenter\":{\"name\":\"Woody Zuill\"},\"source\":{\"id\":\"8cy64qkgTyI\",\"provider\":\"youtube\"},\"slug\":\"mob-programming-a-whole-team-approach\",\"tag\":[\"Agile\",\"Productivity\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/8cy64qkgTyI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Mob Programming, A Whole Team Approach\"}},{\"node\":{\"description\":\"Systems get bigger, technologies reach further, practices mature, advice changes... or at least some of it does. Some guidance remains unaffected by the passing of paradigms, the evolution of technology or the scaling of development: break your software into small, cohesive parts defined by clear interfaces and sound implementations, all the while striving for simplicity. The excuses for not doing so are as predictable as they are problematic. But if you want to create legacy code, make sure code is arbitrarily partitioned into large, incoherent parts characterised by unwieldy interfaces and incomprehensible implementations.\\nWhile there are many definitions of what a legacy system is, common to almost all perceptions of a legacy system is the concept of size — specifically, lots of it. The phrase 'small legacy system' can be considered an oxymoron. This talk sets out to re-assess and reassert the importance of thinking and implementing small as an essential property of software systems — yes, even the large ones.\",\"meta\":{\"duration\":\"PT1H7M3S\"},\"presenter\":{\"name\":\"Kevlin Henney\"},\"source\":{\"id\":\"B3b4tremI5o\",\"provider\":\"youtube\"},\"slug\":\"small-is-beautiful\",\"tag\":[\"GOTO Conference\",\"Keynote\",\"GOTO Copenhagen\",\"Scaling\",\"Legacy System\",\"Simplicity\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/B3b4tremI5o/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Small Is Beautiful\"}},{\"node\":{\"description\":\"Aaron Swartz keynote - \\\"How we stopped SOPA\\\"  at F2C:Freedom to Connect 2012, Washington DC on May 21 2012.\\n\\nhttp://freedom-to-connect.net/\",\"meta\":{\"duration\":\"PT22M52S\"},\"presenter\":{\"name\":\"Aaron Swartz\"},\"source\":{\"id\":\"Fgh2dFngFsg\",\"provider\":\"youtube\"},\"slug\":\"f2c2012-aaron-swartz-keynote-how-we-stopped-sopa\",\"tag\":[\"SOPA\",\"freedom to connect\",\"internet freedom\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/Fgh2dFngFsg/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"\\\"How we stopped SOPA\\\"\"}},{\"node\":{\"description\":\"Our increasingly complex needs have led us to build increasing complex software. We’ve done this in an incremental fashion, building code on top of code. We write understandable snippets of code built on programming languages we know well and then bundle them into program structures to perform complex tasks. This incremental process may seem to have low risk at the snippet level, but it leads to program structures that can be hundreds of millions of lines of code that is intractable to change, redesign, and understanding, nor in the end is it easy to design. It also leads to code with potentially unwanted emergent properties. Today, we know how to create programs that can create programming languages. So why not write software that closely follows the problem, without a programming language, then let other programs create the programming language to support it? If we apply this rethinking to the design process, both problems and solutions can be thought of in terms of relational str\",\"meta\":{\"duration\":\"PT1H7M19S\"},\"presenter\":{\"name\":\"Alan Kay\"},\"source\":{\"id\":\"QboI_1WJUlM\",\"provider\":\"youtube\"},\"slug\":\"rethinking-design-risk-and-software\",\"tag\":[\"Inspiring\",\"Keynote\",\"COFES 2012\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/QboI_1WJUlM/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Rethinking Design, Risk, and Software\"}},{\"node\":{\"description\":\"In the 45+ years since Scott Meyers wrote his first program, he’s played many roles: programmer, user, educator, researcher, consultant. Different roles beget different perspectives on software development, and so many perspectives over so much time have led Scott to strong views about the things that really matter. In this presentation, he’ll share what he believes is especially important in software and software development, and he’ll try to convince you to embrace the same ideas he does.\",\"meta\":{\"duration\":\"PT1H6M37S\"},\"presenter\":{\"name\":\"Scott Meyers\"},\"source\":{\"id\":\"RT46MpK39rQ\",\"provider\":\"youtube\"},\"slug\":\"things-that-matter\",\"tag\":[\"DConf 2017\",\"Software Development\",\"Keynote\",\"C++\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/RT46MpK39rQ/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Things that Matter\"}},{\"node\":{\"description\":\"Towards the end of last year I attended a workshop with my colleagues in ThoughtWorks to discuss the nature of “event-driven” applications. Over the last few years we've been building lots of systems that make a lot of use of events, and they've been often praised, and often damned. Our North American office organized a summit, and ThoughtWorks senior developers from all over the world showed up to share ideas.\\nThe biggest outcome of the summit was recognizing that when people talk about “events”, they actually mean some quite different things. So we spent a lot of time trying to tease out what some useful patterns might be. This note is a brief summary of the main ones we identified.\",\"meta\":{\"duration\":\"PT50M6S\"},\"presenter\":{\"name\":\"Martin Fowler\"},\"source\":{\"id\":\"STKCRSUsyP0\",\"provider\":\"youtube\"},\"slug\":\"the-many-meanings-of-event-driven-architecture\",\"tag\":[\"GOTO Conference\",\"Chicago\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/STKCRSUsyP0/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"The Many Meanings of Event-Driven Architecture\"}}]}},\"pathContext\":{\"slug\":\"one-hacker-way\",\"tags\":[\"GOTO 2015\",\"Keynote\",\"Scrum\",\"Agile\"]}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/talk-one-hacker-way.json\n// module id = 3092\n// module chunks = 195977817496960"],"sourceRoot":""}