{"version":3,"sources":["webpack:///path---tag-talk-7f2d8ca90ea8d8a10568.js","webpack:///./.cache/json/tag-talk.json"],"names":["webpackJsonp","2716","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,8PAAAC,MAAoRC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,oDAAAC,KAAA,0CAAAC,YAA2HC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,2DAAoEhB,MAAQC,YAAA,ysBAAAC,MAA+tBC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,mFAAAC,KAAA,2JAAAC,YAA2QC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,uFAAgGhB,MAAQC,YAAA,yLAAAC,MAAgNC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,oDAAAC,KAAA,6CAAAC,YAA8HC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,0DAAkEC,aAAgBR,KAAA,OAAAC,IAAA","file":"path---tag-talk-7f2d8ca90ea8d8a10568.js","sourcesContent":["webpackJsonp([69468661835567],{\n\n/***/ 2716:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Ned Batchelder\\nPython provides powerful primitives for iterating over your data in ways that let you express yourself clearly and directly.  But even programmers familiar with the tools don't use them as fully as they could.  This talk will cover Pyt\",\"meta\":{\"duration\":\"PT29M15S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"EnSu9hHGq5o\",\"provider\":\"youtube\"},\"slug\":\"loop-like-a-native-while-for-iterators-generators\",\"tag\":[\"psf\",\"pycon2013\",\"talk\",\"NedBatchelder\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/EnSu9hHGq5o/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Loop like a native: while, for, iterators, generators\"}},{\"node\":{\"description\":\"Higgs, a JIT compiler for JavaScript written in D, was presented at DConf 2013. Basic block versioning, a novel optimization technique in early stages of testing at the time, was also introduced. Experimental results demonstratring how basic block versioning fares on multiple metrics across a variety of benchmarks can now be shown. We discuss how we have interpreted these results to inform further development of Higgs and introduce a JIT compiler architecture based on the idea of lazy/incremental compilation and inlining. We also explore how D has influenced the development of Higgs and take a more in-depth look at how various D features such as templates and CTFE are used in the Higgs implementation.\",\"meta\":{\"duration\":\"PT43M57S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"FGgFMZhnXvU\",\"provider\":\"youtube\"},\"slug\":\"dconf-2014-day-2-talk-2-refactoring-jit-compilation-by-maxime-chevalier-boisvert\",\"tag\":[\"Compiler (Software Genre)\",\"Just In Time\",\"optimization\",\"javascript\",\"compilation\",\"jit\",\"dconf\",\"higgs\",\"conference\",\"talk\",\"Just-in-time Compilation\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/FGgFMZhnXvU/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"DConf 2014 Day 2 Talk 2: Refactoring JIT Compilation by Maxime Chevalier-Boisvert\"}},{\"node\":{\"description\":\"Raymond Hettinger\\nLearn to take better advantage of Python's best features and improve existing code through a series of code transformations, \\\"When you see this, do that instead.\\\"\",\"meta\":{\"duration\":\"PT48M51S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"OSGv2VnC0go\",\"provider\":\"youtube\"},\"slug\":\"transforming-code-into-beautiful-idiomatic-python\",\"tag\":[\"psf\",\"pycon2013\",\"talk\",\"RaymondHettinger\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/OSGv2VnC0go/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Transforming Code into Beautiful, Idiomatic Python\"}}]}},\"pathContext\":{\"slug\":\"talk\",\"tag\":\"talk\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tag-talk-7f2d8ca90ea8d8a10568.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Ned Batchelder\\nPython provides powerful primitives for iterating over your data in ways that let you express yourself clearly and directly.  But even programmers familiar with the tools don't use them as fully as they could.  This talk will cover Pyt\",\"meta\":{\"duration\":\"PT29M15S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"EnSu9hHGq5o\",\"provider\":\"youtube\"},\"slug\":\"loop-like-a-native-while-for-iterators-generators\",\"tag\":[\"psf\",\"pycon2013\",\"talk\",\"NedBatchelder\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/EnSu9hHGq5o/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Loop like a native: while, for, iterators, generators\"}},{\"node\":{\"description\":\"Higgs, a JIT compiler for JavaScript written in D, was presented at DConf 2013. Basic block versioning, a novel optimization technique in early stages of testing at the time, was also introduced. Experimental results demonstratring how basic block versioning fares on multiple metrics across a variety of benchmarks can now be shown. We discuss how we have interpreted these results to inform further development of Higgs and introduce a JIT compiler architecture based on the idea of lazy/incremental compilation and inlining. We also explore how D has influenced the development of Higgs and take a more in-depth look at how various D features such as templates and CTFE are used in the Higgs implementation.\",\"meta\":{\"duration\":\"PT43M57S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"FGgFMZhnXvU\",\"provider\":\"youtube\"},\"slug\":\"dconf-2014-day-2-talk-2-refactoring-jit-compilation-by-maxime-chevalier-boisvert\",\"tag\":[\"Compiler (Software Genre)\",\"Just In Time\",\"optimization\",\"javascript\",\"compilation\",\"jit\",\"dconf\",\"higgs\",\"conference\",\"talk\",\"Just-in-time Compilation\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/FGgFMZhnXvU/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"DConf 2014 Day 2 Talk 2: Refactoring JIT Compilation by Maxime Chevalier-Boisvert\"}},{\"node\":{\"description\":\"Raymond Hettinger\\nLearn to take better advantage of Python's best features and improve existing code through a series of code transformations, \\\"When you see this, do that instead.\\\"\",\"meta\":{\"duration\":\"PT48M51S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"OSGv2VnC0go\",\"provider\":\"youtube\"},\"slug\":\"transforming-code-into-beautiful-idiomatic-python\",\"tag\":[\"psf\",\"pycon2013\",\"talk\",\"RaymondHettinger\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/OSGv2VnC0go/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Transforming Code into Beautiful, Idiomatic Python\"}}]}},\"pathContext\":{\"slug\":\"talk\",\"tag\":\"talk\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tag-talk.json\n// module id = 2716\n// module chunks = 69468661835567"],"sourceRoot":""}