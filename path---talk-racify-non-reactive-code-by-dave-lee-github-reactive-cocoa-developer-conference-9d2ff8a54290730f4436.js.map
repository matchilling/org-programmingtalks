{"version":3,"sources":["webpack:///path---talk-racify-non-reactive-code-by-dave-lee-github-reactive-cocoa-developer-conference-9d2ff8a54290730f4436.js","webpack:///./.cache/json/talk-racify-non-reactive-code-by-dave-lee-github-reactive-cocoa-developer-conference.json"],"names":["webpackJsonp","3166","module","exports","data","talkJson","description","meta","duration","presenter","name","slug","source","id","provider","tag","title","allTalkJson","edges","node","thumbnails","default","url","height","width","pathContext","tags"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,UAAYC,YAAA,2oBAAAC,MAAiqBC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,KAAA,kFAAAC,QAAoGC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,sPAAAC,MAAA,qFAA0VC,aAAgBC,QAAUC,MAAQb,YAAA,4HAAAC,MAAkJC,SAAA,cAAwBC,WAAcC,KAAA,kBAAwBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,2BAAAI,KAAA,gBAAAK,YAAwEC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,oCAA6CG,MAAQb,YAAA,yEAAAC,MAA+FC,SAAA,YAAsBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,4DAAAI,KAAA,gFAAAK,YAAyKC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,iEAA0EG,MAAQb,YAAA,m/BAAAC,MAAygCC,SAAA,cAAwBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,mCAAAI,KAAA,oLAAAK,YAAoPC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,yCAAkDG,MAAQb,YAAA,2wCAAAC,MAAiyCC,SAAA,YAAsBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,4DAAAI,KAAA,qQAAAK,YAA8VC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,oEAA+EG,MAAQb,YAAA,k9CAA+SC,MAAyrCC,SAAA,YAAsBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,sCAAAI,KAAA,oDAAAK,YAAuHC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,2CAAoDG,MAAQb,YAAA,itBAAAC,MAA0uBC,SAAA,aAAuBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,yDAAAI,KAAA,oUAAAK,YAA0ZC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,gEAAyEG,MAAQb,YAAA,wuBAAAC,MAA8vBC,SAAA,YAAsBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,2BAAAI,KAAA,wCAAAK,YAAgGC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,gCAAyCG,MAAQb,YAAA,szDAAAC,MAA40DC,SAAA,aAAuBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,oCAAAI,KAAA,qFAAAK,YAAsJC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,yCAAkDG,MAAQb,YAAA,sEAAAC,MAA4FC,SAAA,YAAsBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,gDAAAI,KAAA,wEAAAK,YAAqJC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,sDAA+DG,MAAQb,YAAA,4hCAAAC,MAAkjCC,SAAA,aAAuBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,oFAAAI,KAAA,4MAAAK,YAA6TC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,0FAAkGS,aAAgBd,KAAA,kFAAAe,MAAA","file":"path---talk-racify-non-reactive-code-by-dave-lee-github-reactive-cocoa-developer-conference-9d2ff8a54290730f4436.js","sourcesContent":["webpackJsonp([36345683006825],{\n\n/***/ 3166:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"talkJson\":{\"description\":\"Facebook's Dave Lee presents a talk about \\\"RACifying\\\" non-reactive code at the 2014 Reactive Cocoa Developer Conference hosted by GitHub.\\n\\nAs always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub\\n\\nThanks!\\n\\nConnect with us.\\nFacebook: http://fb.com/github\\nTwitter: http://twitter.com/github\\nGoogle+: http://google.com/+github\\nLinkedIn: http://linkedin.com/company/github\\n\\nAbout GitHub\\nGitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com\",\"meta\":{\"duration\":\"PT24M23S\"},\"presenter\":{\"name\":null},\"slug\":\"racify-non-reactive-code-by-dave-lee-github-reactive-cocoa-developer-conference\",\"source\":{\"id\":\"sek0ohbboNU\",\"provider\":\"youtube\"},\"tag\":[\"git\",\"github\",\"github training\",\"github foundations\",\"basics\",\"collaboration\",\"git basics\",\"VCS\",\"programming\",\"versioncontrol\",\"version control\",\"open source\",\"software development\",\"mercurial\",\"bazaar\",\"perforce\",\"subversion\",\"CVS\",\"octocat\"],\"title\":\"RACify Non-Reactive Code by Dave Lee â€¢ GitHub Reactive Cocoa Developer Conference\"},\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Linus Torvalds visits Google to share his thoughts on git, the source control management system he created two years ago.\",\"meta\":{\"duration\":\"PT1H10M15S\"},\"presenter\":{\"name\":\"Linus Torvalds\"},\"source\":{\"id\":\"4XpnKHJAok8\",\"provider\":\"youtube\"},\"slug\":\"linus-torvalds-about-git\",\"tag\":[\"google\",\"git\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/4XpnKHJAok8/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Linus Torvalds talks about GIT\"}},{\"node\":{\"description\":\"The D Programming Language Conference, May 21-23 2014, Menlo Park, CA.\",\"meta\":{\"duration\":\"PT48M37S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"AhR4PSExnqk\",\"provider\":\"youtube\"},\"slug\":\"dconf-2014-sdc-a-d-compiler-as-a-library-by-amaury-sechet\",\"tag\":[\"D programming language\",\"programming languages\",\"programming\",\"dconf\",\"dlang\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/AhR4PSExnqk/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"DConf 2014: SDC, a D Compiler as a Library by Amaury Sechet\"}},{\"node\":{\"description\":\"Abstract \\nThe introduction of lambdas and first class function objects forever changed the nature of C++, opening up the floodgates to functional programming. Sometimes the best library design is based on a pattern that's very familiar to a Haskell programmer but alien to a C++ programmer. The new std::future proposal for C++17 hides several functional patterns including that of a monad -- the boogeyman of generations of imperative programmers. But once seen in action, the monad becomes just one more pattern in the toolbox of a library designer. \\nBio\\nBartosz Milewski always tries to be where the action is. He started as a quantum physicist when supertstrings were hot, joined the software industry to build the search engine for Microsoft Windows, became an avid proponent of object-oriented programming, and wrote a book on C++. He got into concurrency and parallelism when the multicores hit the market, and now he's evangelizing functional programming as the Holy Grail of software development.\",\"meta\":{\"duration\":\"PT1H20M59S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"BFnhhPehpKw\",\"provider\":\"youtube\"},\"slug\":\"c17-i-see-a-monad-in-your-future\",\"tag\":[\"NWCPP\",\"Bartosz Milewski\",\"Monad\",\"functional programming\",\"Haskel\",\"futures\",\"promise\",\"design patterns\",\"software development\",\"concurrent programming\",\"parallell programming\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/BFnhhPehpKw/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"C++17: I See a Monad in Your Future\"}},{\"node\":{\"description\":\"We would like to thank everyone for attending the first edition of Atmosphere Conference, which was held on the 13th-14th May 2013 in Concordia Design in Poznan. Considering the fact that the event was organised for the first time, we must admit that there was a great number of attendees interested in web scalability and performance. Together with organisers we managed to gather over 200 people. Two tracks of lectures, interviews and thousands of conversations behind the scenes guaranteed a successful conference, which we are proud to be organisers of. We hope that this event has met your expectations and gave you a chance to exchange experience, establish cooperation and meet people with similar interests. The first edition of Atmosphere would not be possible if not a great partners' support. Main Partner was the Allegro Group, which has also helped us create the conference schedule. Gold Sponsors were Akamai Technologies and Cisco Systems, whereas Silver Sponsor was the Dell Company. We would also like to thank our media partners, online services and bloggers who helped us promote the event. Photos, presentations and videos will be available soon on the website. Once again - thank you all for creating the first edition of Atmosphere Conference and see you next year.\",\"meta\":{\"duration\":\"PT51M26S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"C4z_9F6nfS8\",\"provider\":\"youtube\"},\"slug\":\"atmosphere-2013-your-css-is-a-mess-jonathan-snook-shopify\",\"tag\":[\"atmosphere\",\"conference\",\"2013\",\"allegro\",\"allegrogroup\",\"cisco systems\",\"cisco\",\"dell\",\"akamai\",\"akamai technologies\",\"performance\",\"scalability\",\"devops\",\"web\",\"java\",\"javascript\",\"css\",\"http\",\"developer\",\"programming\",\"tdd\",\"data\",\"john paul\",\"conde nast\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/C4z_9F6nfS8/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Atmosphere 2013: \\\"Your CSS is a Mess\\\" Jonathan Snook (Shopify)\"}},{\"node\":{\"description\":\"Build Your Own Lisp for Great Justice\\n\\nImplementing a toy Lisp interpreter is practically a rite of passage for the budding computer scientist. This hallowed tradition is described in detail in \\\"Lisp in Small Pieces,\\\" the seminal work on the making of Lisps, but everybody loves a tl;dr, so let's do the 40 minute executive summary.\\n\\nWe'll charge at high speed\\nthrough the following topics, with Clojure code to follow along with as we go (because there's no better language for implementing a Lisp than another Lisp):\\n\\n* Parsing: turning text files into ASTs\\n* Fundamental Lisp datatypes\\n* McCarthy's elementary functions\\n* Evaluating Lisp code\\n* Lambdas and lexical scope\\n* Your friend, the state monad\\n* Beyond Lisp: pattern matching and type systems\\n\\nWhen we're done, you'll be ready to go forth and fill the world with Lisps of all shapes, colours and Greenspun violations for Great Justice. Also, it'll be good fun.\\n\\nSpeaker\\nBodil Stokke (@bodil) is a compulsive conference speaker in the fields of functional programming and internets technologies, and is a co-organiser of three annual developer conferences in her home\\ntown of Oslo, Norway, mostly because she's still learning how to stop. She is a prolific contributor to the Free Software community, primarily as a Clojure developer, and has recently taken up designing new programming languages as a hobby. In her spare time, she works as a web developer for Comoyo, which is like Hulu for non-Americans.\",\"meta\":{\"duration\":\"PT53M52S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"DHubfS8E--o\",\"provider\":\"youtube\"},\"slug\":\"functional-programming-bodil-stokke\",\"tag\":[\"programming\",\"lisp\",\"geek\",\"functional\",\"clojure\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/DHubfS8E--o/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Functional programming - Bodil Stokke\"}},{\"node\":{\"description\":\"Learn from John Papa's talk \\\"10 AngularJS Patterns\\\" from Code on the Beach 2014 at One Ocean Resort & Spa, Atlantic Beach, Florida. Sunday, August 10, 2014. www.codeonthebeach.com\\n\\nAbstract:\\n\\\"Once you get beyond the AngularJS basics there are many decisions to be made on how to build robust and maintainable apps. Come learn how to build AngularJS apps that manage multiple screens, structure your application code, maintain clean code with popular patterns, implement CRUD, perform robust HTML validation, use local storage, pass unit tests, and use a automated build tasks. This session explores solutions to several of the common challenges that AngularJS developers face while building business applications.\\\"\",\"meta\":{\"duration\":\"PT1H1M27S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"UlvCbnKAH3g\",\"provider\":\"youtube\"},\"slug\":\"john-papa-10-angularjs-patterns-code-on-the-beach-2014\",\"tag\":[\"John Papa\",\"AngularJS (Software)\",\"Beach\",\"JavaScript\",\"Single Page Apps\",\"Patterns\",\"Code on the Beach\",\"conference\",\"Software Engineering (Industry)\",\"Software Development (Industry)\",\"Software Design Pattern (Field Of Study)\",\"Programming Language\",\"programming\",\"Jacksonville (City/Town/Village)\",\"Florida (US State)\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/UlvCbnKAH3g/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"John Papa - 10 AngularJS Patterns - Code on the Beach 2014\"}},{\"node\":{\"description\":\"If you always wanted to know more about about Clang's AST [1], for example because you want to implement an awesome tool [2, 3] based on Clang, or simply because you want to start contributing, this talk is for you.\\n\\nMake sure to watch in HD to be able to read the font in the terminal!\\n\\nThe semantic code completion in the vim session is powered by YCM [4], and the quick formatting is done by clang-format [5].\\n\\n[1] http://clang.llvm.org/docs/IntroductionToTheClangAST.html\\n[2] http://clang.llvm.org/docs/Tooling.html\\n[3] http://clang.llvm.org/docs/LibTooling.html\\n[4] https://github.com/Valloric/YouCompleteMe\\n[5] http://clang.llvm.org/docs/ClangFormat.html\\n\\nFrom the LLVM Euro Conference 2013: http://llvm.org/devmtg/2013-04/\",\"meta\":{\"duration\":\"PT44M53S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"VqCkCDFLSsc\",\"provider\":\"youtube\"},\"slug\":\"the-clang-ast-a-tutorial\",\"tag\":[\"C++\",\"Clang\",\"compiler\",\"programming\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/VqCkCDFLSsc/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"The Clang AST - a Tutorial\"}},{\"node\":{\"description\":\"Cross posted from msdn's channel 9.\\n\\nFunctional programming is increasing in popularity these days given the inherent problems with shared mutable state that is rife in the imperative world. As we march on to a world of multi and many-core chipsets, software engineering must evolve to better equip software engineers with the tools to exploit the vast power of multiple core processors as it won't come for free as it did in the recent past which was predictably based on Moore's law.\\n\\nOf course, learning new ways to think about programming semantics and code patterns are not always straight forward. For example, most imperative programmers (which include most of us who build software for a living...) are somewhat perplexed by the notion of functions as first class data structures that can be combined to create powerful and composable systems. Languages like Haskell are pure functional languages and require programmers to think in a different way, often in a precise mathematical fashion where composing and chaining functions is \\\"the Way\\\".\\n\\nDr. Brian Beckman, a Channel 9 celebrity, astrophysicist and senior software engineer thought it would be a very good idea to address the complexity of monads in an easy to understand way: a technical conversation at the whiteboard with yours truly for Channel 9.\\n\\nThis video interview is the result of Brian's idea that he can in fact remove the fear of monads from anybody who pays attention to his explanation. Of course, you can't just cover monads in a vacuum (category theory is not really addressed here) so the context is functional programming (Brian covers functions and composable functional structures (function chains) and of course monoids and then monads).\\n\\nTune in. There's a lot to learn here and only Brian can make monads easy to understand for the rest of us!\",\"meta\":{\"duration\":\"PT1H7M11S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"ZhuHCtR3xq8\",\"provider\":\"youtube\"},\"slug\":\"brian-beckman-dont-fear-the-monad\",\"tag\":[\"haskell\",\"monads\",\"programming\",\"brian beckman\",\"functional programming\",\"Haskell\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/ZhuHCtR3xq8/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Brian Beckman: Don't fear the Monad\"}},{\"node\":{\"description\":\"Help us caption & translate this video!\\n\\nhttp://amara.org/v/FGYe/\",\"meta\":{\"duration\":\"PT59M32S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"aZXc11eOEpI\",\"provider\":\"youtube\"},\"slug\":\"elixir-conf-2014-keynote-elixir-by-jose-valim\",\"tag\":[\"computer science\",\"technology\",\"elixir\",\"apps\",\"programming\",\"mobile\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/aZXc11eOEpI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Elixir Conf 2014 - Keynote: Elixir by Jose Valim\"}},{\"node\":{\"description\":\"This talk is part of Cerner's Tech Talk series. Check us out at http://engineering.cerner.com/ and @CernerEng\\n\\nAt most companies, advanced analytics expertise is contained in a lab environment: a small team of analysts sitting at their computers and churning out reports and insights to support business decisions. But the real impact from advanced analytics comes from building models that make real-time decisions within production workflows. We will discuss how to use the ecosystem of technologies around Hadoop to support bringing models out of the lab and into the factory, with a focus on strategies for data integration, large-scale machine learning, and experimentation.\\n\\nAbout the Speaker:\\nJosh Wills (@josh_wills) is the Senior Director of Data Science at Cloudera, a leading distrubtor of Hadoop and related services. Wills is the creator of Apache Crunch (a top level Apache project) and serves as the project's chair. Prior to Cloudera, Wills was an engineer at Google. Wills is an open source advocate and all around awesome guy.\",\"meta\":{\"duration\":\"PT1H4M28S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"v-91JycaKjc\",\"provider\":\"youtube\"},\"slug\":\"from-the-lab-to-the-factory-building-a-production-machine-learning-infrastructure\",\"tag\":[\"Cerner (Organization)\",\"tech talk\",\"Machine Learning (Field Of Study)\",\"Apache Software Foundation (Organization)\",\"programming\",\"Statistics (Field Of Study)\",\"Apache Hadoop (Software)\",\"apache crunch\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/v-91JycaKjc/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"From the Lab to the Factory: Building a Production Machine Learning Infrastructure\"}}]}},\"pathContext\":{\"slug\":\"racify-non-reactive-code-by-dave-lee-github-reactive-cocoa-developer-conference\",\"tags\":[\"git\",\"github\",\"github training\",\"github foundations\",\"basics\",\"collaboration\",\"git basics\",\"VCS\",\"programming\",\"versioncontrol\",\"version control\",\"open source\",\"software development\",\"mercurial\",\"bazaar\",\"perforce\",\"subversion\",\"CVS\",\"octocat\"]}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---talk-racify-non-reactive-code-by-dave-lee-github-reactive-cocoa-developer-conference-9d2ff8a54290730f4436.js","module.exports = {\"data\":{\"talkJson\":{\"description\":\"Facebook's Dave Lee presents a talk about \\\"RACifying\\\" non-reactive code at the 2014 Reactive Cocoa Developer Conference hosted by GitHub.\\n\\nAs always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub\\n\\nThanks!\\n\\nConnect with us.\\nFacebook: http://fb.com/github\\nTwitter: http://twitter.com/github\\nGoogle+: http://google.com/+github\\nLinkedIn: http://linkedin.com/company/github\\n\\nAbout GitHub\\nGitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com\",\"meta\":{\"duration\":\"PT24M23S\"},\"presenter\":{\"name\":null},\"slug\":\"racify-non-reactive-code-by-dave-lee-github-reactive-cocoa-developer-conference\",\"source\":{\"id\":\"sek0ohbboNU\",\"provider\":\"youtube\"},\"tag\":[\"git\",\"github\",\"github training\",\"github foundations\",\"basics\",\"collaboration\",\"git basics\",\"VCS\",\"programming\",\"versioncontrol\",\"version control\",\"open source\",\"software development\",\"mercurial\",\"bazaar\",\"perforce\",\"subversion\",\"CVS\",\"octocat\"],\"title\":\"RACify Non-Reactive Code by Dave Lee â€¢ GitHub Reactive Cocoa Developer Conference\"},\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Linus Torvalds visits Google to share his thoughts on git, the source control management system he created two years ago.\",\"meta\":{\"duration\":\"PT1H10M15S\"},\"presenter\":{\"name\":\"Linus Torvalds\"},\"source\":{\"id\":\"4XpnKHJAok8\",\"provider\":\"youtube\"},\"slug\":\"linus-torvalds-about-git\",\"tag\":[\"google\",\"git\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/4XpnKHJAok8/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Linus Torvalds talks about GIT\"}},{\"node\":{\"description\":\"The D Programming Language Conference, May 21-23 2014, Menlo Park, CA.\",\"meta\":{\"duration\":\"PT48M37S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"AhR4PSExnqk\",\"provider\":\"youtube\"},\"slug\":\"dconf-2014-sdc-a-d-compiler-as-a-library-by-amaury-sechet\",\"tag\":[\"D programming language\",\"programming languages\",\"programming\",\"dconf\",\"dlang\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/AhR4PSExnqk/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"DConf 2014: SDC, a D Compiler as a Library by Amaury Sechet\"}},{\"node\":{\"description\":\"Abstract \\nThe introduction of lambdas and first class function objects forever changed the nature of C++, opening up the floodgates to functional programming. Sometimes the best library design is based on a pattern that's very familiar to a Haskell programmer but alien to a C++ programmer. The new std::future proposal for C++17 hides several functional patterns including that of a monad -- the boogeyman of generations of imperative programmers. But once seen in action, the monad becomes just one more pattern in the toolbox of a library designer. \\nBio\\nBartosz Milewski always tries to be where the action is. He started as a quantum physicist when supertstrings were hot, joined the software industry to build the search engine for Microsoft Windows, became an avid proponent of object-oriented programming, and wrote a book on C++. He got into concurrency and parallelism when the multicores hit the market, and now he's evangelizing functional programming as the Holy Grail of software development.\",\"meta\":{\"duration\":\"PT1H20M59S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"BFnhhPehpKw\",\"provider\":\"youtube\"},\"slug\":\"c17-i-see-a-monad-in-your-future\",\"tag\":[\"NWCPP\",\"Bartosz Milewski\",\"Monad\",\"functional programming\",\"Haskel\",\"futures\",\"promise\",\"design patterns\",\"software development\",\"concurrent programming\",\"parallell programming\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/BFnhhPehpKw/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"C++17: I See a Monad in Your Future\"}},{\"node\":{\"description\":\"We would like to thank everyone for attending the first edition of Atmosphere Conference, which was held on the 13th-14th May 2013 in Concordia Design in Poznan. Considering the fact that the event was organised for the first time, we must admit that there was a great number of attendees interested in web scalability and performance. Together with organisers we managed to gather over 200 people. Two tracks of lectures, interviews and thousands of conversations behind the scenes guaranteed a successful conference, which we are proud to be organisers of. We hope that this event has met your expectations and gave you a chance to exchange experience, establish cooperation and meet people with similar interests. The first edition of Atmosphere would not be possible if not a great partners' support. Main Partner was the Allegro Group, which has also helped us create the conference schedule. Gold Sponsors were Akamai Technologies and Cisco Systems, whereas Silver Sponsor was the Dell Company. We would also like to thank our media partners, online services and bloggers who helped us promote the event. Photos, presentations and videos will be available soon on the website. Once again - thank you all for creating the first edition of Atmosphere Conference and see you next year.\",\"meta\":{\"duration\":\"PT51M26S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"C4z_9F6nfS8\",\"provider\":\"youtube\"},\"slug\":\"atmosphere-2013-your-css-is-a-mess-jonathan-snook-shopify\",\"tag\":[\"atmosphere\",\"conference\",\"2013\",\"allegro\",\"allegrogroup\",\"cisco systems\",\"cisco\",\"dell\",\"akamai\",\"akamai technologies\",\"performance\",\"scalability\",\"devops\",\"web\",\"java\",\"javascript\",\"css\",\"http\",\"developer\",\"programming\",\"tdd\",\"data\",\"john paul\",\"conde nast\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/C4z_9F6nfS8/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Atmosphere 2013: \\\"Your CSS is a Mess\\\" Jonathan Snook (Shopify)\"}},{\"node\":{\"description\":\"Build Your Own Lisp for Great Justice\\n\\nImplementing a toy Lisp interpreter is practically a rite of passage for the budding computer scientist. This hallowed tradition is described in detail in \\\"Lisp in Small Pieces,\\\" the seminal work on the making of Lisps, but everybody loves a tl;dr, so let's do the 40 minute executive summary.\\n\\nWe'll charge at high speed\\nthrough the following topics, with Clojure code to follow along with as we go (because there's no better language for implementing a Lisp than another Lisp):\\n\\n* Parsing: turning text files into ASTs\\n* Fundamental Lisp datatypes\\n* McCarthy's elementary functions\\n* Evaluating Lisp code\\n* Lambdas and lexical scope\\n* Your friend, the state monad\\n* Beyond Lisp: pattern matching and type systems\\n\\nWhen we're done, you'll be ready to go forth and fill the world with Lisps of all shapes, colours and Greenspun violations for Great Justice. Also, it'll be good fun.\\n\\nSpeaker\\nBodil Stokke (@bodil) is a compulsive conference speaker in the fields of functional programming and internets technologies, and is a co-organiser of three annual developer conferences in her home\\ntown of Oslo, Norway, mostly because she's still learning how to stop. She is a prolific contributor to the Free Software community, primarily as a Clojure developer, and has recently taken up designing new programming languages as a hobby. In her spare time, she works as a web developer for Comoyo, which is like Hulu for non-Americans.\",\"meta\":{\"duration\":\"PT53M52S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"DHubfS8E--o\",\"provider\":\"youtube\"},\"slug\":\"functional-programming-bodil-stokke\",\"tag\":[\"programming\",\"lisp\",\"geek\",\"functional\",\"clojure\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/DHubfS8E--o/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Functional programming - Bodil Stokke\"}},{\"node\":{\"description\":\"Learn from John Papa's talk \\\"10 AngularJS Patterns\\\" from Code on the Beach 2014 at One Ocean Resort & Spa, Atlantic Beach, Florida. Sunday, August 10, 2014. www.codeonthebeach.com\\n\\nAbstract:\\n\\\"Once you get beyond the AngularJS basics there are many decisions to be made on how to build robust and maintainable apps. Come learn how to build AngularJS apps that manage multiple screens, structure your application code, maintain clean code with popular patterns, implement CRUD, perform robust HTML validation, use local storage, pass unit tests, and use a automated build tasks. This session explores solutions to several of the common challenges that AngularJS developers face while building business applications.\\\"\",\"meta\":{\"duration\":\"PT1H1M27S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"UlvCbnKAH3g\",\"provider\":\"youtube\"},\"slug\":\"john-papa-10-angularjs-patterns-code-on-the-beach-2014\",\"tag\":[\"John Papa\",\"AngularJS (Software)\",\"Beach\",\"JavaScript\",\"Single Page Apps\",\"Patterns\",\"Code on the Beach\",\"conference\",\"Software Engineering (Industry)\",\"Software Development (Industry)\",\"Software Design Pattern (Field Of Study)\",\"Programming Language\",\"programming\",\"Jacksonville (City/Town/Village)\",\"Florida (US State)\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/UlvCbnKAH3g/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"John Papa - 10 AngularJS Patterns - Code on the Beach 2014\"}},{\"node\":{\"description\":\"If you always wanted to know more about about Clang's AST [1], for example because you want to implement an awesome tool [2, 3] based on Clang, or simply because you want to start contributing, this talk is for you.\\n\\nMake sure to watch in HD to be able to read the font in the terminal!\\n\\nThe semantic code completion in the vim session is powered by YCM [4], and the quick formatting is done by clang-format [5].\\n\\n[1] http://clang.llvm.org/docs/IntroductionToTheClangAST.html\\n[2] http://clang.llvm.org/docs/Tooling.html\\n[3] http://clang.llvm.org/docs/LibTooling.html\\n[4] https://github.com/Valloric/YouCompleteMe\\n[5] http://clang.llvm.org/docs/ClangFormat.html\\n\\nFrom the LLVM Euro Conference 2013: http://llvm.org/devmtg/2013-04/\",\"meta\":{\"duration\":\"PT44M53S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"VqCkCDFLSsc\",\"provider\":\"youtube\"},\"slug\":\"the-clang-ast-a-tutorial\",\"tag\":[\"C++\",\"Clang\",\"compiler\",\"programming\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/VqCkCDFLSsc/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"The Clang AST - a Tutorial\"}},{\"node\":{\"description\":\"Cross posted from msdn's channel 9.\\n\\nFunctional programming is increasing in popularity these days given the inherent problems with shared mutable state that is rife in the imperative world. As we march on to a world of multi and many-core chipsets, software engineering must evolve to better equip software engineers with the tools to exploit the vast power of multiple core processors as it won't come for free as it did in the recent past which was predictably based on Moore's law.\\n\\nOf course, learning new ways to think about programming semantics and code patterns are not always straight forward. For example, most imperative programmers (which include most of us who build software for a living...) are somewhat perplexed by the notion of functions as first class data structures that can be combined to create powerful and composable systems. Languages like Haskell are pure functional languages and require programmers to think in a different way, often in a precise mathematical fashion where composing and chaining functions is \\\"the Way\\\".\\n\\nDr. Brian Beckman, a Channel 9 celebrity, astrophysicist and senior software engineer thought it would be a very good idea to address the complexity of monads in an easy to understand way: a technical conversation at the whiteboard with yours truly for Channel 9.\\n\\nThis video interview is the result of Brian's idea that he can in fact remove the fear of monads from anybody who pays attention to his explanation. Of course, you can't just cover monads in a vacuum (category theory is not really addressed here) so the context is functional programming (Brian covers functions and composable functional structures (function chains) and of course monoids and then monads).\\n\\nTune in. There's a lot to learn here and only Brian can make monads easy to understand for the rest of us!\",\"meta\":{\"duration\":\"PT1H7M11S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"ZhuHCtR3xq8\",\"provider\":\"youtube\"},\"slug\":\"brian-beckman-dont-fear-the-monad\",\"tag\":[\"haskell\",\"monads\",\"programming\",\"brian beckman\",\"functional programming\",\"Haskell\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/ZhuHCtR3xq8/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Brian Beckman: Don't fear the Monad\"}},{\"node\":{\"description\":\"Help us caption & translate this video!\\n\\nhttp://amara.org/v/FGYe/\",\"meta\":{\"duration\":\"PT59M32S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"aZXc11eOEpI\",\"provider\":\"youtube\"},\"slug\":\"elixir-conf-2014-keynote-elixir-by-jose-valim\",\"tag\":[\"computer science\",\"technology\",\"elixir\",\"apps\",\"programming\",\"mobile\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/aZXc11eOEpI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Elixir Conf 2014 - Keynote: Elixir by Jose Valim\"}},{\"node\":{\"description\":\"This talk is part of Cerner's Tech Talk series. Check us out at http://engineering.cerner.com/ and @CernerEng\\n\\nAt most companies, advanced analytics expertise is contained in a lab environment: a small team of analysts sitting at their computers and churning out reports and insights to support business decisions. But the real impact from advanced analytics comes from building models that make real-time decisions within production workflows. We will discuss how to use the ecosystem of technologies around Hadoop to support bringing models out of the lab and into the factory, with a focus on strategies for data integration, large-scale machine learning, and experimentation.\\n\\nAbout the Speaker:\\nJosh Wills (@josh_wills) is the Senior Director of Data Science at Cloudera, a leading distrubtor of Hadoop and related services. Wills is the creator of Apache Crunch (a top level Apache project) and serves as the project's chair. Prior to Cloudera, Wills was an engineer at Google. Wills is an open source advocate and all around awesome guy.\",\"meta\":{\"duration\":\"PT1H4M28S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"v-91JycaKjc\",\"provider\":\"youtube\"},\"slug\":\"from-the-lab-to-the-factory-building-a-production-machine-learning-infrastructure\",\"tag\":[\"Cerner (Organization)\",\"tech talk\",\"Machine Learning (Field Of Study)\",\"Apache Software Foundation (Organization)\",\"programming\",\"Statistics (Field Of Study)\",\"Apache Hadoop (Software)\",\"apache crunch\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/v-91JycaKjc/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"From the Lab to the Factory: Building a Production Machine Learning Infrastructure\"}}]}},\"pathContext\":{\"slug\":\"racify-non-reactive-code-by-dave-lee-github-reactive-cocoa-developer-conference\",\"tags\":[\"git\",\"github\",\"github training\",\"github foundations\",\"basics\",\"collaboration\",\"git basics\",\"VCS\",\"programming\",\"versioncontrol\",\"version control\",\"open source\",\"software development\",\"mercurial\",\"bazaar\",\"perforce\",\"subversion\",\"CVS\",\"octocat\"]}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/talk-racify-non-reactive-code-by-dave-lee-github-reactive-cocoa-developer-conference.json\n// module id = 3166\n// module chunks = 36345683006825"],"sourceRoot":""}