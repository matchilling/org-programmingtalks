webpackJsonp([0x68d449c32355],{2802:function(e,t){e.exports={data:{allTalkJson:{edges:[{node:{description:"Compilers are caught in a tug-of-war between increasingly exotic architectures and instruction set extensions on one hand, and our desire for advanced programming languages and PL features on the other. A multi-language, multi-target compiler infrastructure such as LLVM ameliorates the situation somewhat, but engineering fast, effective and correct optimizations for LLVM is challenging. Even after a decade of intense development, there is a long tail of unimplemented optimizations.\n\nUniversity of Utah Associate Professor John Regehr presents Souper, a superoptimizer that gives us a look at some of the optimizations that are missing from LLVM while also avoiding the bugs that are often found in hand-written optimization passes. Souper works by turning LLVM code into queries for an automated theorem prover. When Souper is run on LLVM itself, it identifies thousands of uncaught optimizations and also ranks them according to the likely improvement in code size or code speed that would result from implementing each one.\n\nJohn Regehr, Associate Professor, School of Computing, University of Utah\n\n12/2/2014\n\nhttps://www.cs.washington.edu/htbin-post/mvis/mvis?ID=2643\n\nhttp://uwtv.org",meta:{duration:"PT49M7S"},presenter:{name:null},source:{id:"Ux0YnVEaI6A",provider:"youtube"},slug:"superoptimizing-llvm",tag:["UW","University of Washington","Engineering and Computer Science","optimization","superoptimizer","LLVM","Souper"],thumbnails:{default:{url:"https://i.ytimg.com/vi/Ux0YnVEaI6A/default.jpg",height:90,width:120}},title:"Superoptimizing LLVM"}}]}},pathContext:{slug:"university-of-washington",tag:"University of Washington"}}}});
//# sourceMappingURL=path---tag-university-of-washington-9b0fa3f4972e003202ff.js.map