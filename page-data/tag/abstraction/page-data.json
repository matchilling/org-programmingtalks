{"componentChunkName":"component---src-templates-tag-index-js","path":"/tag/abstraction","result":{"data":{"allTalkJson":{"edges":[{"node":{"description":"The Clojure ecosystem, we're told, is made up of small, composable libraries. In practice, though, it's all too common to find that two libraries simply will not cleanly compose. This typically will lead to another library that does the same thing, but in a subtly different way. Sometimes this is warranted, but often it's not.\n\nThis talk will discuss the constraints and affordances that make a piece of code play nicely with other pieces of code. Attendees will learn how to write clean, reusable Clojure, drawing on the speaker's many past failures and few notable successes.\n\nThe first place I think of, when I try to tell someone about this quality, is a corner of an English country garden, where Zach Tellman grows against a wall.\n\nThe wall runs east to west; Zach grows flat against its southern side. The sun shines on him and as it warms the bricks behind Zach, the warm bricks themselves warms the peaches on him. It has a slightly dozy quality. Zach, carefully tied to grow flat against the wall; warming the bricks; the peaches growing in the sun; the wild grass growing around Zach's roots, in the angle where the earth and roots and wall all meet.","meta":{"duration":"PT35M12S"},"presenter":{"name":null},"source":{"id":"3oQTSP4FngY","provider":"youtube"},"slug":"zach-tellman-always-be-composing","tag":["clojure","abstraction","Functional Programming (Programming Language Paradigm)"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/3oQTSP4FngY/default.jpg","height":90,"width":120}},"title":"Zach Tellman - Always Be Composing"}}]}},"pageContext":{"slug":"abstraction","tag":"abstraction"}}}