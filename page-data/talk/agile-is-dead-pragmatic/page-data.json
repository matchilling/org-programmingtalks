{"componentChunkName":"component---src-templates-talk-index-js","path":"/talk/agile-is-dead-pragmatic","result":{"data":{"talkJson":{"description":"Dave Thomas was one of the creators of the Agile Manifesto. A year ago, he told us that Agile is Dead. How could this be? Why had he deserted us? And what are we to do? It turns out that while the \"Agile\" industry is busy debasing the meaning of the word, the underlying values are still strong. In this talk, Dave will draw a distinction, and show us how to reclaim agility for ourselves. As usual, he'll probably end up making some friends, and making some enemies. Which will you be?","meta":{"duration":"PT40M39S"},"presenter":{"name":"Dave Thomas"},"slug":"agile-is-dead-pragmatic","source":{"id":"a-BOSpxYJ9M","provider":"youtube"},"tag":["Keynote","Agile","GOTO 2015"],"title":"Agile is Dead"},"allTalkJson":{"edges":[{"node":{"description":"In this keynote speech from JaxConf 2012, Rich Hickey, creator of Clojure and founder of Datomic gives an awesome analysis of the changing way we think about values (not the philosphoical kind) in light of the increasing complexity of information technology and the advent of Big Data. The broad subject of the talk makes it worth watching for almost anyone in the programming world, and was one of the highlights of the JaxConf lineup.","meta":{"duration":"PT31M44S"},"presenter":{"name":"Rich Hickey"},"source":{"id":"-6BsiVyC1kM","provider":"youtube"},"slug":"the-value-of-values","tag":["JaxConf 2012","Keynote"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/-6BsiVyC1kM/default.jpg","height":90,"width":120}},"title":"The Value of Values"}},{"node":{"description":"We know how to write bad code: litter our programs with casts, macros, pointers, naked new and deletes, and complicated control structures. Alternatively (or additionally), we could obscure every design decision in a mess of deeply nested abstractions using the latest object-oriented programming and generic programming tricks. Then, for good measure, we might complicate our algorithms with interesting special cases. Such code is incomprehensible, unmaintainable, usually inefficient, and not uncommon.\n\nBut how do we write good code? What principles, techniques, and idioms can we exploit to make it easier to produce quality code? In this presentation, I make an argument for type-rich interfaces, compact data structures, integrated resource management and error handling, and highly-structured algorithmic code. I illustrate my ideas and guidelines with a few idiomatic code examples.\n\nI use C++11 freely. Examples include auto, general constant expressions, uniform initialization, type aliases, type safe threading, and user-defined literals. C++11 features are only just starting to appear in production compilers, so some of my suggestions are conjecture. Developing a \"modern style,\" however, is essential if we don't want to maintain newly-written 1970s and 1980s style code in 2020.\n\nThis presentation reflects my thoughts on what \"Modern C++\" should mean in the 2010s: a language for programming based on light-weight abstraction with direct and efficient mapping to hardware, suitable for infrastructure code.","meta":{"duration":"PT1H29M48S"},"presenter":{"name":"Bjarne Stroustrup"},"source":{"id":"0iWb_qi2-uI","provider":"youtube"},"slug":"keynote-goingnative-2012","tag":["C++","GoingNative","Keynote"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/0iWb_qi2-uI/default.jpg","height":90,"width":120}},"title":"Keynote GoingNative 2012 C++"}},{"node":{"description":"There are now several frameworks designed to address the demand for \"big agile.\"\n\nIn this talk Jez will explain the flaws in such frameworks, why they so often fail to produce the desired effects, and what we should do instead. He will also address some common organizational obstacles to moving fast at scale: governance, budgeting, and the project paradigm - and discuss how to address them. Warning: this talk will include liberal use of real, statistically sound data.","meta":{"duration":"PT51M2S"},"presenter":{"name":"Jez Humble"},"source":{"id":"2zYxWEZ0gYg","provider":"youtube"},"slug":"why-scaling-agile-doesnt-work","tag":["GOTO Conference","Agile","Scrum"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/2zYxWEZ0gYg/default.jpg","height":90,"width":120}},"title":"Why Scaling Agile Doesn't Work"}},{"node":{"description":"Hartmut Kaisers Keynote from Meeting C++ 2014\n\nSlides:\nhttp://meetingcpp.com/index.php/tv14/items/26.html","meta":{"duration":"PT1H27M36S"},"presenter":{"name":null},"source":{"id":"4OCUEgSNIAY","provider":"youtube"},"slug":"plain-threads-are-the-goto-of-todays-computing-hartmut-kaiser-keynote-meeting-c-2014","tag":["Software (Industry)","C (Programming Language)","C++","Meeting C++","Keynote","Parallelism","Concurrency","Threading","Thread","HPX","Meeting C++ 2014"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/4OCUEgSNIAY/default.jpg","height":90,"width":120}},"title":"Plain Threads are the GOTO of todays computing - Hartmut Kaiser - Keynote Meeting C++ 2014"}},{"node":{"description":"Software gets complicated fast. Most of good architecture and design practise is about trying to slow the rate at which software gets complicated. You can’t stop it, it’s a form of entropy. You can only slow it down and do your level best to stay on top of things.\n\nOne way to manage the mess is to maximise the likelihood that everyone knows what’s going on in the codebase. This requires two things: consistency and replaceability. Consistency implies you can make reasonable assumptions about unfamiliar parts of the application. Replaceability means you can kill code easily and replace it with something better.\n\nDan North argues that code should either be new enough that someone remembers writing it, or well-enough established that everyone knows how it works. It’s code in that awkward middle stage, between brand new and part-of-the-furniture, that gets forgotten about and starts to smell. If code is going to die it should die quickly. If it is going to stick around it should be stable.\n\nIn this talk, Dan describes a model for thinking about the age of code and argues for replaceability as a first class concern. He also discovers that if you optimise for both replaceability and consistency you can end up with something that looks a lot like microservices.","meta":{"duration":"PT37M22S"},"presenter":{"name":"Dan North"},"source":{"id":"4Y0tOi7QWqM","provider":"youtube"},"slug":"software-that-fits-in-your-head","tag":["Agile","GOTO Conference","Mircoservices","Software Architecture"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/4Y0tOi7QWqM/default.jpg","height":90,"width":120}},"title":"Software that Fits in Your Head"}},{"node":{"description":"Mob Programming is a development practice where the whole team works on the same thing, at the same time, in the same space, and on the same computer. It is a whole-team approach to doing all the work the team does including designing, coding, testing, and working with the customers, users and other stakeholders. This is an evolutionary step beyond pair programming, and accentuates face-to-face communication, team alignment, collaboration, and self-organizing team concepts of the Agile approach to software development. Mob Programming can be a highly effective approach to software development. Please join me as I share how the concept got started, the benefits, techniques we use, and some of the problems we've faced.","meta":{"duration":"PT50M25S"},"presenter":{"name":"Woody Zuill"},"source":{"id":"8cy64qkgTyI","provider":"youtube"},"slug":"mob-programming-a-whole-team-approach","tag":["Agile","Productivity"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/8cy64qkgTyI/default.jpg","height":90,"width":120}},"title":"Mob Programming, A Whole Team Approach"}},{"node":{"description":"Everything is changing. Everything is new. Frameworks, platforms and trends are displaced on a weekly basis. Skills are churning.\n\nAnd yet... Beneath this seemingly turbulent flow there is a slow current, strong and steady, changing relatively little over the decades. Concepts with a long history appear in new forms and fads and technologies. Principles are revisited. Ideas once lost to the mainstream are found again.\n\nIn this keynote we revisit the present through the past, looking at the enduring principles that shape programming languages, architecture, development practice and development process, the ideas that cycle round, each time becoming perhaps a little better defined, a little more mature, and look to see what else might be on the horizon.","meta":{"duration":"PT50M23S"},"presenter":{"name":"Kevlin Henney"},"source":{"id":"AbgsfeGvg3E","provider":"youtube"},"slug":"old-is-the-new-new","tag":["GOTO Conference","Keynote","Software Architecture","Languages"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/AbgsfeGvg3E/default.jpg","height":90,"width":120}},"title":"Old Is the New New"}},{"node":{"description":"Systems get bigger, technologies reach further, practices mature, advice changes... or at least some of it does. Some guidance remains unaffected by the passing of paradigms, the evolution of technology or the scaling of development: break your software into small, cohesive parts defined by clear interfaces and sound implementations, all the while striving for simplicity. The excuses for not doing so are as predictable as they are problematic. But if you want to create legacy code, make sure code is arbitrarily partitioned into large, incoherent parts characterised by unwieldy interfaces and incomprehensible implementations.\nWhile there are many definitions of what a legacy system is, common to almost all perceptions of a legacy system is the concept of size — specifically, lots of it. The phrase 'small legacy system' can be considered an oxymoron. This talk sets out to re-assess and reassert the importance of thinking and implementing small as an essential property of software systems — yes, even the large ones.","meta":{"duration":"PT1H7M3S"},"presenter":{"name":"Kevlin Henney"},"source":{"id":"B3b4tremI5o","provider":"youtube"},"slug":"small-is-beautiful","tag":["GOTO Conference","Keynote","GOTO Copenhagen","Scaling","Legacy System","Simplicity"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/B3b4tremI5o/default.jpg","height":90,"width":120}},"title":"Small Is Beautiful"}},{"node":{"description":"Aaron Swartz keynote - \"How we stopped SOPA\"  at F2C:Freedom to Connect 2012, Washington DC on May 21 2012.\n\nhttp://freedom-to-connect.net/","meta":{"duration":"PT22M52S"},"presenter":{"name":"Aaron Swartz"},"source":{"id":"Fgh2dFngFsg","provider":"youtube"},"slug":"f2c2012-aaron-swartz-keynote-how-we-stopped-sopa","tag":["SOPA","freedom to connect","internet freedom","Keynote"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/Fgh2dFngFsg/default.jpg","height":90,"width":120}},"title":"\"How we stopped SOPA\""}},{"node":{"description":"This presentation was recorded at GOTO Copenhagen 2015\nhttp://gotocph.com\n\nErik Meijer - Founder at Applied Duality, Inc.\n\nABSTRACT\nErik challenges the basic ideas on Scrum & Agile and how developers should be developing code for the future. In the next decade every business will be digitized and effectively become a software company. Leveraging software, and, in general, computational [...]\nDownload slides and read the full abstract here:\nhttp://gotocon.com/cph-2015/presentation/Keynote:%20One%20Hacker%20Way\n\nhttps://twitter.com/gotocph\nhttps://www.facebook.com/GOTOConference\nhttp://gotocon.com","meta":{"duration":"PT55M37S"},"presenter":{"name":"Erik Meijer"},"source":{"id":"FvMuPtuvP5w","provider":"youtube"},"slug":"one-hacker-way","tag":["GOTO 2015","Keynote","Scrum","Agile"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/FvMuPtuvP5w/default.jpg","height":90,"width":120}},"title":"One Hacker Way"}}]}},"pageContext":{"slug":"agile-is-dead-pragmatic","tags":["Keynote","Agile","GOTO 2015"]}}}