{"version":3,"sources":["webpack:///path---talk-the-how-and-why-of-fitting-things-together-joe-armstrong-0e152af791da334f4a43.js","webpack:///./.cache/json/talk-the-how-and-why-of-fitting-things-together-joe-armstrong.json"],"names":["webpackJsonp","3192","module","exports","data","talkJson","description","meta","duration","presenter","name","slug","source","id","provider","tag","title","allTalkJson","edges","node","thumbnails","default","url","height","width","pathContext","tags"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,UAAYC,YAAA,wTAAAC,MAA8UC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,KAAA,2DAAAC,QAA6EC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,qDAAAC,MAAA,8DAAkIC,aAAgBC,QAAUC,MAAQb,YAAA,ubAAAC,MAA6cC,SAAA,YAAsBC,WAAcC,KAAA,eAAqBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,sBAAAI,KAAA,0BAAAK,YAA6EC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,yBAAkCG,MAAQb,YAAA,+/CAAAC,MAAwhDC,SAAA,cAAwBC,WAAcC,KAAA,qBAA2BE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,2BAAAI,KAAA,+BAAAK,YAAuFC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,kCAA2CG,MAAQb,YAAA,qsCAAAC,MAA2tCC,SAAA,YAAsBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,kDAAAI,KAAA,mDAAAK,YAAkIC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,wDAAiEG,MAAQb,YAAA,+GAAAC,MAAqIC,SAAA,cAAwBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,uFAAAI,KAAA,0JAAAK,YAA8QC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,gGAAyGG,MAAQb,YAAA,wgCAAAC,MAA8hCC,SAAA,YAAsBC,WAAcC,KAAA,iBAAuBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,qBAAAI,KAAA,sFAAAK,YAAwIC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,wBAAiCG,MAAQb,YAAA,gJAAAC,MAAwKC,SAAA,YAAsBC,WAAcC,KAAA,gBAAsBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,mDAAAI,KAAA,0DAAAK,YAA0IC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,2BAAsCG,MAAQb,YAAA,ymBAAAC,MAA+nBC,SAAA,YAAsBC,WAAcC,KAAA,eAAqBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,iBAAAI,KAAA,uCAAAK,YAAqFC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,oBAA6BG,MAAQb,YAAA,i+BAAAC,MAAu/BC,SAAA,YAAsBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,uEAAAI,KAAA,wFAAAK,YAA4LC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,+EAAwFG,MAAQb,YAAA,8oBAAAC,MAAoqBC,SAAA,YAAsBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,iGAAAI,KAAA,gDAAAK,YAA8KC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,yGAAkHG,MAAQb,YAAA,w+BAAAC,MAA8/BC,SAAA,aAAuBC,WAAcC,KAAA,YAAkBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,sCAAAI,KAAA,oCAAAK,YAAuGC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,6CAAqDS,aAAgBd,KAAA,2DAAAe,MAAA","file":"path---talk-the-how-and-why-of-fitting-things-together-joe-armstrong-0e152af791da334f4a43.js","sourcesContent":["webpackJsonp([205167520423847],{\n\n/***/ 3192:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"talkJson\":{\"description\":\"Erlang Factory SF Bay Area 2013\\nMore info and slides on the website: http://www.erlang-factory.com/conference/SFBay2013/talks\\n\\nSoftware is difficult because the parts don't fit together. Why is this? Can we do anything about this? And what's this got to do with Erlang? Come to my talk and you'll find out!\",\"meta\":{\"duration\":\"PT46M40S\"},\"presenter\":{\"name\":null},\"slug\":\"the-how-and-why-of-fitting-things-together-joe-armstrong\",\"source\":{\"id\":\"ed7A7r6DBsM\",\"provider\":\"youtube\"},\"tag\":[\"Erlang\",\"Erlang Factory\",\"Joe Armstrong\",\"Keynote\"],\"title\":\"The How and Why of Fitting Things Together - Joe Armstrong\"},\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"In this keynote speech from JaxConf 2012, Rich Hickey, creator of Clojure and founder of Datomic gives an awesome analysis of the changing way we think about values (not the philosphoical kind) in light of the increasing complexity of information technology and the advent of Big Data. The broad subject of the talk makes it worth watching for almost anyone in the programming world, and was one of the highlights of the JaxConf lineup.\",\"meta\":{\"duration\":\"PT31M44S\"},\"presenter\":{\"name\":\"Rich Hickey\"},\"source\":{\"id\":\"-6BsiVyC1kM\",\"provider\":\"youtube\"},\"slug\":\"the-value-of-values\",\"tag\":[\"JaxConf 2012\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/-6BsiVyC1kM/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"The Value of Values\"}},{\"node\":{\"description\":\"We know how to write bad code: litter our programs with casts, macros, pointers, naked new and deletes, and complicated control structures. Alternatively (or additionally), we could obscure every design decision in a mess of deeply nested abstractions using the latest object-oriented programming and generic programming tricks. Then, for good measure, we might complicate our algorithms with interesting special cases. Such code is incomprehensible, unmaintainable, usually inefficient, and not uncommon.\\n\\nBut how do we write good code? What principles, techniques, and idioms can we exploit to make it easier to produce quality code? In this presentation, I make an argument for type-rich interfaces, compact data structures, integrated resource management and error handling, and highly-structured algorithmic code. I illustrate my ideas and guidelines with a few idiomatic code examples.\\n\\nI use C++11 freely. Examples include auto, general constant expressions, uniform initialization, type aliases, type safe threading, and user-defined literals. C++11 features are only just starting to appear in production compilers, so some of my suggestions are conjecture. Developing a \\\"modern style,\\\" however, is essential if we don't want to maintain newly-written 1970s and 1980s style code in 2020.\\n\\nThis presentation reflects my thoughts on what \\\"Modern C++\\\" should mean in the 2010s: a language for programming based on light-weight abstraction with direct and efficient mapping to hardware, suitable for infrastructure code.\",\"meta\":{\"duration\":\"PT1H29M48S\"},\"presenter\":{\"name\":\"Bjarne Stroustrup\"},\"source\":{\"id\":\"0iWb_qi2-uI\",\"provider\":\"youtube\"},\"slug\":\"keynote-goingnative-2012\",\"tag\":[\"C++\",\"GoingNative\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/0iWb_qi2-uI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Keynote GoingNative 2012 C++\"}},{\"node\":{\"description\":\"Erlang is ideally suited building scalable, fault tolerant systems with minimal investment. It can be used for any conceivable application - not just telecom. It has a multi-decade track record of success. So why does it remain a niche technology?\\n\\nTo answer this question, Garrett turned to science. He conducted a detailed survey across a wide spectrum of programmers, architects, and managers to gather data on this question. In this talk, Garrett will present his findings and reflect on what they could mean for Erlang and its community.\\n\\nErlang adoption is important. It makes your job easier when Erlang is supported by your company and customers. It's easier to grow teams when there are more Erlang programmers. The language itself will improve as it is applied across more domains. If you're interested in this topic - and want data rather than personal opinions - join Garrett in this important discussion.\\n\\nTalk objectives:\\n\\n- To present data to better understand how Erlang is used and, more importantly, how and why Erlang is not used.\\n\\nTarget audience:\\n\\n- Anyone interested in supporting and promoting Erlang adoption, either within their company or within the broader programming community.\",\"meta\":{\"duration\":\"PT51M55S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"3MvKLOecT1I\",\"provider\":\"youtube\"},\"slug\":\"garrett-smith-why-the-cool-kids-dont-use-erlang\",\"tag\":[\"Erlang\",\"Erlang User Conference\",\"Garrett Smith\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/3MvKLOecT1I/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Garrett Smith - Why The Cool Kids Don't Use Erlang\"}},{\"node\":{\"description\":\"Hartmut Kaisers Keynote from Meeting C++ 2014\\n\\nSlides:\\nhttp://meetingcpp.com/index.php/tv14/items/26.html\",\"meta\":{\"duration\":\"PT1H27M36S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"4OCUEgSNIAY\",\"provider\":\"youtube\"},\"slug\":\"plain-threads-are-the-goto-of-todays-computing-hartmut-kaiser-keynote-meeting-c-2014\",\"tag\":[\"Software (Industry)\",\"C (Programming Language)\",\"C++\",\"Meeting C++\",\"Keynote\",\"Parallelism\",\"Concurrency\",\"Threading\",\"Thread\",\"HPX\",\"Meeting C++ 2014\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/4OCUEgSNIAY/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Plain Threads are the GOTO of todays computing - Hartmut Kaiser - Keynote Meeting C++ 2014\"}},{\"node\":{\"description\":\"Systems get bigger, technologies reach further, practices mature, advice changes... or at least some of it does. Some guidance remains unaffected by the passing of paradigms, the evolution of technology or the scaling of development: break your software into small, cohesive parts defined by clear interfaces and sound implementations, all the while striving for simplicity. The excuses for not doing so are as predictable as they are problematic. But if you want to create legacy code, make sure code is arbitrarily partitioned into large, incoherent parts characterised by unwieldy interfaces and incomprehensible implementations.\\nWhile there are many definitions of what a legacy system is, common to almost all perceptions of a legacy system is the concept of size — specifically, lots of it. The phrase 'small legacy system' can be considered an oxymoron. This talk sets out to re-assess and reassert the importance of thinking and implementing small as an essential property of software systems — yes, even the large ones.\",\"meta\":{\"duration\":\"PT1H7M3S\"},\"presenter\":{\"name\":\"Kevlin Henney\"},\"source\":{\"id\":\"B3b4tremI5o\",\"provider\":\"youtube\"},\"slug\":\"small-is-beautiful\",\"tag\":[\"GOTO Conference\",\"Keynote\",\"GOTO Copenhagen\",\"Scaling\",\"Legacy System\",\"Simplicity\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/B3b4tremI5o/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Small Is Beautiful\"}},{\"node\":{\"description\":\"Aaron Swartz keynote - \\\"How we stopped SOPA\\\"  at F2C:Freedom to Connect 2012, Washington DC on May 21 2012.\\n\\nhttp://freedom-to-connect.net/\",\"meta\":{\"duration\":\"PT22M52S\"},\"presenter\":{\"name\":\"Aaron Swartz\"},\"source\":{\"id\":\"Fgh2dFngFsg\",\"provider\":\"youtube\"},\"slug\":\"f2c2012-aaron-swartz-keynote-how-we-stopped-sopa\",\"tag\":[\"SOPA\",\"freedom to connect\",\"internet freedom\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/Fgh2dFngFsg/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"\\\"How we stopped SOPA\\\"\"}},{\"node\":{\"description\":\"This presentation was recorded at GOTO Copenhagen 2015\\nhttp://gotocph.com\\n\\nErik Meijer - Founder at Applied Duality, Inc.\\n\\nABSTRACT\\nErik challenges the basic ideas on Scrum & Agile and how developers should be developing code for the future. In the next decade every business will be digitized and effectively become a software company. Leveraging software, and, in general, computational [...]\\nDownload slides and read the full abstract here:\\nhttp://gotocon.com/cph-2015/presentation/Keynote:%20One%20Hacker%20Way\\n\\nhttps://twitter.com/gotocph\\nhttps://www.facebook.com/GOTOConference\\nhttp://gotocon.com\",\"meta\":{\"duration\":\"PT55M37S\"},\"presenter\":{\"name\":\"Erik Meijer\"},\"source\":{\"id\":\"FvMuPtuvP5w\",\"provider\":\"youtube\"},\"slug\":\"one-hacker-way\",\"tag\":[\"GOTO 2015\",\"Keynote\",\"Scrum\",\"Agile\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/FvMuPtuvP5w/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"One Hacker Way\"}},{\"node\":{\"description\":\"Erlang Factory SF Bay Area 2013\\nMore info and slides on the website: http://www.erlang-factory.com/conference/SFBay2013/talks\\n\\nWe all know that Erlang is great for building complicated distributed systems, but did you know that building a website in Erlang is as easy as using Ruby on Rails? In this talk I'll introduce you to Chicago Boss, the web framework that takes care of all the hard parts of Erlang/OTP for you, letting the developer focus on building a great website. I'll explain why Erlang is an excellent choice for delivering web content, give a high-level overview of the Chicago Boss architecture, and explicate the philosophy behind some of CB's controversial design decisions. In the process we'll cover CB's high-performance template system, its custom compiler chain and language-integrated query syntax, its unique approaches to e-mail and i18n, and everything in between. Some practical code examples will be included at the end. All levels of expertise are welcome.\",\"meta\":{\"duration\":\"PT45M59S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"LGGo6bIuj8w\",\"provider\":\"youtube\"},\"slug\":\"chicago-boss-a-web-framework-built-for-comfort-and-speed-evan-miller\",\"tag\":[\"Erlang\",\"Erlang Factory\",\"Chicago Boss\",\"Evan Miller\",\"Ruby on Rails\",\"Web Framework\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/LGGo6bIuj8w/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Chicago Boss: A Web Framework Built for Comfort (and Speed) - Evan Miller\"}},{\"node\":{\"description\":\"Deployment Options: How To Ship New Code Without Taking Your System Down\\n\\nErlang is quite famous for long-running interruption-free installations. But how is this achieved in practice while still evolving the software?\\n\\nWe will look at different deployment options, from simple to advanced:\\n\\n1. Deployment by restart\\n\\n2. Hot code reloading\\n\\n3. Release handling\\n\\nSee hot code reloading in action and learn how to avoid common traps & pitfalls.\\n\\nTalk objectives: By the end of this talk you shall be able to decide: Which strategy is right for me? What do I have to consider?\\n\\nTarget audience: General familiarity with Erlang is assumed.\",\"meta\":{\"duration\":\"PT32M47S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"NfCLCmRi4_Y\",\"provider\":\"youtube\"},\"slug\":\"martin-rehfeld-how-to-ship-new-code-without-taking-your-system-down-berlin-erlang-factory-lite\",\"tag\":[\"Erlang\",\"Martin Rehfeld\",\"Deployment Options\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/NfCLCmRi4_Y/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Martin Rehfeld - How To Ship New Code Without Taking Your System Down -  Berlin Erlang Factory Lite\"}},{\"node\":{\"description\":\"Our increasingly complex needs have led us to build increasing complex software. We’ve done this in an incremental fashion, building code on top of code. We write understandable snippets of code built on programming languages we know well and then bundle them into program structures to perform complex tasks. This incremental process may seem to have low risk at the snippet level, but it leads to program structures that can be hundreds of millions of lines of code that is intractable to change, redesign, and understanding, nor in the end is it easy to design. It also leads to code with potentially unwanted emergent properties. Today, we know how to create programs that can create programming languages. So why not write software that closely follows the problem, without a programming language, then let other programs create the programming language to support it? If we apply this rethinking to the design process, both problems and solutions can be thought of in terms of relational str\",\"meta\":{\"duration\":\"PT1H7M19S\"},\"presenter\":{\"name\":\"Alan Kay\"},\"source\":{\"id\":\"QboI_1WJUlM\",\"provider\":\"youtube\"},\"slug\":\"rethinking-design-risk-and-software\",\"tag\":[\"Inspiring\",\"Keynote\",\"COFES 2012\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/QboI_1WJUlM/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Rethinking Design, Risk, and Software\"}}]}},\"pathContext\":{\"slug\":\"the-how-and-why-of-fitting-things-together-joe-armstrong\",\"tags\":[\"Erlang\",\"Erlang Factory\",\"Joe Armstrong\",\"Keynote\"]}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---talk-the-how-and-why-of-fitting-things-together-joe-armstrong-0e152af791da334f4a43.js","module.exports = {\"data\":{\"talkJson\":{\"description\":\"Erlang Factory SF Bay Area 2013\\nMore info and slides on the website: http://www.erlang-factory.com/conference/SFBay2013/talks\\n\\nSoftware is difficult because the parts don't fit together. Why is this? Can we do anything about this? And what's this got to do with Erlang? Come to my talk and you'll find out!\",\"meta\":{\"duration\":\"PT46M40S\"},\"presenter\":{\"name\":null},\"slug\":\"the-how-and-why-of-fitting-things-together-joe-armstrong\",\"source\":{\"id\":\"ed7A7r6DBsM\",\"provider\":\"youtube\"},\"tag\":[\"Erlang\",\"Erlang Factory\",\"Joe Armstrong\",\"Keynote\"],\"title\":\"The How and Why of Fitting Things Together - Joe Armstrong\"},\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"In this keynote speech from JaxConf 2012, Rich Hickey, creator of Clojure and founder of Datomic gives an awesome analysis of the changing way we think about values (not the philosphoical kind) in light of the increasing complexity of information technology and the advent of Big Data. The broad subject of the talk makes it worth watching for almost anyone in the programming world, and was one of the highlights of the JaxConf lineup.\",\"meta\":{\"duration\":\"PT31M44S\"},\"presenter\":{\"name\":\"Rich Hickey\"},\"source\":{\"id\":\"-6BsiVyC1kM\",\"provider\":\"youtube\"},\"slug\":\"the-value-of-values\",\"tag\":[\"JaxConf 2012\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/-6BsiVyC1kM/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"The Value of Values\"}},{\"node\":{\"description\":\"We know how to write bad code: litter our programs with casts, macros, pointers, naked new and deletes, and complicated control structures. Alternatively (or additionally), we could obscure every design decision in a mess of deeply nested abstractions using the latest object-oriented programming and generic programming tricks. Then, for good measure, we might complicate our algorithms with interesting special cases. Such code is incomprehensible, unmaintainable, usually inefficient, and not uncommon.\\n\\nBut how do we write good code? What principles, techniques, and idioms can we exploit to make it easier to produce quality code? In this presentation, I make an argument for type-rich interfaces, compact data structures, integrated resource management and error handling, and highly-structured algorithmic code. I illustrate my ideas and guidelines with a few idiomatic code examples.\\n\\nI use C++11 freely. Examples include auto, general constant expressions, uniform initialization, type aliases, type safe threading, and user-defined literals. C++11 features are only just starting to appear in production compilers, so some of my suggestions are conjecture. Developing a \\\"modern style,\\\" however, is essential if we don't want to maintain newly-written 1970s and 1980s style code in 2020.\\n\\nThis presentation reflects my thoughts on what \\\"Modern C++\\\" should mean in the 2010s: a language for programming based on light-weight abstraction with direct and efficient mapping to hardware, suitable for infrastructure code.\",\"meta\":{\"duration\":\"PT1H29M48S\"},\"presenter\":{\"name\":\"Bjarne Stroustrup\"},\"source\":{\"id\":\"0iWb_qi2-uI\",\"provider\":\"youtube\"},\"slug\":\"keynote-goingnative-2012\",\"tag\":[\"C++\",\"GoingNative\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/0iWb_qi2-uI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Keynote GoingNative 2012 C++\"}},{\"node\":{\"description\":\"Erlang is ideally suited building scalable, fault tolerant systems with minimal investment. It can be used for any conceivable application - not just telecom. It has a multi-decade track record of success. So why does it remain a niche technology?\\n\\nTo answer this question, Garrett turned to science. He conducted a detailed survey across a wide spectrum of programmers, architects, and managers to gather data on this question. In this talk, Garrett will present his findings and reflect on what they could mean for Erlang and its community.\\n\\nErlang adoption is important. It makes your job easier when Erlang is supported by your company and customers. It's easier to grow teams when there are more Erlang programmers. The language itself will improve as it is applied across more domains. If you're interested in this topic - and want data rather than personal opinions - join Garrett in this important discussion.\\n\\nTalk objectives:\\n\\n- To present data to better understand how Erlang is used and, more importantly, how and why Erlang is not used.\\n\\nTarget audience:\\n\\n- Anyone interested in supporting and promoting Erlang adoption, either within their company or within the broader programming community.\",\"meta\":{\"duration\":\"PT51M55S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"3MvKLOecT1I\",\"provider\":\"youtube\"},\"slug\":\"garrett-smith-why-the-cool-kids-dont-use-erlang\",\"tag\":[\"Erlang\",\"Erlang User Conference\",\"Garrett Smith\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/3MvKLOecT1I/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Garrett Smith - Why The Cool Kids Don't Use Erlang\"}},{\"node\":{\"description\":\"Hartmut Kaisers Keynote from Meeting C++ 2014\\n\\nSlides:\\nhttp://meetingcpp.com/index.php/tv14/items/26.html\",\"meta\":{\"duration\":\"PT1H27M36S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"4OCUEgSNIAY\",\"provider\":\"youtube\"},\"slug\":\"plain-threads-are-the-goto-of-todays-computing-hartmut-kaiser-keynote-meeting-c-2014\",\"tag\":[\"Software (Industry)\",\"C (Programming Language)\",\"C++\",\"Meeting C++\",\"Keynote\",\"Parallelism\",\"Concurrency\",\"Threading\",\"Thread\",\"HPX\",\"Meeting C++ 2014\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/4OCUEgSNIAY/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Plain Threads are the GOTO of todays computing - Hartmut Kaiser - Keynote Meeting C++ 2014\"}},{\"node\":{\"description\":\"Systems get bigger, technologies reach further, practices mature, advice changes... or at least some of it does. Some guidance remains unaffected by the passing of paradigms, the evolution of technology or the scaling of development: break your software into small, cohesive parts defined by clear interfaces and sound implementations, all the while striving for simplicity. The excuses for not doing so are as predictable as they are problematic. But if you want to create legacy code, make sure code is arbitrarily partitioned into large, incoherent parts characterised by unwieldy interfaces and incomprehensible implementations.\\nWhile there are many definitions of what a legacy system is, common to almost all perceptions of a legacy system is the concept of size — specifically, lots of it. The phrase 'small legacy system' can be considered an oxymoron. This talk sets out to re-assess and reassert the importance of thinking and implementing small as an essential property of software systems — yes, even the large ones.\",\"meta\":{\"duration\":\"PT1H7M3S\"},\"presenter\":{\"name\":\"Kevlin Henney\"},\"source\":{\"id\":\"B3b4tremI5o\",\"provider\":\"youtube\"},\"slug\":\"small-is-beautiful\",\"tag\":[\"GOTO Conference\",\"Keynote\",\"GOTO Copenhagen\",\"Scaling\",\"Legacy System\",\"Simplicity\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/B3b4tremI5o/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Small Is Beautiful\"}},{\"node\":{\"description\":\"Aaron Swartz keynote - \\\"How we stopped SOPA\\\"  at F2C:Freedom to Connect 2012, Washington DC on May 21 2012.\\n\\nhttp://freedom-to-connect.net/\",\"meta\":{\"duration\":\"PT22M52S\"},\"presenter\":{\"name\":\"Aaron Swartz\"},\"source\":{\"id\":\"Fgh2dFngFsg\",\"provider\":\"youtube\"},\"slug\":\"f2c2012-aaron-swartz-keynote-how-we-stopped-sopa\",\"tag\":[\"SOPA\",\"freedom to connect\",\"internet freedom\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/Fgh2dFngFsg/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"\\\"How we stopped SOPA\\\"\"}},{\"node\":{\"description\":\"This presentation was recorded at GOTO Copenhagen 2015\\nhttp://gotocph.com\\n\\nErik Meijer - Founder at Applied Duality, Inc.\\n\\nABSTRACT\\nErik challenges the basic ideas on Scrum & Agile and how developers should be developing code for the future. In the next decade every business will be digitized and effectively become a software company. Leveraging software, and, in general, computational [...]\\nDownload slides and read the full abstract here:\\nhttp://gotocon.com/cph-2015/presentation/Keynote:%20One%20Hacker%20Way\\n\\nhttps://twitter.com/gotocph\\nhttps://www.facebook.com/GOTOConference\\nhttp://gotocon.com\",\"meta\":{\"duration\":\"PT55M37S\"},\"presenter\":{\"name\":\"Erik Meijer\"},\"source\":{\"id\":\"FvMuPtuvP5w\",\"provider\":\"youtube\"},\"slug\":\"one-hacker-way\",\"tag\":[\"GOTO 2015\",\"Keynote\",\"Scrum\",\"Agile\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/FvMuPtuvP5w/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"One Hacker Way\"}},{\"node\":{\"description\":\"Erlang Factory SF Bay Area 2013\\nMore info and slides on the website: http://www.erlang-factory.com/conference/SFBay2013/talks\\n\\nWe all know that Erlang is great for building complicated distributed systems, but did you know that building a website in Erlang is as easy as using Ruby on Rails? In this talk I'll introduce you to Chicago Boss, the web framework that takes care of all the hard parts of Erlang/OTP for you, letting the developer focus on building a great website. I'll explain why Erlang is an excellent choice for delivering web content, give a high-level overview of the Chicago Boss architecture, and explicate the philosophy behind some of CB's controversial design decisions. In the process we'll cover CB's high-performance template system, its custom compiler chain and language-integrated query syntax, its unique approaches to e-mail and i18n, and everything in between. Some practical code examples will be included at the end. All levels of expertise are welcome.\",\"meta\":{\"duration\":\"PT45M59S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"LGGo6bIuj8w\",\"provider\":\"youtube\"},\"slug\":\"chicago-boss-a-web-framework-built-for-comfort-and-speed-evan-miller\",\"tag\":[\"Erlang\",\"Erlang Factory\",\"Chicago Boss\",\"Evan Miller\",\"Ruby on Rails\",\"Web Framework\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/LGGo6bIuj8w/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Chicago Boss: A Web Framework Built for Comfort (and Speed) - Evan Miller\"}},{\"node\":{\"description\":\"Deployment Options: How To Ship New Code Without Taking Your System Down\\n\\nErlang is quite famous for long-running interruption-free installations. But how is this achieved in practice while still evolving the software?\\n\\nWe will look at different deployment options, from simple to advanced:\\n\\n1. Deployment by restart\\n\\n2. Hot code reloading\\n\\n3. Release handling\\n\\nSee hot code reloading in action and learn how to avoid common traps & pitfalls.\\n\\nTalk objectives: By the end of this talk you shall be able to decide: Which strategy is right for me? What do I have to consider?\\n\\nTarget audience: General familiarity with Erlang is assumed.\",\"meta\":{\"duration\":\"PT32M47S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"NfCLCmRi4_Y\",\"provider\":\"youtube\"},\"slug\":\"martin-rehfeld-how-to-ship-new-code-without-taking-your-system-down-berlin-erlang-factory-lite\",\"tag\":[\"Erlang\",\"Martin Rehfeld\",\"Deployment Options\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/NfCLCmRi4_Y/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Martin Rehfeld - How To Ship New Code Without Taking Your System Down -  Berlin Erlang Factory Lite\"}},{\"node\":{\"description\":\"Our increasingly complex needs have led us to build increasing complex software. We’ve done this in an incremental fashion, building code on top of code. We write understandable snippets of code built on programming languages we know well and then bundle them into program structures to perform complex tasks. This incremental process may seem to have low risk at the snippet level, but it leads to program structures that can be hundreds of millions of lines of code that is intractable to change, redesign, and understanding, nor in the end is it easy to design. It also leads to code with potentially unwanted emergent properties. Today, we know how to create programs that can create programming languages. So why not write software that closely follows the problem, without a programming language, then let other programs create the programming language to support it? If we apply this rethinking to the design process, both problems and solutions can be thought of in terms of relational str\",\"meta\":{\"duration\":\"PT1H7M19S\"},\"presenter\":{\"name\":\"Alan Kay\"},\"source\":{\"id\":\"QboI_1WJUlM\",\"provider\":\"youtube\"},\"slug\":\"rethinking-design-risk-and-software\",\"tag\":[\"Inspiring\",\"Keynote\",\"COFES 2012\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/QboI_1WJUlM/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Rethinking Design, Risk, and Software\"}}]}},\"pathContext\":{\"slug\":\"the-how-and-why-of-fitting-things-together-joe-armstrong\",\"tags\":[\"Erlang\",\"Erlang Factory\",\"Joe Armstrong\",\"Keynote\"]}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/talk-the-how-and-why-of-fitting-things-together-joe-armstrong.json\n// module id = 3192\n// module chunks = 205167520423847"],"sourceRoot":""}