{"version":3,"sources":["webpack:///path---talk-fifth-racketcon-jack-firth-generic-syntax-expanders-and-extensible-macros-9da96f16ca4f60efbe30.js","webpack:///./.cache/json/talk-fifth-racketcon-jack-firth-generic-syntax-expanders-and-extensible-macros.json"],"names":["webpackJsonp","2997","module","exports","data","talkJson","description","meta","duration","presenter","name","slug","source","id","provider","tag","title","allTalkJson","pathContext","tags"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,UAAYC,YAAA,+jCAAAC,MAAqlCC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,KAAA,4EAAAC,QAA8FC,GAAA,cAAAC,SAAA,WAAwCC,OAAAC,MAAA,kFAAmGC,YAAA,MAAoBC,aAAgBP,KAAA,4EAAAQ","file":"path---talk-fifth-racketcon-jack-firth-generic-syntax-expanders-and-extensible-macros-9da96f16ca4f60efbe30.js","sourcesContent":["webpackJsonp([148019468558710],{\n\n/***/ 2997:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"talkJson\":{\"description\":\"Racket’s powerful syntax system allows things like pattern matching not only to be implemented as macros, but to be user-extensible as well. Match expanders, for example, allows users to extend Racket’s pattern matcher with arbitrary new patterns. This talk discusses a generalized approach to match-expanders and its uses in defining macros with embedded user-extensible syntax, and shows an application of this approach to Racket’s command line parsing forms.\\n\\nJack Firth works at Mindjet in San Francisco as a developer of enterprise web applications and as a mentor to his colleagues on functional programming, particularly its applications to a Node / Angular stack. He has been a professional software engineer for a year and a half, but first began programming nine years ago. He attended college for mechanical engineering at a young age. His programming-related interests outside work include multi-language architectures, CI, testing, obscure languages, static verification, and type systems. He also used to be a hobbyist game developer, and still is once in a blue moon.\",\"meta\":{\"duration\":\"PT16M27S\"},\"presenter\":{\"name\":null},\"slug\":\"fifth-racketcon-jack-firth-generic-syntax-expanders-and-extensible-macros\",\"source\":{\"id\":\"PoHGvY4RZ9U\",\"provider\":\"youtube\"},\"tag\":[],\"title\":\"(fifth RacketCon): Jack Firth — Generic Syntax Expanders and Extensible Macros\"},\"allTalkJson\":null},\"pathContext\":{\"slug\":\"fifth-racketcon-jack-firth-generic-syntax-expanders-and-extensible-macros\",\"tags\":[]}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---talk-fifth-racketcon-jack-firth-generic-syntax-expanders-and-extensible-macros-9da96f16ca4f60efbe30.js","module.exports = {\"data\":{\"talkJson\":{\"description\":\"Racket’s powerful syntax system allows things like pattern matching not only to be implemented as macros, but to be user-extensible as well. Match expanders, for example, allows users to extend Racket’s pattern matcher with arbitrary new patterns. This talk discusses a generalized approach to match-expanders and its uses in defining macros with embedded user-extensible syntax, and shows an application of this approach to Racket’s command line parsing forms.\\n\\nJack Firth works at Mindjet in San Francisco as a developer of enterprise web applications and as a mentor to his colleagues on functional programming, particularly its applications to a Node / Angular stack. He has been a professional software engineer for a year and a half, but first began programming nine years ago. He attended college for mechanical engineering at a young age. His programming-related interests outside work include multi-language architectures, CI, testing, obscure languages, static verification, and type systems. He also used to be a hobbyist game developer, and still is once in a blue moon.\",\"meta\":{\"duration\":\"PT16M27S\"},\"presenter\":{\"name\":null},\"slug\":\"fifth-racketcon-jack-firth-generic-syntax-expanders-and-extensible-macros\",\"source\":{\"id\":\"PoHGvY4RZ9U\",\"provider\":\"youtube\"},\"tag\":[],\"title\":\"(fifth RacketCon): Jack Firth — Generic Syntax Expanders and Extensible Macros\"},\"allTalkJson\":null},\"pathContext\":{\"slug\":\"fifth-racketcon-jack-firth-generic-syntax-expanders-and-extensible-macros\",\"tags\":[]}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/talk-fifth-racketcon-jack-firth-generic-syntax-expanders-and-extensible-macros.json\n// module id = 2997\n// module chunks = 148019468558710"],"sourceRoot":""}