{"version":3,"sources":["webpack:///path---speaker-kevlin-henney-f46f80bb39ff115c512a.js","webpack:///./.cache/json/speaker-kevlin-henney.json"],"names":["webpackJsonp","1903","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext","speaker"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,wgCAAAC,MAA8hCC,SAAA,YAAsBC,WAAcC,KAAA,iBAAuBC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,qBAAAC,KAAA,sFAAAC,YAAwIC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,wBAAiChB,MAAQC,YAAA,4nBAAAC,MAAkpBC,SAAA,cAAwBC,WAAcC,KAAA,iBAAuBC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,+FAAAC,KAAA,gCAAAC,YAA4JC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,kGAA2GhB,MAAQC,YAAA,2iBAAAC,MAAikBC,SAAA,YAAsBC,WAAcC,KAAA,iBAAuBC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,sDAAAC,KAAA,2CAAAC,YAA8HC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,yDAAkEhB,MAAQC,YAAA,2OAAAC,MAAiQC,SAAA,aAAuBC,WAAcC,KAAA,iBAAuBC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,iBAAAC,KAAA,wBAAAC,YAAsEC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,wBAAkCC,aAAgBC,QAAA","file":"path---speaker-kevlin-henney-f46f80bb39ff115c512a.js","sourcesContent":["webpackJsonp([47377671467474],{\n\n/***/ 1903:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Systems get bigger, technologies reach further, practices mature, advice changes... or at least some of it does. Some guidance remains unaffected by the passing of paradigms, the evolution of technology or the scaling of development: break your software into small, cohesive parts defined by clear interfaces and sound implementations, all the while striving for simplicity. The excuses for not doing so are as predictable as they are problematic. But if you want to create legacy code, make sure code is arbitrarily partitioned into large, incoherent parts characterised by unwieldy interfaces and incomprehensible implementations.\\nWhile there are many definitions of what a legacy system is, common to almost all perceptions of a legacy system is the concept of size — specifically, lots of it. The phrase 'small legacy system' can be considered an oxymoron. This talk sets out to re-assess and reassert the importance of thinking and implementing small as an essential property of software systems — yes, even the large ones.\",\"meta\":{\"duration\":\"PT1H7M3S\"},\"presenter\":{\"name\":\"Kevlin Henney\"},\"source\":{\"id\":\"B3b4tremI5o\",\"provider\":\"youtube\"},\"slug\":\"small-is-beautiful\",\"tag\":[\"GOTO Conference\",\"Keynote\",\"GOTO Copenhagen\",\"Scaling\",\"Legacy System\",\"Simplicity\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/B3b4tremI5o/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Small Is Beautiful\"}},{\"node\":{\"description\":\"It is all to easy to dismiss problematic codebases on some nebulous idea of bad practice or bad programmers. Poor code, however, is rarely arbitrary and random in its structure or formulation. Systems of code, well or poorly structured, emerge from systems of practice, whether effective or ineffective. To improve code quality, it makes more sense to pick apart the specific practices and see their interplay — the cause — than to simply focus on the code itself — the effect. This talk looks at how a handful of coding habits, design practices and assumptions can systematically balloon code and compound its accidental complexity.\",\"meta\":{\"duration\":\"PT1H11M23S\"},\"presenter\":{\"name\":\"Kevlin Henney\"},\"source\":{\"id\":\"FyCYva9DhsI\",\"provider\":\"youtube\"},\"slug\":\"clean-coders-hate-what-happens-to-your-code-when-you-use-these-enterprise-programming-tricks\",\"tag\":[\"NDC Conferences\",\"Clean Code\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/FyCYva9DhsI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Clean Coders Hate What Happens to Your Code When You Use These Enterprise Programming Tricks\"}},{\"node\":{\"description\":\"Habits help you manage the complexity of code. You apply existing skill and knowledge automatically to the detail while focusing on the bigger picture. But because you acquire habits largely by imitation, and rarely question them, how do you know your habits are effective? Many of the habits that programmers have for naming, formatting, commenting and unit testing do not stand up as rational and practical on closer inspection. Kevlin Henney examines seven coding habits that are not as effective as programmers believe, and to suggest alternatives.\",\"meta\":{\"duration\":\"PT46M29S\"},\"presenter\":{\"name\":\"Kevlin Henney\"},\"source\":{\"id\":\"ZsHMHukIlJY\",\"provider\":\"youtube\"},\"slug\":\"seven-ineffective-coding-habits-of-many-programmers\",\"tag\":[\"Software Architecture\",\"Software Design\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/ZsHMHukIlJY/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Seven Ineffective Coding Habits of Many Programmers\"}},{\"node\":{\"description\":\"This talk considers the act of programming and those who do it and want to get better at it, from the perspective of the development process to craft, from architecture to code. Get more information about Mobiconf and Kevlin Henney.\",\"meta\":{\"duration\":\"PT1H3M11S\"},\"presenter\":{\"name\":\"Kevlin Henney\"},\"source\":{\"id\":\"sVTs4_1ts_c\",\"provider\":\"youtube\"},\"slug\":\"the-programmer\",\"tag\":[\"Mobiconf\",\"Inspiring\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/sVTs4_1ts_c/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"\\\"The programmer\\\"\"}}]}},\"pathContext\":{\"speaker\":\"Kevlin Henney\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---speaker-kevlin-henney-f46f80bb39ff115c512a.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Systems get bigger, technologies reach further, practices mature, advice changes... or at least some of it does. Some guidance remains unaffected by the passing of paradigms, the evolution of technology or the scaling of development: break your software into small, cohesive parts defined by clear interfaces and sound implementations, all the while striving for simplicity. The excuses for not doing so are as predictable as they are problematic. But if you want to create legacy code, make sure code is arbitrarily partitioned into large, incoherent parts characterised by unwieldy interfaces and incomprehensible implementations.\\nWhile there are many definitions of what a legacy system is, common to almost all perceptions of a legacy system is the concept of size — specifically, lots of it. The phrase 'small legacy system' can be considered an oxymoron. This talk sets out to re-assess and reassert the importance of thinking and implementing small as an essential property of software systems — yes, even the large ones.\",\"meta\":{\"duration\":\"PT1H7M3S\"},\"presenter\":{\"name\":\"Kevlin Henney\"},\"source\":{\"id\":\"B3b4tremI5o\",\"provider\":\"youtube\"},\"slug\":\"small-is-beautiful\",\"tag\":[\"GOTO Conference\",\"Keynote\",\"GOTO Copenhagen\",\"Scaling\",\"Legacy System\",\"Simplicity\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/B3b4tremI5o/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Small Is Beautiful\"}},{\"node\":{\"description\":\"It is all to easy to dismiss problematic codebases on some nebulous idea of bad practice or bad programmers. Poor code, however, is rarely arbitrary and random in its structure or formulation. Systems of code, well or poorly structured, emerge from systems of practice, whether effective or ineffective. To improve code quality, it makes more sense to pick apart the specific practices and see their interplay — the cause — than to simply focus on the code itself — the effect. This talk looks at how a handful of coding habits, design practices and assumptions can systematically balloon code and compound its accidental complexity.\",\"meta\":{\"duration\":\"PT1H11M23S\"},\"presenter\":{\"name\":\"Kevlin Henney\"},\"source\":{\"id\":\"FyCYva9DhsI\",\"provider\":\"youtube\"},\"slug\":\"clean-coders-hate-what-happens-to-your-code-when-you-use-these-enterprise-programming-tricks\",\"tag\":[\"NDC Conferences\",\"Clean Code\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/FyCYva9DhsI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Clean Coders Hate What Happens to Your Code When You Use These Enterprise Programming Tricks\"}},{\"node\":{\"description\":\"Habits help you manage the complexity of code. You apply existing skill and knowledge automatically to the detail while focusing on the bigger picture. But because you acquire habits largely by imitation, and rarely question them, how do you know your habits are effective? Many of the habits that programmers have for naming, formatting, commenting and unit testing do not stand up as rational and practical on closer inspection. Kevlin Henney examines seven coding habits that are not as effective as programmers believe, and to suggest alternatives.\",\"meta\":{\"duration\":\"PT46M29S\"},\"presenter\":{\"name\":\"Kevlin Henney\"},\"source\":{\"id\":\"ZsHMHukIlJY\",\"provider\":\"youtube\"},\"slug\":\"seven-ineffective-coding-habits-of-many-programmers\",\"tag\":[\"Software Architecture\",\"Software Design\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/ZsHMHukIlJY/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Seven Ineffective Coding Habits of Many Programmers\"}},{\"node\":{\"description\":\"This talk considers the act of programming and those who do it and want to get better at it, from the perspective of the development process to craft, from architecture to code. Get more information about Mobiconf and Kevlin Henney.\",\"meta\":{\"duration\":\"PT1H3M11S\"},\"presenter\":{\"name\":\"Kevlin Henney\"},\"source\":{\"id\":\"sVTs4_1ts_c\",\"provider\":\"youtube\"},\"slug\":\"the-programmer\",\"tag\":[\"Mobiconf\",\"Inspiring\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/sVTs4_1ts_c/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"\\\"The programmer\\\"\"}}]}},\"pathContext\":{\"speaker\":\"Kevlin Henney\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/speaker-kevlin-henney.json\n// module id = 1903\n// module chunks = 47377671467474"],"sourceRoot":""}