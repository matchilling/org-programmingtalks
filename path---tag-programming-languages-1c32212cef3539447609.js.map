{"version":3,"sources":["webpack:///path---tag-programming-languages-1c32212cef3539447609.js","webpack:///./.cache/json/tag-programming-languages.json"],"names":["webpackJsonp","2596","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,+gBAAAC,MAAqiBC,SAAA,WAAqBC,WAAcC,KAAA,mBAAyBC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,wCAAAC,KAAA,8EAAAC,YAAmJC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,8BAAuChB,MAAQC,YAAA,6oCAAAC,MAAmqCC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,mFAAAC,KAAA,6FAAAC,YAA6MC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,2FAAoGhB,MAAQC,YAAA,ylEAAAC,MAAmnEC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,0DAAAC,KAAA,kIAAAC,YAAyNC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,+DAAuEC,aAAgBR,KAAA,wBAAAC,IAAA","file":"path---tag-programming-languages-1c32212cef3539447609.js","sourcesContent":["webpackJsonp([214672178685114],{\n\n/***/ 2596:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"This presentation was recorded at GOTO Berlin 2015\\nhttp://gotober.com\\n\\nKevin Goldsmith - Vice President, Engineering at Spotify\\n\\nABSTRACT\\nThe software industry used to be all about building monoliths: monolithic applications and services, with bing-bang product releasees. All that has now changed [...]\\nDownload slides and read the full abstract here:\\nhttp://gotocon.com/berlin-2015/presentation/Microservices%20@%20Spotify\\n\\nhttps://twitter.com/gotober\\nhttps://www.facebook.com/GOTOConference\\nhttp://gotocon.com\",\"meta\":{\"duration\":\"PT49M8S\"},\"presenter\":{\"name\":\"Kevin Goldsmith\"},\"source\":{\"id\":\"7LGPeBgNFuU\",\"provider\":\"youtube\"},\"slug\":\"microservices-spotify-kevin-goldsmith\",\"tag\":[\"GOTO Conference\",\"Berlin\",\"Microservices\",\"Spotify\",\"Programming Languages\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/7LGPeBgNFuU/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Microservices at Spotify\"}},{\"node\":{\"description\":\"Racket is the best programming language that embraces the premise that there is no best programming language. In other words, Racket is designed to support the creation of programming languages which can then be used to build programs. Using Racket, we have built program languages ranging from large, general-purpose languages matching particular programming paradigms to small, specialized programming languages designed for just a single file in some larger program.\\n\\nIn this talk, I will bring across how it feels to program in such a language, discuss some of the technical support Racket has to make such programming practical, and show how Racket’s standard libraries have embraced this perspective, enabling us to include lots of batteries.\\n\\nRobby is an associate professor of computer science at Northwestern University and received his PhD from Rice University in 2002. He is the author or two textbooks, one on introductory programming and one on operational semantics. Robby is one of the core developers of Racket and has helped shape the design the language since its inception in 1994.\\n\\nFor more on Lambda Jam, visit http://www.lambdajam.com\",\"meta\":{\"duration\":\"PT51M43S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"hFlIl0Zo234\",\"provider\":\"youtube\"},\"slug\":\"lambda-jam-2015-robby-findler-racket-a-programming-language-programming-language\",\"tag\":[\"Robby Findler\",\"Lambda Jam 2015\",\"Racket\",\"Programming Languages\",\"Functional Programming\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/hFlIl0Zo234/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Lambda Jam 2015 - Robby Findler - Racket: A Programming-Language Programming Language\"}},{\"node\":{\"description\":\"Meetup: http://www.meetup.com/papers-we-love/events/220021234/\\nPaper: https://www.cs.utah.edu/plt/publications/macromod.pdf\\nSlides: http://bit.ly/1KNwpjC\\nAudio: https://www.mixcloud.com/paperswelove/sam-tobin-hochstadt-on-composable-and-compilable-macros/\\n--------------------------------------------------------------------------------------------------------------------------------------------------\\nSponsored by Two Sigma (@twosigma), The Ladders (@TheLaddersDev), and LispNYC (@lispnyc)\\n--------------------------------------------------------------------------------------------------------------------------------------------------\\n\\nDescription\\n---------------\\n\\\"Composable and Compilable Macros\\\" introduces the Racket module system, which addresses the following problem: When you have macros that run programs at compile-time, how does this interact with separate compilation and ahead-of-time compilation. The paper introduces \\\"phases\\\", which enable Racket to behave the same regardless of when and how you compile your program. It also introduces the idea of writing different modules in different languages, which is now used for systems like Typed Racket.\\n\\nA few related papers:\\n\\n- Syntactic Abstraction in Scheme, Dybvig Hieb & Bruggeman, Lisp andSymbolic Computation 1993\\n\\n- Macros that Work Together, Flatt, Findler, Culpepper, & Darais, JFP 2012- Submodules in Racket, Flatt GPCE 2013\\n\\n- Implicit phasing for R6RS libraries,  Ghuloum & Dybvig, ICFP 2007\\n\\n- Extending the scope of syntactic abstraction, Waddell & Dybvig, POPL 1999 \\n\\nBio\\n----\\nSam Tobin-Hochstadt (@samth) is an Assistant Professor in the School of Informatics and Computing at Indiana University. He has worked on dynamic languages, type systems, module systems, and metaprogramming, including creating the Typed Racket system and popularizing the phrase “scripts to programs.” He is a member of the ECMA TC39 working group responsible for standardizing JavaScript, where he co-designed the module system for ES6, the next version of JavaScript. He received his PhD in 2010 from Northeastern University under Matthias Felleisen.\",\"meta\":{\"duration\":\"PT54M49S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"pK2E63mhRxI\",\"provider\":\"youtube\"},\"slug\":\"sam-tobin-hochstadt-on-composable-and-compilable-macros\",\"tag\":[\"Computer Programming (Conference Subject)\",\"Programming Languages\",\"Macros\",\"Racket\",\"Modules\",\"Scheme\",\"Papers We Love\",\"ICFP\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/pK2E63mhRxI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Sam Tobin-Hochstadt on Composable and Compilable Macros\"}}]}},\"pathContext\":{\"slug\":\"programming-languages\",\"tag\":\"Programming Languages\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tag-programming-languages-1c32212cef3539447609.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"This presentation was recorded at GOTO Berlin 2015\\nhttp://gotober.com\\n\\nKevin Goldsmith - Vice President, Engineering at Spotify\\n\\nABSTRACT\\nThe software industry used to be all about building monoliths: monolithic applications and services, with bing-bang product releasees. All that has now changed [...]\\nDownload slides and read the full abstract here:\\nhttp://gotocon.com/berlin-2015/presentation/Microservices%20@%20Spotify\\n\\nhttps://twitter.com/gotober\\nhttps://www.facebook.com/GOTOConference\\nhttp://gotocon.com\",\"meta\":{\"duration\":\"PT49M8S\"},\"presenter\":{\"name\":\"Kevin Goldsmith\"},\"source\":{\"id\":\"7LGPeBgNFuU\",\"provider\":\"youtube\"},\"slug\":\"microservices-spotify-kevin-goldsmith\",\"tag\":[\"GOTO Conference\",\"Berlin\",\"Microservices\",\"Spotify\",\"Programming Languages\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/7LGPeBgNFuU/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Microservices at Spotify\"}},{\"node\":{\"description\":\"Racket is the best programming language that embraces the premise that there is no best programming language. In other words, Racket is designed to support the creation of programming languages which can then be used to build programs. Using Racket, we have built program languages ranging from large, general-purpose languages matching particular programming paradigms to small, specialized programming languages designed for just a single file in some larger program.\\n\\nIn this talk, I will bring across how it feels to program in such a language, discuss some of the technical support Racket has to make such programming practical, and show how Racket’s standard libraries have embraced this perspective, enabling us to include lots of batteries.\\n\\nRobby is an associate professor of computer science at Northwestern University and received his PhD from Rice University in 2002. He is the author or two textbooks, one on introductory programming and one on operational semantics. Robby is one of the core developers of Racket and has helped shape the design the language since its inception in 1994.\\n\\nFor more on Lambda Jam, visit http://www.lambdajam.com\",\"meta\":{\"duration\":\"PT51M43S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"hFlIl0Zo234\",\"provider\":\"youtube\"},\"slug\":\"lambda-jam-2015-robby-findler-racket-a-programming-language-programming-language\",\"tag\":[\"Robby Findler\",\"Lambda Jam 2015\",\"Racket\",\"Programming Languages\",\"Functional Programming\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/hFlIl0Zo234/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Lambda Jam 2015 - Robby Findler - Racket: A Programming-Language Programming Language\"}},{\"node\":{\"description\":\"Meetup: http://www.meetup.com/papers-we-love/events/220021234/\\nPaper: https://www.cs.utah.edu/plt/publications/macromod.pdf\\nSlides: http://bit.ly/1KNwpjC\\nAudio: https://www.mixcloud.com/paperswelove/sam-tobin-hochstadt-on-composable-and-compilable-macros/\\n--------------------------------------------------------------------------------------------------------------------------------------------------\\nSponsored by Two Sigma (@twosigma), The Ladders (@TheLaddersDev), and LispNYC (@lispnyc)\\n--------------------------------------------------------------------------------------------------------------------------------------------------\\n\\nDescription\\n---------------\\n\\\"Composable and Compilable Macros\\\" introduces the Racket module system, which addresses the following problem: When you have macros that run programs at compile-time, how does this interact with separate compilation and ahead-of-time compilation. The paper introduces \\\"phases\\\", which enable Racket to behave the same regardless of when and how you compile your program. It also introduces the idea of writing different modules in different languages, which is now used for systems like Typed Racket.\\n\\nA few related papers:\\n\\n- Syntactic Abstraction in Scheme, Dybvig Hieb & Bruggeman, Lisp andSymbolic Computation 1993\\n\\n- Macros that Work Together, Flatt, Findler, Culpepper, & Darais, JFP 2012- Submodules in Racket, Flatt GPCE 2013\\n\\n- Implicit phasing for R6RS libraries,  Ghuloum & Dybvig, ICFP 2007\\n\\n- Extending the scope of syntactic abstraction, Waddell & Dybvig, POPL 1999 \\n\\nBio\\n----\\nSam Tobin-Hochstadt (@samth) is an Assistant Professor in the School of Informatics and Computing at Indiana University. He has worked on dynamic languages, type systems, module systems, and metaprogramming, including creating the Typed Racket system and popularizing the phrase “scripts to programs.” He is a member of the ECMA TC39 working group responsible for standardizing JavaScript, where he co-designed the module system for ES6, the next version of JavaScript. He received his PhD in 2010 from Northeastern University under Matthias Felleisen.\",\"meta\":{\"duration\":\"PT54M49S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"pK2E63mhRxI\",\"provider\":\"youtube\"},\"slug\":\"sam-tobin-hochstadt-on-composable-and-compilable-macros\",\"tag\":[\"Computer Programming (Conference Subject)\",\"Programming Languages\",\"Macros\",\"Racket\",\"Modules\",\"Scheme\",\"Papers We Love\",\"ICFP\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/pK2E63mhRxI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Sam Tobin-Hochstadt on Composable and Compilable Macros\"}}]}},\"pathContext\":{\"slug\":\"programming-languages\",\"tag\":\"Programming Languages\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tag-programming-languages.json\n// module id = 2596\n// module chunks = 214672178685114"],"sourceRoot":""}