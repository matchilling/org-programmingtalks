{"version":3,"sources":["webpack:///path---tag-googletechtalks-92cdfdb79744b1acc4d7.js","webpack:///./.cache/json/tag-googletechtalks.json"],"names":["webpackJsonp","2320","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,2dAAAC,MAAmfC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,iDAAAC,KAAA,mBAAAC,YAAiGC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,qDAA8DhB,MAAQC,YAAA,syFAAAC,MAA+zFC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,kCAAAC,KAAA,mBAAAC,YAAkFC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,uCAA+CC,aAAgBR,KAAA,kBAAAC,IAAA","file":"path---tag-googletechtalks-92cdfdb79744b1acc4d7.js","sourcesContent":["webpackJsonp([68787507097447],{\n\n/***/ 2320:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Google Tech Talks\\r\\nJuly 1, 2008\\r\\n\\r\\nABSTRACT\\r\\n\\r\\n\\\"Python behind the scenes\\\": some advanced aspects of Python.\\r\\n\\r\\nThe talk addresses an audience of proficient Python programmers and deals with several advanced topics: object creation: metaclasses, new, and init - attribute lookup mechanics and descriptor objects - introspection on objects, garbage collection, stack frames, tracebacks - Python bytecode inspection and alteration.\\r\\n\\r\\nSpeaker: Alex Martelli\",\"meta\":{\"duration\":\"PT59M36S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"23s9Wc3aWGY\",\"provider\":\"youtube\"},\"slug\":\"slightly-advanced-python-some-python-internals\",\"tag\":[\"GoogleTechTalks\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/23s9Wc3aWGY/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Slightly Advanced Python: Some Python Internals\"}},{\"node\":{\"description\":\"Google Tech Talks\\nNovember,  7 2007\\n\\nABSTRACT\\n\\n We present a user-friendly approach to unifying program creation and execution, based on a notion of \\\"tangible values\\\" (TVs), which are visual and interactive manifestations of pure values, including functions. Programming happens by gestural composition of TVs. Our goal is to give end-users the ability to create parameterized, composable content without imposing the usual abstract and linguistic working style of programmers. We hope that such a system will put the essence of programming into the hands of many more people, and in particular people with artistic/visual creative style.\\n\\n In realizing this vision, we develop algebras for visual presentation and for \\\"deep\\\" function application, where function and argument may both be nested within a structure of tuples, functions, etc. Composition gestures are translated into chains of combinators that act simultaneously on statically typed values and their visualizations.\\n\\n\\nSpeaker: Conal Elliott\\nMost of my research is aimed at supporting the creation of interactive synthetic media content, including computer animation, human-computer interaction, images, 2D and 3D geometry, and programmable shaders. In all cases, I aim to preserve or improve on the flexibility and performance of mainstream programming approaches, while greatly simplifying the creation process.\\n\\nSynthetic media programs are almost always implemented in sequential, imperative (often object-oriented) languages. My research explores use of declarative languages, resulting in much simpler and more reusable and composable programs. These languages are also more amenable to execution on parallel architectures such as modern graphics processors, because declarative languages abstract away from order of execution, removing the accidental sequentiality found in imperative programs. Even on sequential machines, declarative formulations have much simpler mathematical semantics, which facilitates automatic optimization. They also tend to be spatially and temporally continuous (resolution-independent), allowing them to adapt naturally to machines with different speeds and display resolutions.\\n\\nAfter exploring explicit programming of synthetic media content for several years, I'm now also keenly interested in supporting artists. The goal of my new new research agenda is to give artists access to the expressive power of computers and programming languages, while retaining an artist's working style. I mean \\\"artist\\\" in a broad sense, in contrast to the verbal and sequential style of an engineer.  (I don't mean to suggest that people fit neatly into these two categories.) My ideal audience includes graphic designers, musicians, and children -- really, the playful and curious in all of us.\\n\\nThis abstract has 2796\\n\\nThis abstract has 2820\",\"meta\":{\"duration\":\"PT56M25S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"faJ8N0giqzw\",\"provider\":\"youtube\"},\"slug\":\"tangible-functional-programming\",\"tag\":[\"GoogleTechTalks\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/faJ8N0giqzw/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Tangible Functional Programming\"}}]}},\"pathContext\":{\"slug\":\"googletechtalks\",\"tag\":\"GoogleTechTalks\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tag-googletechtalks-92cdfdb79744b1acc4d7.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Google Tech Talks\\r\\nJuly 1, 2008\\r\\n\\r\\nABSTRACT\\r\\n\\r\\n\\\"Python behind the scenes\\\": some advanced aspects of Python.\\r\\n\\r\\nThe talk addresses an audience of proficient Python programmers and deals with several advanced topics: object creation: metaclasses, new, and init - attribute lookup mechanics and descriptor objects - introspection on objects, garbage collection, stack frames, tracebacks - Python bytecode inspection and alteration.\\r\\n\\r\\nSpeaker: Alex Martelli\",\"meta\":{\"duration\":\"PT59M36S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"23s9Wc3aWGY\",\"provider\":\"youtube\"},\"slug\":\"slightly-advanced-python-some-python-internals\",\"tag\":[\"GoogleTechTalks\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/23s9Wc3aWGY/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Slightly Advanced Python: Some Python Internals\"}},{\"node\":{\"description\":\"Google Tech Talks\\nNovember,  7 2007\\n\\nABSTRACT\\n\\n We present a user-friendly approach to unifying program creation and execution, based on a notion of \\\"tangible values\\\" (TVs), which are visual and interactive manifestations of pure values, including functions. Programming happens by gestural composition of TVs. Our goal is to give end-users the ability to create parameterized, composable content without imposing the usual abstract and linguistic working style of programmers. We hope that such a system will put the essence of programming into the hands of many more people, and in particular people with artistic/visual creative style.\\n\\n In realizing this vision, we develop algebras for visual presentation and for \\\"deep\\\" function application, where function and argument may both be nested within a structure of tuples, functions, etc. Composition gestures are translated into chains of combinators that act simultaneously on statically typed values and their visualizations.\\n\\n\\nSpeaker: Conal Elliott\\nMost of my research is aimed at supporting the creation of interactive synthetic media content, including computer animation, human-computer interaction, images, 2D and 3D geometry, and programmable shaders. In all cases, I aim to preserve or improve on the flexibility and performance of mainstream programming approaches, while greatly simplifying the creation process.\\n\\nSynthetic media programs are almost always implemented in sequential, imperative (often object-oriented) languages. My research explores use of declarative languages, resulting in much simpler and more reusable and composable programs. These languages are also more amenable to execution on parallel architectures such as modern graphics processors, because declarative languages abstract away from order of execution, removing the accidental sequentiality found in imperative programs. Even on sequential machines, declarative formulations have much simpler mathematical semantics, which facilitates automatic optimization. They also tend to be spatially and temporally continuous (resolution-independent), allowing them to adapt naturally to machines with different speeds and display resolutions.\\n\\nAfter exploring explicit programming of synthetic media content for several years, I'm now also keenly interested in supporting artists. The goal of my new new research agenda is to give artists access to the expressive power of computers and programming languages, while retaining an artist's working style. I mean \\\"artist\\\" in a broad sense, in contrast to the verbal and sequential style of an engineer.  (I don't mean to suggest that people fit neatly into these two categories.) My ideal audience includes graphic designers, musicians, and children -- really, the playful and curious in all of us.\\n\\nThis abstract has 2796\\n\\nThis abstract has 2820\",\"meta\":{\"duration\":\"PT56M25S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"faJ8N0giqzw\",\"provider\":\"youtube\"},\"slug\":\"tangible-functional-programming\",\"tag\":[\"GoogleTechTalks\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/faJ8N0giqzw/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Tangible Functional Programming\"}}]}},\"pathContext\":{\"slug\":\"googletechtalks\",\"tag\":\"GoogleTechTalks\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tag-googletechtalks.json\n// module id = 2320\n// module chunks = 68787507097447"],"sourceRoot":""}