{"version":3,"sources":["webpack:///path---speaker-ben-orenstein-0b1c338ee4e0bba7170a.js","webpack:///./.cache/json/speaker-ben-orenstein.json"],"names":["webpackJsonp","1874","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext","speaker"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,4jCAAyeC,MAAymBC,SAAA,YAAsBC,WAAcC,KAAA,iBAAuBC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,iCAAAC,KAAA,iDAAAC,YAA+GC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,oCAA6ChB,MAAQC,YAAA,6kBAAAC,MAAmmBC,SAAA,WAAqBC,WAAcC,KAAA,iBAAuBC,QAAWC,GAAA,eAAAC,SAAA,WAAyCC,KAAA,qCAAAC,KAAA,yBAAAC,YAA2FC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,2CAAmDC,aAAgBC,QAAA","file":"path---speaker-ben-orenstein-0b1c338ee4e0bba7170a.js","sourcesContent":["webpackJsonp([214223071935524],{\n\n/***/ 1874:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Most developers know enough about refactoring to write code that's pretty good. They create short methods, and classes with one responsibility. They're also familiar with a good handful of refactorings, and the code smells that motivate them.\\n\\nThis talk is about the next level of knowledge: the things advanced developers know that let them turn good code into great. Code that's easy to read and a breeze to change.\\n\\nThese topics will be covered solely by LIVE CODING; no slides. We'll boldly refactor right on stage, and pray the tests stay green. You might even learn some vim tricks as well as an expert user shows you his workflow.\\n\\nTopics include:\\n\\nThe Open-Closed Principle The types of coupling, and their dangers Why composition is so damn great A powerful refactoring that Kent Beck refers to as \\\"deep deep magic\\\" How to destroy conditionals with a NullObject The beauty of the Decorator pattern Testing smells, including Mystery Guest and stubbing the system under test The stuff from the last halves of Refactoring and Clean Code that you never quite got to.\",\"meta\":{\"duration\":\"PT44M19S\"},\"presenter\":{\"name\":\"Ben Orenstein\"},\"source\":{\"id\":\"DC-pQPq0acs\",\"provider\":\"youtube\"},\"slug\":\"refactoring-from-good-to-great\",\"tag\":[\"Aloha Ruby 2012\",\"Refactoring\",\"Ruby\",\"Hawaii\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/DC-pQPq0acs/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Refactoring from Good to Great\"}},{\"node\":{\"description\":\"This talk will make you much faster with vim. Most people that start learning vim get stuck in a rut right around low-intermediate. They can get everything done, but not very quickly. Lots of people never get any faster from here. This talk is targeted at users of vim aren't satisfied with where they are, and want to learn to write and edit code at breakneck speed. We'll focus on the knowledge and philosophy necessary to keep making huge leaps in efficiency and to approach expert status. Expect a talk jammed full of specific tips and general advice that you can apply immediately.\",\"meta\":{\"duration\":\"PT41M9S\"},\"presenter\":{\"name\":\"Ben Orenstein\"},\"source\":{\"id\":\"SkdrYWhh-8 s\",\"provider\":\"youtube\"},\"slug\":\"write-code-faster-expert-level-vim\",\"tag\":[\"Railsberry 2012\",\"VIM\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/SkdrYWhh-8s/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Write code faster: expert-level vim\"}}]}},\"pathContext\":{\"speaker\":\"Ben Orenstein\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---speaker-ben-orenstein-0b1c338ee4e0bba7170a.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Most developers know enough about refactoring to write code that's pretty good. They create short methods, and classes with one responsibility. They're also familiar with a good handful of refactorings, and the code smells that motivate them.\\n\\nThis talk is about the next level of knowledge: the things advanced developers know that let them turn good code into great. Code that's easy to read and a breeze to change.\\n\\nThese topics will be covered solely by LIVE CODING; no slides. We'll boldly refactor right on stage, and pray the tests stay green. You might even learn some vim tricks as well as an expert user shows you his workflow.\\n\\nTopics include:\\n\\nThe Open-Closed Principle The types of coupling, and their dangers Why composition is so damn great A powerful refactoring that Kent Beck refers to as \\\"deep deep magic\\\" How to destroy conditionals with a NullObject The beauty of the Decorator pattern Testing smells, including Mystery Guest and stubbing the system under test The stuff from the last halves of Refactoring and Clean Code that you never quite got to.\",\"meta\":{\"duration\":\"PT44M19S\"},\"presenter\":{\"name\":\"Ben Orenstein\"},\"source\":{\"id\":\"DC-pQPq0acs\",\"provider\":\"youtube\"},\"slug\":\"refactoring-from-good-to-great\",\"tag\":[\"Aloha Ruby 2012\",\"Refactoring\",\"Ruby\",\"Hawaii\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/DC-pQPq0acs/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Refactoring from Good to Great\"}},{\"node\":{\"description\":\"This talk will make you much faster with vim. Most people that start learning vim get stuck in a rut right around low-intermediate. They can get everything done, but not very quickly. Lots of people never get any faster from here. This talk is targeted at users of vim aren't satisfied with where they are, and want to learn to write and edit code at breakneck speed. We'll focus on the knowledge and philosophy necessary to keep making huge leaps in efficiency and to approach expert status. Expect a talk jammed full of specific tips and general advice that you can apply immediately.\",\"meta\":{\"duration\":\"PT41M9S\"},\"presenter\":{\"name\":\"Ben Orenstein\"},\"source\":{\"id\":\"SkdrYWhh-8 s\",\"provider\":\"youtube\"},\"slug\":\"write-code-faster-expert-level-vim\",\"tag\":[\"Railsberry 2012\",\"VIM\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/SkdrYWhh-8s/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Write code faster: expert-level vim\"}}]}},\"pathContext\":{\"speaker\":\"Ben Orenstein\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/speaker-ben-orenstein.json\n// module id = 1874\n// module chunks = 214223071935524"],"sourceRoot":""}