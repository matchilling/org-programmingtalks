{
  "description":
    "Racket’s powerful syntax system allows things like pattern matching not only to be implemented as macros, but to be user-extensible as well. Match expanders, for example, allows users to extend Racket’s pattern matcher with arbitrary new patterns. This talk discusses a generalized approach to match-expanders and its uses in defining macros with embedded user-extensible syntax, and shows an application of this approach to Racket’s command line parsing forms.\n\nJack Firth works at Mindjet in San Francisco as a developer of enterprise web applications and as a mentor to his colleagues on functional programming, particularly its applications to a Node / Angular stack. He has been a professional software engineer for a year and a half, but first began programming nine years ago. He attended college for mechanical engineering at a young age. His programming-related interests outside work include multi-language architectures, CI, testing, obscure languages, static verification, and type systems. He also used to be a hobbyist game developer, and still is once in a blue moon.",
  "id": "2e548e69-5cb2-4cea-86d4-aeff11405a35",
  "meta": { "duration": "PT16M27S" },
  "presenter": { "name": null },
  "slug":
    "fifth-racketcon-jack-firth-generic-syntax-expanders-and-extensible-macros",
  "source": { "id": "PoHGvY4RZ9U", "provider": "youtube" },
  "tag": [],
  "title":
    "(fifth RacketCon): Jack Firth — Generic Syntax Expanders and Extensible Macros",
  "thumbnails": {
    "default": {
      "url": "https://i.ytimg.com/vi/PoHGvY4RZ9U/default.jpg",
      "width": 120,
      "height": 90
    },
    "medium": {
      "url": "https://i.ytimg.com/vi/PoHGvY4RZ9U/mqdefault.jpg",
      "width": 320,
      "height": 180
    },
    "high": {
      "url": "https://i.ytimg.com/vi/PoHGvY4RZ9U/hqdefault.jpg",
      "width": 480,
      "height": 360
    }
  }
}
