{
  "description":
    "Systems get bigger, technologies reach further, practices mature, advice changes... or at least some of it does. Some guidance remains unaffected by the passing of paradigms, the evolution of technology or the scaling of development: break your software into small, cohesive parts defined by clear interfaces and sound implementations, all the while striving for simplicity. The excuses for not doing so are as predictable as they are problematic. But if you want to create legacy code, make sure code is arbitrarily partitioned into large, incoherent parts characterised by unwieldy interfaces and incomprehensible implementations.\nWhile there are many definitions of what a legacy system is, common to almost all perceptions of a legacy system is the concept of size — specifically, lots of it. The phrase 'small legacy system' can be considered an oxymoron. This talk sets out to re-assess and reassert the importance of thinking and implementing small as an essential property of software systems — yes, even the large ones.",
  "id": "cb34b6ad-7b24-42ca-95cf-e56a4663cbc3",
  "meta": {
    "duration": "PT1H7M3S"
  },
  "presenter": {
    "name": "Kevlin Henney"
  },
  "slug": "small-is-beautiful",
  "source": {
    "id": "B3b4tremI5o",
    "provider": "youtube"
  },
  "tag": [
    "GOTO Conference",
    "Keynote",
    "GOTO Copenhagen",
    "Scaling",
    "Legacy System",
    "Simplicity"
  ],
  "title": "Small Is Beautiful",
  "thumbnails": {
    "default": {
      "url": "https://i.ytimg.com/vi/B3b4tremI5o/default.jpg",
      "width": 120,
      "height": 90
    },
    "medium": {
      "url": "https://i.ytimg.com/vi/B3b4tremI5o/mqdefault.jpg",
      "width": 320,
      "height": 180
    },
    "high": {
      "url": "https://i.ytimg.com/vi/B3b4tremI5o/hqdefault.jpg",
      "width": 480,
      "height": 360
    }
  }
}
