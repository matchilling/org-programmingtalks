{
  "description":
    "People keep implementing map, filter and other fundamental algorithms in different contexts - eagerly over collections, over lazy sequences, in parallel, over enumerables/iterables, over observables, over channels/streams etc. In addition to duplication of effort, this yields bloated APIs, and, when implemented in the classic way, often involves the creation of expensive intermediate objects/values that\ncan be difficult to optimize away.\nMost problematic is that this approach keeps us from composing core algorithms in a context-independent way which would facilitate reuse and engender greater flexibility.\nThis talk will describe transducers, a new library feature for Clojure (but of interest to other languages) that emphasizes composable, context-free, intermediate-free notions like 'mapping' and 'filtering' and their concrete reuse across all of the contexts above.",
  "id": "c8073c20-642e-4b0a-a557-5d95174fa991",
  "meta": {
    "duration": "PT45M1S"
  },
  "presenter": {
    "name": "Rich Hickey"
  },
  "slug": "transducers",
  "source": {
    "id": "6mTbuzafcII",
    "provider": "youtube"
  },
  "tag": ["Clojure"],
  "title": "Transducers",
  "thumbnails": {
    "default": {
      "url": "https://i.ytimg.com/vi/6mTbuzafcII/default.jpg",
      "width": 120,
      "height": 90
    },
    "medium": {
      "url": "https://i.ytimg.com/vi/6mTbuzafcII/mqdefault.jpg",
      "width": 320,
      "height": 180
    },
    "high": {
      "url": "https://i.ytimg.com/vi/6mTbuzafcII/hqdefault.jpg",
      "width": 480,
      "height": 360
    }
  }
}
