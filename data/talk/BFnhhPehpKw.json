{
  "description": "Abstract \nThe introduction of lambdas and first class function objects forever changed the nature of C++, opening up the floodgates to functional programming. Sometimes the best library design is based on a pattern that's very familiar to a Haskell programmer but alien to a C++ programmer. The new std::future proposal for C++17 hides several functional patterns including that of a monad -- the boogeyman of generations of imperative programmers. But once seen in action, the monad becomes just one more pattern in the toolbox of a library designer. \nBio\nBartosz Milewski always tries to be where the action is. He started as a quantum physicist when supertstrings were hot, joined the software industry to build the search engine for Microsoft Windows, became an avid proponent of object-oriented programming, and wrote a book on C++. He got into concurrency and parallelism when the multicores hit the market, and now he's evangelizing functional programming as the Holy Grail of software development.",
  "id": "28ac7037-032e-4fdc-a722-769dda2c3ff8",
  "meta": { "duration": "PT1H20M59S" },
  "presenter": { "name": null },
  "slug": "c17-i-see-a-monad-in-your-future",
  "source": { "id": "BFnhhPehpKw", "provider": "youtube" },
  "tag": [
    "NWCPP",
    "Bartosz Milewski",
    "Monad",
    "functional programming",
    "Haskel",
    "futures",
    "promise",
    "design patterns",
    "software development",
    "concurrent programming",
    "parallell programming"
  ],
  "title": "C++17: I See a Monad in Your Future",
  "thumbnails": {
    "default": {
      "url": "https://i.ytimg.com/vi/BFnhhPehpKw/default.jpg",
      "width": 120,
      "height": 90
    },
    "medium": {
      "url": "https://i.ytimg.com/vi/BFnhhPehpKw/mqdefault.jpg",
      "width": 320,
      "height": 180
    },
    "high": {
      "url": "https://i.ytimg.com/vi/BFnhhPehpKw/hqdefault.jpg",
      "width": 480,
      "height": 360
    }
  }
}
