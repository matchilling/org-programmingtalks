{
  "description": "Scala's type system allows us to enforce compile-time constraints on our programs, and to take advantage of these constraints to help reason about our code. Yet we still frequently encounter situations where extracting a value from a map is not guaranteed to succeed, or mapping across a set of cases is not guaranteed to be exhaustive. With dependent types we can make operations like these completely safe by construction, in the process eliminating entire classes of errors, and furthermore we can do this without complicating user code.\n\nAdditionally, with more precise type information becoming available at compile time, we elicit the exciting opportunity to use it to optimize performance at runtime, beyond what would be possible without dependent typing.\n\nThe talk will cover several simple and intermediate examples using dependent types, and will give a brief outline of some of the the challenges involved in implementing typesafe libraries with dependent types in Scala, but the majority of the talk will be accessible to all Scala users.",
  "id": "196142aa-41d5-46d4-9f36-c56840c96b45",
  "meta": { "duration": "PT59M28S" },
  "presenter": { "name": null },
  "slug": "minimizing-the-slippery-surface-of-failure-jon-pretty",
  "source": { "id": "26UHdZUsKkE", "provider": "youtube" },
  "tag": ["scala"],
  "title": "Minimizing the Slippery Surface of Failure â€” Jon Pretty",
  "thumbnails": {
    "default": {
      "url": "https://i.ytimg.com/vi/26UHdZUsKkE/default.jpg",
      "width": 120,
      "height": 90
    },
    "medium": {
      "url": "https://i.ytimg.com/vi/26UHdZUsKkE/mqdefault.jpg",
      "width": 320,
      "height": 180
    },
    "high": {
      "url": "https://i.ytimg.com/vi/26UHdZUsKkE/hqdefault.jpg",
      "width": 480,
      "height": 360
    }
  }
}
