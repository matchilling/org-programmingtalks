webpackJsonp([0x75356808eddd],{2730:function(e,a){e.exports={data:{allTalkJson:{edges:[{node:{description:"The time has come to think concurrently. Traditional software concurrency management leads to non-deterministic race conditions and deadlocks that are hard to reproduce and debug, leading to unreliable software. That means it's time to introduce math. Tony Hoare's paradigm of communicating sequential processes, or CSP, is not only a robust way to manage concurrency, but it's fun too! Join us to learn more about how CSP in the Go programming language allows us to reason more clearly about many things happening at once.\n\nAbout Eric:\n\nEric Shull is a software consultant and developer at Atomic Object. He enjoys working in Go and ClojureScript, writing, sketchnoting, doing math, creating data visualizations, making experimental programming languages, and much, much more.",meta:{duration:"PT43M22S"},presenter:{name:null},source:{id:"3gXWA6WEvOM",provider:"youtube"},slug:"eric-shull-communicating-sequential-processes-september-22-2015",tag:["Communicating Sequential Processes (Programming Language)","Eric Shull","Atomic Object","Programming Language","Programmer (Profession)","Software GR"],thumbnails:{default:{url:"https://i.ytimg.com/vi/3gXWA6WEvOM/default.jpg",height:90,width:120}},title:"Eric Shull: Communicating Sequential Processes (September 22, 2015)"}}]}},pathContext:{slug:"software-gr",tag:"Software GR"}}}});
//# sourceMappingURL=path---tag-software-gr-9a8a682ddcdae2fb6c6a.js.map