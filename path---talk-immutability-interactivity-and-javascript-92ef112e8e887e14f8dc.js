webpackJsonp([32266789175372],{2993:function(e,t){e.exports={data:{talkJson:{description:"This is a talk from Barcelona FutureJS 2014 (http://futurejs.org).\n\nSurprisingly the high performance mutation available in modern JavaScript engines is a great foundation for building high performance immutable collections. Even more surprisingly efficient immutable collections permit new ways of approaching user interface programming. While the details will be in Om, an immutable user interface toolkit written in ClojureScript over Facebook's React, the talk will be primarily focused on high level concepts easily ported to JavaScript. We'll dive in and see how trees of JavaScript arrays can permit building these efficient immutable collections. Then we'll see how embracing immutable values dramatically simplifies some classic hard problems in client side programming including but not limited to undo, error playback, and online/offline synchronization.",meta:{duration:"PT26M20S"},presenter:{name:"David Nolen"},slug:"immutability-interactivity-and-javascript",source:{id:"mS264h8KGwk",provider:"youtube"},tag:["JavaScript","Clojure","Immutability","FutureJS 2014"],title:"Immutability, interactivity & JavaScript"},allTalkJson:{edges:[{node:{description:'Games are a modern art form, and like other artists, game designers need to experience their work as they create it. This talk will explore the benefits of making games "at runtime". Through both abstract discussion and concrete demonstration, we will see why Clojure is uniquely suited to the task.\n\nZach is an independent programmer and tutor in the Pittsburgh area. He made Nightcode, a Clojure IDE for beginners, and is working to make Clojure games a reality with the play-clj library and Nightmod, a game creation tool. Previously, he was a programmer at the National Security Agency in Maryland.',meta:{duration:"PT37M34S"},presenter:{name:"Zach Oakes"},source:{id:"0GzzFeS5cMc",provider:"youtube"},slug:"making-games-at-runtime-with-clojure",tag:["Clojure","Game Programmer"],thumbnails:{default:{url:"https://i.ytimg.com/vi/0GzzFeS5cMc/default.jpg",height:90,width:120}},title:"Making Games at Runtime with Clojure"}},{node:{description:"NodeBots have been around for several years now, but with every presentation, there is always someone who asks, \"But... JavaScript?! Why on earth would you make robots with JavaScript?\"\n\nIt's a fair question, and one worthy of more than a hand-wavy answer about how it's cool... or something.\n\nIn this talk, let's discuss why, of all the languages on the planet, JavaScript is the perfect starting point for a future of robotics.\n\nAs a roboticist-turned-web-developer, I will provide some deep insights not only into the world of robotics, but also into JavaScript and its server-side cousin, Node.js. We'll talk about what JavaScript-enabled robots can already do, what they can't do yet, and what they might be able to do with a bit of elbow grease.\n\nAnd, if the demo deities are with us, we may even have a robot assistant on hand.\n\nRaquel Vélez\nNPM, INC.\n@rockbot\n\nRaquel Vélez is a Senior Software Developer at npm, Inc. in Oakland, CA. She has previously worked at institutions such as Caltech, NASA JPL, the MIT Lincoln Laboratory, and various universities in Europe. In her off time, you can find her baking, teaching NodeBots not to fall off of tables, and speaking. Also, hanging out with her hilarious husband and two cats dressed in dog suits.",meta:{duration:"PT36M27S"},presenter:{name:"Raquel Velez"},source:{id:"3v75aX5-gSA",provider:"youtube"},slug:"no-really-robots-and-javascript",tag:["JavaScript","Robot","Node.js"],thumbnails:{default:{url:"https://i.ytimg.com/vi/3v75aX5-gSA/default.jpg",height:90,width:120}},title:'"No, Really... Robots and JavaScript?!"'}},{node:{description:"People keep implementing map, filter and other fundamental algorithms in different contexts - eagerly over collections, over lazy sequences, in parallel, over enumerables/iterables, over observables, over channels/streams etc. In addition to duplication of effort, this yields bloated APIs, and, when implemented in the classic way, often involves the creation of expensive intermediate objects/values that\ncan be difficult to optimize away.\nMost problematic is that this approach keeps us from composing core algorithms in a context-independent way which would facilitate reuse and engender greater flexibility.\nThis talk will describe transducers, a new library feature for Clojure (but of interest to other languages) that emphasizes composable, context-free, intermediate-free notions like 'mapping' and 'filtering' and their concrete reuse across all of the contexts above.",meta:{duration:"PT45M1S"},presenter:{name:"Rich Hickey"},source:{id:"6mTbuzafcII",provider:"youtube"},slug:"transducers",tag:["Clojure"],thumbnails:{default:{url:"https://i.ytimg.com/vi/6mTbuzafcII/default.jpg",height:90,width:120}},title:"Transducers"}},{node:{description:"JavaScript programmers like to use words like, “event-loop”, “non-blocking”, “callback”, “asynchronous”, “single-threaded” and “concurrency”.\n\nWe say things like “don’t block the event loop”, “make sure your code runs at 60 frames-per-second”, “well of course, it won’t work, that function is an asynchronous callback!”\n\nIf you’re anything like me, you nod and agree, as if it’s all obvious, even though you don’t actually know what the words mean; and yet, finding good explanations of how JavaScript actually works isn’t all that easy, so let’s learn!\n\nWith some handy visualisations, and fun hacks, let’s get an intuitive understanding of what happens when JavaScript runs.\n\nTranscript: http://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html\n\nLicense: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.",meta:{duration:"PT26M53S"},presenter:{name:"Philip Roberts"},source:{id:"8aGhZQkoFbQ",provider:"youtube"},slug:"what-the-heck-is-the-event-loop-anyway",tag:["JavaScript","JSConf EU 2014"],thumbnails:{default:{url:"https://i.ytimg.com/vi/8aGhZQkoFbQ/default.jpg",height:90,width:120}},title:"What the heck is the event loop anyway?"}},{node:{description:"This talk speculates about the next language after JavaScript, and what to do in the mean time about some of the new features in ES6.\nThere will be an emphasis on simplicity and quality. The web is cluttered and full of errors. The talk will also touches on why you should subscribe to HBO.",meta:{duration:"PT54M13S"},presenter:{name:"Douglas Crockford"},source:{id:"99Zacm7SsWQ",provider:"youtube"},slug:"the-post-javascript-apocalypse",tag:["NDC Conferences","JavaScript","Web"],thumbnails:{default:{url:"https://i.ytimg.com/vi/99Zacm7SsWQ/default.jpg",height:90,width:120}},title:"The Post JavaScript Apocalypse"}},{node:{description:"In this talk, we hear from David Nolen from the New York Times about core.async, the new library for asynchronous programming in Clojure and ClojureScript. He'll be talking about Clojure, Communicating Sequential Processes & Responsive Design. This talk was recorded at the NY Clojure Users Group meetup at Two Sigma Investments.\n\nAs clients diversify on all fronts, how do we program flexible user interfaces without getting mired in software bloat and rampant complexity? Communicating Sequential Processes gives us the tools we need to design modular user interface components - we'll see how with Clojure, ClojureScript and core.async.",meta:{duration:"PT55M32S"},presenter:{name:"David Nolen"},source:{id:"AhxcGGeh5ho",provider:"youtube"},slug:"coreasync-for-asynchronous-programming",tag:["Clojure","Asynchronous Programming"],thumbnails:{default:{url:"https://i.ytimg.com/vi/AhxcGGeh5ho/default.jpg",height:90,width:120}},title:"Clojure Library Core.async for Asynchronous Programming"}},{node:{description:'How do we resolve the question, "is this better than that?" This talk discusses ideas for improving how we handle conflict in the programming community through the lens of evaluating whether Node.js is better than other technologies like Ruby.',meta:{duration:"PT41M43S"},presenter:{name:"Brian Ford"},source:{id:"C5fa1LZYodQ",provider:"youtube"},slug:"is-nodejs-better",tag:["JSConf US 2012","Node.js","Ruby On Rails","JavaScript"],thumbnails:{default:{url:"https://i.ytimg.com/vi/C5fa1LZYodQ/default.jpg",height:90,width:120}},title:"Is Node.js Better?"}},{node:{description:"The Model-View-Controller (MVC) approach to user interfaces was first proposed by Trygve Reenskaug in a 1979 Xerox PARC note. As Object Oriented methodologies gained popularity, MVC too gained traction as a natural and logical way to construct user interfaces despite obvious shortcomings. Even though OO researchers moved forward with alternative approaches likes Morphic and constraint based systems, MVC today maintains a stranglehold on mainstream developer approaches to UI.\n\nCan functional programming take the good lessons from MVC while advancing the state of the art? Functional Reactive Programming and its derivatives primarily solve complexities around events - what of component modularity and abstraction?\n\nWe'll examine how a new library for ClojureScript called Om, a simple functional layer over Facebook's React, makes some traditional hard problems in MVC based UIs simple without abandoning the abstractions OO programmers find so useful. These concepts are easily portable to other systems provided the presence of persistent data structures.",meta:{duration:"PT27M2S"},presenter:{name:"David Nolen"},source:{id:"DMtwq3QtddY",provider:"youtube"},slug:"the-functional-final-frontier",tag:["Clojure","Functional Programming"],thumbnails:{default:{url:"https://i.ytimg.com/vi/DMtwq3QtddY/default.jpg",height:90,width:120}},title:"The Functional Final Frontier"}},{node:{description:"Jafar Husain discusses interesting features that can be used today in JS6, such as Object.observe, async functions and async generators, while also giving a peek at what's being explored for JS7 to make async programming easier.",meta:{duration:"PT1H11M54S"},presenter:{name:null},source:{id:"DqMFX91ToLw",provider:"youtube"},slug:"netflix-javascript-talks-version-7-the-evolution-of-javascript",tag:["netflix","JavaScript","reactive programming","Web Development (Interest)","netflix ui engineering"],thumbnails:{default:{url:"https://i.ytimg.com/vi/DqMFX91ToLw/default.jpg",height:90,width:120}},title:"Netflix JavaScript Talks - Version 7: The Evolution of JavaScript"}},{node:{description:"Jafar Husain shares how Netflix uses the Reactive Extensions (Rx) library to build responsive user experiences that strive to be event-driven, scalable and resilient. Learn the power of the Observable and how Netflix has simplified code through the ability to filter, aggregate, compose and project data streams.\n\nThis talk discusses how Netflix uses Rx to:\n- Declaratively build complex events out of simple events (ex. drag and drop)\n- Coordinate and sequence multiple Ajax requests\n- Reactively update the UI in response to data changes\n- Eliminate memory leaks caused by neglecting to unsubscribe from events\n- Gracefully propagate and handle asynchronous exceptions\n\nSlides: http://www.slideboom.com/presentations/1002549/Async-Javascript-at-Netflix-2014-03-19?pk=58d9-8985-be37-25f7-dc90-fe60-a9e2-03ab\n",meta:{duration:"PT28M39S"},presenter:{name:null},source:{id:"FAZJsxcykPs",provider:"youtube"},slug:"netflix-javascript-talks-async-javascript-with-reactive-extensions",tag:["JavaScript","netflix","netflix ui engineering","Functional Programming (Programming Language Paradigm)","User Experience Design (Industry)","Web Development (Interest)","Reactive Programming"],thumbnails:{default:{url:"https://i.ytimg.com/vi/FAZJsxcykPs/default.jpg",height:90,width:120}},title:"Netflix JavaScript Talks - Async JavaScript with Reactive Extensions"}}]}},pathContext:{slug:"immutability-interactivity-and-javascript",tags:["JavaScript","Clojure","Immutability","FutureJS 2014"]}}}});
//# sourceMappingURL=path---talk-immutability-interactivity-and-javascript-92ef112e8e887e14f8dc.js.map