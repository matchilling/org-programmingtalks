webpackJsonp([0xe22639597ba9],{3157:function(e,a){e.exports={data:{talkJson:{description:"HackHands.com interviews Jafar Husain (Technical Lead at Netflix) about Reactive Programming concepts and it's usage on Netflix.com.\n\nAbout the Interviewee:\nJafar Husain is a highly skilled software developer with twelve-years of experience designing and developing enterprise software for prestigious corporations and organizations. Jafar Husain currently works for Netflix.",meta:{duration:"PT9M18S"},presenter:{name:null},slug:"reactive-programming-overview-jafar-husain-from-netflix",source:{id:"dwP1TNXE6fc",provider:"youtube"},tag:["Reactive Programming","Software","Netflix (Business Operation)","Computer Programming (Conference Subject)","Database (Software Genre)","nosql","reactive extensions","Reactive.io","Technology"],title:"Reactive Programming Overview (Jafar Husain from Netflix)"},allTalkJson:{edges:[{node:{description:'This presentation was recorded at GOTO Chicago 2014\nhttp://gotochgo.com\n\nAdrian Cockcroft - Technology Fellow at Battery Ventures and Former Netflix Cloud Architect Pioneer\n\nABSTRACT\nTo deliver software products at high velocity requires four things. First, a culture of innovation that can see and respond to opportunities. Second, the data and analytics to evaluate alternatives. Third, a culture that can make decisions and assign resources quickly. Fourth, agile development and self service deployment. A fine grain loosely coupled architecture scales as the team size grows, a freedom and responsibility culture provides autonomy for innovation and fast decision making, unstructured "Big Data" analytics gets answers quickly, cloud removes the latency of resource allocation, and DevOps removes the coordination latency that slows down deployment. Traditional enterprise architectures are based on monolithic applications and relational databases. Cloud native architectures are based on buiding single function REST-based microservices that support integration across denormalized NoSQL data stores and a wide range of web services. This talk will also discuss strategies, patterns and pathways to perform a gradual migration towards cloud native.\n\nLink to slides: http://gotocon.com/dl/goto-chicago-20...\n\nhttps://twitter.com/gotochgo\nhttps://www.facebook.com/GOTOConference\nhttp://gotocon.com',meta:{duration:"PT1H4M52S"},presenter:{name:null},source:{id:"BeNrVl2_nyI",provider:"youtube"},slug:"speed-and-scale-how-to-get-there-adrian-cockcroft",tag:["Software Engineering (Industry)","Innovation (Quotation Subject)","Database (Software Genre)","DevOps","big data","pathways","adrian cockcroft","GOTO Conference","GOTO Conference","GOTO Conference","Adrian Cockcroft","Speed & Scale"],thumbnails:{default:{url:"https://i.ytimg.com/vi/BeNrVl2_nyI/default.jpg",height:90,width:120}},title:"Speed & Scale: How to get there • Adrian Cockcroft"}},{node:{description:"Jafar Husain shares how Netflix uses the Reactive Extensions (Rx) library to build responsive user experiences that strive to be event-driven, scalable and resilient. Learn the power of the Observable and how Netflix has simplified code through the ability to filter, aggregate, compose and project data streams.\n\nThis talk discusses how Netflix uses Rx to:\n- Declaratively build complex events out of simple events (ex. drag and drop)\n- Coordinate and sequence multiple Ajax requests\n- Reactively update the UI in response to data changes\n- Eliminate memory leaks caused by neglecting to unsubscribe from events\n- Gracefully propagate and handle asynchronous exceptions\n\nSlides: http://www.slideboom.com/presentations/1002549/Async-Javascript-at-Netflix-2014-03-19?pk=58d9-8985-be37-25f7-dc90-fe60-a9e2-03ab\n",meta:{duration:"PT28M39S"},presenter:{name:null},source:{id:"FAZJsxcykPs",provider:"youtube"},slug:"netflix-javascript-talks-async-javascript-with-reactive-extensions",tag:["JavaScript","netflix","netflix ui engineering","Functional Programming (Programming Language Paradigm)","User Experience Design (Industry)","Web Development (Interest)","Reactive Programming"],thumbnails:{default:{url:"https://i.ytimg.com/vi/FAZJsxcykPs/default.jpg",height:90,width:120}},title:"Netflix JavaScript Talks - Async JavaScript with Reactive Extensions"}},{node:{description:"Meetup: http://www.meetup.com/papers-we-love/events/214400572/\nPaper: http://www.cs.cmu.edu/~crary/819-f09/Hoare69.pdf\nSlides: https://speakerdeck.com/paperswelove/jean-yang-on-an-axiomatic-basis-for-computer-programming\nAudio: http://www.mixcloud.com/paperswelove/jean-yang-on-an-axiomatic-basis-for-computer-programming/\n---------------------------------------------------------------------------------------------\nSponsored by The Ladders (@TheLaddersDev)\n---------------------------------------------------------------------------------------------\n\nDescription\n---------------\nOur lives now run on software. Bugs are becoming not just annoyances for software developers, but sources of potentially catastrophic failures. A careless programmer mistake could leak our social security numbers or crash our cars. While testing provides some assurance, it is difficult to test all possibilities in complex systems--and practically impossible in concurrent systems. For the critical systems in our lives, we should demand mathematical guarantees that the software behaves the way the programmer expected.\n\nA single paper influenced much of the work towards providing these mathematical guarantees. C.A.R. Hoare’s seminal 1969 paper “An Axiomatic Basis for Computer Programming” introduces a method of reasoning about program correctness now known as Hoare logic. In this paper, Hoare provides a technique that 1) allows programmers to express program properties and 2) allows these properties to be automatically checked. These ideas have influenced decades of research in automated reasoning about software correctness.\n\nIn this talk, I will describe the main ideas in Hoare logic, as well as the impact of these ideas. I will talk about my personal experience using Hoare logic to verify memory guarantees in an operating system. I will also discuss takeaway lessons for working programmers.\n\nBio\n----\nJean Yang (@jeanqasaur) is a final-year PhD student at MIT. For her PhD thesis she has created Jeeves, a programming language for automatically enforcing information flow policies for security and privacy. You may be more familiar with one of her other projects, Haskell Ryan Gosling.",meta:{duration:"PT1H4M32S"},presenter:{name:null},source:{id:"GQi-6-d5ooQ",provider:"youtube"},slug:"jean-yang-on-an-axiomatic-basis-for-computer-programming",tag:["Computer Programming (Conference Subject)","Mathematics (Field Of Study)","Software Engineering (Industry)","Program Correctness","Ryan Gosling","Hoare Logic","Type Checking","Computer (Industry)","Programming Language"],thumbnails:{default:{url:"https://i.ytimg.com/vi/GQi-6-d5ooQ/default.jpg",height:90,width:120}},title:"Jean Yang on An Axiomatic Basis for Computer Programming"}},{node:{description:"Talk by ACM A.M. Turing Laureate Dana S. Scott during the ACM A.M. Turing Centenary Celebration, June, 2012.\n\nAbstract:\n\nA very fast development in the early 1930s, following Hilbert's codification of Mathematical Logic, led to the Incompleteness Theorems, Computable Functions, Undecidability Theorems, and the general formulation of recursive Function Theory. The so-called Lambda Calculus played a key role. The history of these developments will be traced, and the much later place of Lambda Calculus in Mathematics and Programming-Language Theory will be outlined.",meta:{duration:"PT30M8S"},presenter:{name:null},source:{id:"SphBW9ILVPU",provider:"youtube"},slug:"lambda-calculus-then-and-now",tag:["Calculus","Dana S. Scott","ACM","ACM A.M. Turing Award","Alan Turing","Nobel Prize","in","computing","Contest","Entry","Computer","Electronics","Gadget","Technology","Space","Physics","Mechanics","Experiment","Math"],thumbnails:{default:{url:"https://i.ytimg.com/vi/SphBW9ILVPU/default.jpg",height:90,width:120}},title:"Lambda Calculus Then and Now"}},{node:{description:null,meta:{duration:"PT1H11M18S"},presenter:{name:null},source:{id:"jhlVHoeB05A",provider:"youtube"},slug:"crossing-language-barriers-with-julia-scipyipython-or-euroscipy-2014-or-stephen-g-johnson",tag:["Software","Scientific Python","IPython","Scipy (Software)","Stephen G. Johnson","Python (Programming Language)","Julia (Programming Language)","EuroSciPy 2014"],thumbnails:{default:{url:"https://i.ytimg.com/vi/jhlVHoeB05A/default.jpg",height:90,width:120}},title:"Crossing Language Barriers with Julia, SciPy,IPython | EuroSciPy 2014 | Stephen G  Johnson"}},{node:{description:'Meetup: http://www.meetup.com/papers-we-love/events/220021234/\nPaper: https://www.cs.utah.edu/plt/publications/macromod.pdf\nSlides: http://bit.ly/1KNwpjC\nAudio: https://www.mixcloud.com/paperswelove/sam-tobin-hochstadt-on-composable-and-compilable-macros/\n--------------------------------------------------------------------------------------------------------------------------------------------------\nSponsored by Two Sigma (@twosigma), The Ladders (@TheLaddersDev), and LispNYC (@lispnyc)\n--------------------------------------------------------------------------------------------------------------------------------------------------\n\nDescription\n---------------\n"Composable and Compilable Macros" introduces the Racket module system, which addresses the following problem: When you have macros that run programs at compile-time, how does this interact with separate compilation and ahead-of-time compilation. The paper introduces "phases", which enable Racket to behave the same regardless of when and how you compile your program. It also introduces the idea of writing different modules in different languages, which is now used for systems like Typed Racket.\n\nA few related papers:\n\n- Syntactic Abstraction in Scheme, Dybvig Hieb & Bruggeman, Lisp andSymbolic Computation 1993\n\n- Macros that Work Together, Flatt, Findler, Culpepper, & Darais, JFP 2012- Submodules in Racket, Flatt GPCE 2013\n\n- Implicit phasing for R6RS libraries,  Ghuloum & Dybvig, ICFP 2007\n\n- Extending the scope of syntactic abstraction, Waddell & Dybvig, POPL 1999 \n\nBio\n----\nSam Tobin-Hochstadt (@samth) is an Assistant Professor in the School of Informatics and Computing at Indiana University. He has worked on dynamic languages, type systems, module systems, and metaprogramming, including creating the Typed Racket system and popularizing the phrase “scripts to programs.” He is a member of the ECMA TC39 working group responsible for standardizing JavaScript, where he co-designed the module system for ES6, the next version of JavaScript. He received his PhD in 2010 from Northeastern University under Matthias Felleisen.',meta:{duration:"PT54M49S"},presenter:{name:null},source:{id:"pK2E63mhRxI",provider:"youtube"},slug:"sam-tobin-hochstadt-on-composable-and-compilable-macros",tag:["Computer Programming (Conference Subject)","Programming Languages","Macros","Racket","Modules","Scheme","Papers We Love","ICFP"],thumbnails:{default:{url:"https://i.ytimg.com/vi/pK2E63mhRxI/default.jpg",height:90,width:120}},title:"Sam Tobin-Hochstadt on Composable and Compilable Macros"}},{node:{description:"http://www.cppcon.org\n--\nThe standard library containers are often both misused and underused. Instead of creating new containers, applications are often structured with incidental data structures composed of objects referencing other object. This talk looks at some of the ways the standard containers can be better utilized and how creating (or using non-standard library) containers can greatly simplify code. The goal is no incidental data structures. \n--\nSean Parent is a principal scientist and software architect for Adobe’s mobile digital imaging group. Sean has been at Adobe since 1993 when he joined as a senior engineer working on Photoshop and later managed Adobe’s Software Technology Lab. In 2009 Sean spent a year at Google working on Chrome OS before returning to Adobe. From 1988 through 1993 Sean worked at Apple, where he was part of the system software team that developed the technologies allowing Apple’s successful transition to PowerPC.\n--\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com",meta:{duration:"PT1H4M"},presenter:{name:null},source:{id:"sWgDk-o-6ZE",provider:"youtube"},slug:"cppcon-2015-sean-parent-better-code-data-structures",tag:["CppCon 2015","Sean Parent","C++","Computer Programming (Conference Subject)","Data Structure (Literature Subject)","Bash Films","Conference Video","Video Services"],thumbnails:{default:{url:"https://i.ytimg.com/vi/sWgDk-o-6ZE/default.jpg",height:90,width:120}},title:'CppCon 2015: Sean Parent "Better Code: Data Structures"'}}]}},pathContext:{slug:"reactive-programming-overview-jafar-husain-from-netflix",tags:["Reactive Programming","Software","Netflix (Business Operation)","Computer Programming (Conference Subject)","Database (Software Genre)","nosql","reactive extensions","Reactive.io","Technology"]}}}});
//# sourceMappingURL=path---talk-reactive-programming-overview-jafar-husain-from-netflix-fac8b3b3559f89ba192a.js.map