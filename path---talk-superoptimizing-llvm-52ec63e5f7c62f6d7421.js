webpackJsonp([0xab09dfc2f3ca],{3176:function(e,t){e.exports={data:{talkJson:{description:"Compilers are caught in a tug-of-war between increasingly exotic architectures and instruction set extensions on one hand, and our desire for advanced programming languages and PL features on the other. A multi-language, multi-target compiler infrastructure such as LLVM ameliorates the situation somewhat, but engineering fast, effective and correct optimizations for LLVM is challenging. Even after a decade of intense development, there is a long tail of unimplemented optimizations.\n\nUniversity of Utah Associate Professor John Regehr presents Souper, a superoptimizer that gives us a look at some of the optimizations that are missing from LLVM while also avoiding the bugs that are often found in hand-written optimization passes. Souper works by turning LLVM code into queries for an automated theorem prover. When Souper is run on LLVM itself, it identifies thousands of uncaught optimizations and also ranks them according to the likely improvement in code size or code speed that would result from implementing each one.\n\nJohn Regehr, Associate Professor, School of Computing, University of Utah\n\n12/2/2014\n\nhttps://www.cs.washington.edu/htbin-post/mvis/mvis?ID=2643\n\nhttp://uwtv.org",meta:{duration:"PT49M7S"},presenter:{name:null},slug:"superoptimizing-llvm",source:{id:"Ux0YnVEaI6A",provider:"youtube"},tag:["UW","University of Washington","Engineering and Computer Science","optimization","superoptimizer","LLVM","Souper"],title:"Superoptimizing LLVM"},allTalkJson:{edges:[{node:{description:"Higgs, a JIT compiler for JavaScript written in D, was presented at DConf 2013. Basic block versioning, a novel optimization technique in early stages of testing at the time, was also introduced. Experimental results demonstratring how basic block versioning fares on multiple metrics across a variety of benchmarks can now be shown. We discuss how we have interpreted these results to inform further development of Higgs and introduce a JIT compiler architecture based on the idea of lazy/incremental compilation and inlining. We also explore how D has influenced the development of Higgs and take a more in-depth look at how various D features such as templates and CTFE are used in the Higgs implementation.",meta:{duration:"PT43M57S"},presenter:{name:null},source:{id:"FGgFMZhnXvU",provider:"youtube"},slug:"dconf-2014-day-2-talk-2-refactoring-jit-compilation-by-maxime-chevalier-boisvert",tag:["Compiler (Software Genre)","Just In Time","optimization","javascript","compilation","jit","dconf","higgs","conference","talk","Just-in-time Compilation"],thumbnails:{default:{url:"https://i.ytimg.com/vi/FGgFMZhnXvU/default.jpg",height:90,width:120}},title:"DConf 2014 Day 2 Talk 2: Refactoring JIT Compilation by Maxime Chevalier-Boisvert"}},{node:{description:"In this talk, we will present our OpenCL SDK and its core technology -- the vectorizer compiler. We plan to present an overview of our vectorizer and discuss our experience with the LLVM compiler toolkit over the last few years. We will discuss some of our design decisions and our and plans for future features (future instruction sets, vector select, predicated instructions, etc).",meta:{duration:"PT35M45S"},presenter:{name:null},source:{id:"QsoLyvvhRuc",provider:"youtube"},slug:"intel-opencl-sdk-vectorizer",tag:["LLVM","OpenCL","Software Development Kit","Intel"],thumbnails:{default:{url:"https://i.ytimg.com/vi/QsoLyvvhRuc/default.jpg",height:90,width:120}},title:"Intel OpenCL SDK Vectorizer"}},{node:{description:"Fluent 2014, \"Keynote With Paul Irish\".\n\nAbout Paul Irish (Google):\nPaul Irish is a front-end developer who loves the web. He is on Google Chrome's Developer Relations team as well as jQuery's.\n\nHe develops the HTML5 Boilerplate, the HTML5/CSS3 feature detection library Modernizr, HTML5 Please, CSS3 Please, and other bits and bobs of open source code.\n\nDon't miss an upload! Subscribe! http://goo.gl/szEauh\nStay Connected to O'Reilly Media by Email - http://goo.gl/YZSWbO\n\nFollow O'Reilly Media:\nhttp://plus.google.com/+oreillymedia\nhttps://www.facebook.com/OReilly\nhttps://twitter.com/OReillyMedia",meta:{duration:"PT23M25S"},presenter:{name:null},source:{id:"R8W_6xWphtw",provider:"youtube"},slug:"paul-irish-delivering-the-goods-fluent-2014-keynote",tag:["Paul Irish","fluent 2014","fluentconf","fluentcon","fluent conference","optimization","Engineering (Industry)","O'Reilly","O'Reilly Media","OReilly","OReilly Media","OReillyMedia"],thumbnails:{default:{url:"https://i.ytimg.com/vi/R8W_6xWphtw/default.jpg",height:90,width:120}},title:'Paul Irish, "Delivering the goods" - Fluent 2014 Keynote'}},{node:{description:"In this talk, the PTX back-end for LLVM will be discussed, including its' past, present, and future. The current status of the back-end will be explored, with an emphasis on the portions of the LLVM IR instruction set and PTX intrinsics that are currently supported during code generation. This talk will also highlight the difficulties and issues that have been discovered while writing an LLVM back-end for a virtual ISA such as PTX, such as infinite register files. Through-out the talk, examples will be provided to highlight key features of the back-end and show preliminary performance data. \nIn addition to back-end details, this talk will also highlight the use of Clang as a front-end for generating PTX code for NVIDIA GPUs. Through the use of Clang and the CUDA Driver API, GPGPU programs can be developed that harness the optimization power of the LLVM compiler infrastructure. Finally, the talk will conclude with an exploration of the open issues that remain in the backend, and a discussion on how the back-end can be used within larger GPGPU compiler projects.",meta:{duration:"PT39M34S"},presenter:{name:null},source:{id:"Ux3F5MKuPjI",provider:"youtube"},slug:"ptx-back-end-gpu-programming-with-llvm",tag:["LLVM","PTX"],thumbnails:{default:{url:"https://i.ytimg.com/vi/Ux3F5MKuPjI/default.jpg",height:90,width:120}},title:"PTX Back-End: GPU Programming With LLVM"}}]}},pathContext:{slug:"superoptimizing-llvm",tags:["UW","University of Washington","Engineering and Computer Science","optimization","superoptimizer","LLVM","Souper"]}}}});
//# sourceMappingURL=path---talk-superoptimizing-llvm-52ec63e5f7c62f6d7421.js.map