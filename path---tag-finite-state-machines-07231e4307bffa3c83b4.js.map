{"version":3,"sources":["webpack:///path---tag-finite-state-machines-07231e4307bffa3c83b4.js","webpack:///./.cache/json/tag-finite-state-machines.json"],"names":["webpackJsonp","2259","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext"],"mappings":"AAAAA,cAAc,gBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,4lDAAmiDC,MAA+EC,SAAA,WAAqBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,mEAAAC,KAAA,gEAAAC,YAAgKC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,wEAAgFC,aAAgBR,KAAA,wBAAAC,IAAA","file":"path---tag-finite-state-machines-07231e4307bffa3c83b4.js","sourcesContent":["webpackJsonp([2128874516920],{\n\n/***/ 2259:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Many of us have hazy memories of finite state machines from computer science theory classes in college. But finite state machines (FSMs) have real, practical value, and it is useful to know how to build and apply them in Clojure. For example, FSMs have long been popular to model game AIs and workflow rules, and FSMs provide the behind-the-scenes magic that powers Java's regexes and core.async's go blocks. In this talk, we'll look at two programming puzzles that, suprisingly, have very elegant solutions when looked at through the lens of FSMs, with code demonstrations using two different Clojure libraries for automata (automat and reduce-fsm), as well as loco, a Clojure constraint solver.\\n\\nAbout the speakers: Mark Engelberg has been an active member of the Clojure community ever since Clojure turned 1.0, and is the primary developer of math.combinatorics, math.numeric-tower, data.priority-map, ubergraph, and a co-developer of instaparse. By day, he teaches Scheme and Clojure to talented kids in the Seattle area; by night, he creates logic puzzles and games, using Clojure as his \\\"secret weapon\\\". His latest game is Code Master, a programming-themed puzzle game for kids, available exclusively at Target (and created with Clojure, of course!)\\n\\nAlex Engelberg was indoctrinated by his father in the ways of functional programming at a young age, and Clojure rapidly became his language of choice. He is happy to be using Clojure professionally as a software engineer at SecureOne in Seattle. Alex also enjoys contributing to open source; he is the primary developer of loco, and co-developer of instaparse.\",\"meta\":{\"duration\":\"PT38M4S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"AEhULv4ruL4\",\"provider\":\"youtube\"},\"slug\":\"solving-problems-with-automata-mark-engelberg-and-alex-engelberg\",\"tag\":[\"clojure\",\"automata\",\"finite state machines\",\"Automata Theory\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/AEhULv4ruL4/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Solving Problems with Automata - Mark Engelberg & Alex Engelberg\"}}]}},\"pathContext\":{\"slug\":\"finite-state-machines\",\"tag\":\"finite state machines\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tag-finite-state-machines-07231e4307bffa3c83b4.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Many of us have hazy memories of finite state machines from computer science theory classes in college. But finite state machines (FSMs) have real, practical value, and it is useful to know how to build and apply them in Clojure. For example, FSMs have long been popular to model game AIs and workflow rules, and FSMs provide the behind-the-scenes magic that powers Java's regexes and core.async's go blocks. In this talk, we'll look at two programming puzzles that, suprisingly, have very elegant solutions when looked at through the lens of FSMs, with code demonstrations using two different Clojure libraries for automata (automat and reduce-fsm), as well as loco, a Clojure constraint solver.\\n\\nAbout the speakers: Mark Engelberg has been an active member of the Clojure community ever since Clojure turned 1.0, and is the primary developer of math.combinatorics, math.numeric-tower, data.priority-map, ubergraph, and a co-developer of instaparse. By day, he teaches Scheme and Clojure to talented kids in the Seattle area; by night, he creates logic puzzles and games, using Clojure as his \\\"secret weapon\\\". His latest game is Code Master, a programming-themed puzzle game for kids, available exclusively at Target (and created with Clojure, of course!)\\n\\nAlex Engelberg was indoctrinated by his father in the ways of functional programming at a young age, and Clojure rapidly became his language of choice. He is happy to be using Clojure professionally as a software engineer at SecureOne in Seattle. Alex also enjoys contributing to open source; he is the primary developer of loco, and co-developer of instaparse.\",\"meta\":{\"duration\":\"PT38M4S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"AEhULv4ruL4\",\"provider\":\"youtube\"},\"slug\":\"solving-problems-with-automata-mark-engelberg-and-alex-engelberg\",\"tag\":[\"clojure\",\"automata\",\"finite state machines\",\"Automata Theory\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/AEhULv4ruL4/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Solving Problems with Automata - Mark Engelberg & Alex Engelberg\"}}]}},\"pathContext\":{\"slug\":\"finite-state-machines\",\"tag\":\"finite state machines\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tag-finite-state-machines.json\n// module id = 2259\n// module chunks = 2128874516920"],"sourceRoot":""}