webpackJsonp([36424386828903],{3063:function(e,a){e.exports={data:{talkJson:{description:"Slides: http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf\n\nThis was a talk I gave at the second New York Haskell User Group Meeting (http://www.meetup.com/NY-Haskell/) on the new lens library, which provides a highly composable toolbox for accessing and modifying multiple parts of data structures.\n\nStarting with building blocks such as fmap and (.), we build up combinators suitable for working with a wide array of data structures. These generalize the notions you already know how to use into a form that is easier to compose and simultaneously allow them to be used for monomorphic containers such as Data.Text. \n\nAll without compromising on your ability to reason about them using laws!\n\nFinally, once I've built up some foundations, I do a bit of a deep dive, exploring consequences of this design. In particular we discuss the efficient generic programming programming framework exported by lens, and type-safe Traversal-based zippers.\n\nFamiliarity with the Applicative and Traversable classes from the Haskell base libraries will be helpful (links provided below), but a basic understanding of the concepts get introduced as I go along. \n\nUseful (but not mandatory) references:\n\nThe lens library and documentation: http://hackage.haskell.org/package/lens\nA previous, more introductory talk on how to use the lenses Edward Kmett wrote for the scalaz in the Scala programming language: https://www.youtube.com/watch?v=efv0SQNde5Q\nThe original Applicative paper: http://www.soi.city.ac.uk/~ross/papers/Applicative.pdf\nLots of information on Traversable: http://www.cs.ox.ac.uk/jeremy.gibbons/publications/iterator.pdf\nA write-up of this talk, as presented at the Bay Area Haskell Users Group: http://google-opensource.blogspot.com/2012/10/lenses-folds-and-traversals-haskell.html\n\nThe original Keynote version of the slides are available from http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.key\n\nThanks go to Johan Kiviniemi, who worked magic when it came to cleaning up the audio for this recording!",meta:{duration:"PT1H54M46S"},presenter:{name:null},slug:"lenses-folds-and-traversals",source:{id:"cefnmjtAolY",provider:"youtube"},tag:["Haskell","Functional Programming","Haskell","Mathematics","Lecture","Talk","Academic","Talking","Computer"],title:"Lenses, Folds, and Traversals"},allTalkJson:{edges:[{node:{description:"Haskell is a beautiful functional language, written by smart computer scientists, and having clever and elegant functional constructs. It clearly separates pure and impure parts of the program.\nGame programming on the other hand is a very hands-on discipline, trying to wring out the most of the machine's performance, and aiming for one thing, in disregard of all else: a pleasant, challenging experience for the player.\nI aim to bring intersect those worlds and describe the process, and the specifics, of writing a Haskell game. Functional reactive programming, bindings to graphical libraries, etc, will all have a role to play.\n\nby Elise Huard (@elise_huard)\n\nElise Huard is a software consultant who's been crafting and bashing together software for about 15 years now. Her skill set comprises talking to people, Haskell, Clojure, R, javascript, ruby, C, scaling, and a good few bits and bobs beside.\nShe's spoken at a fair number of conferences, most of them Ruby, some of them javascript, some of them\npolyglot.\nShe's based in Berlin, Germany. She enjoys reading sci-fi, traveling, cooking, tinkering, and spending time with her husband and baby daughter.",meta:{duration:"PT29M37S"},presenter:{name:null},source:{id:"1MNTerD8IuI",provider:"youtube"},slug:"writing-a-game-in-haskell-by-elise-huard",tag:["Haskell","game programming","Functional Programming (Programming Language Paradigm)"],thumbnails:{default:{url:"https://i.ytimg.com/vi/1MNTerD8IuI/default.jpg",height:90,width:120}},title:'"Writing a game in Haskell" by Elise Huard'}},{node:{description:"Boston Haskell, February 18, 2015\nNikhil builds an Enigma machine. First in Cryptol, then in hardware by way of Haskell.\nSlides and code available here:  https://github.com/rsnikhil/Enigma_Cryptol_Bluespec_BSV.git",meta:{duration:"PT59M41S"},presenter:{name:null},source:{id:"9-u2n4GgcVw",provider:"youtube"},slug:"rishiyur-s-nikhil-enigmatic-haskell-haskellish-enigma",tag:["Haskell"],thumbnails:{default:{url:"https://i.ytimg.com/vi/9-u2n4GgcVw/default.jpg",height:90,width:120}},title:"Rishiyur S. Nikhil - Enigmatic Haskell, Haskellish Enigma"}},{node:{description:"The Model-View-Controller (MVC) approach to user interfaces was first proposed by Trygve Reenskaug in a 1979 Xerox PARC note. As Object Oriented methodologies gained popularity, MVC too gained traction as a natural and logical way to construct user interfaces despite obvious shortcomings. Even though OO researchers moved forward with alternative approaches likes Morphic and constraint based systems, MVC today maintains a stranglehold on mainstream developer approaches to UI.\n\nCan functional programming take the good lessons from MVC while advancing the state of the art? Functional Reactive Programming and its derivatives primarily solve complexities around events - what of component modularity and abstraction?\n\nWe'll examine how a new library for ClojureScript called Om, a simple functional layer over Facebook's React, makes some traditional hard problems in MVC based UIs simple without abandoning the abstractions OO programmers find so useful. These concepts are easily portable to other systems provided the presence of persistent data structures.",meta:{duration:"PT27M2S"},presenter:{name:"David Nolen"},source:{id:"DMtwq3QtddY",provider:"youtube"},slug:"the-functional-final-frontier",tag:["Clojure","Functional Programming"],thumbnails:{default:{url:"https://i.ytimg.com/vi/DMtwq3QtddY/default.jpg",height:90,width:120}},title:"The Functional Final Frontier"}},{node:{description:"Kenneth Foner's Comonad talk at the Boston Haskell meetup, September 17, 2014.\nCode and slides: https://github.com/kwf/ComonadSheet",meta:{duration:"PT58M33S"},presenter:{name:null},source:{id:"F7F-BzOB670",provider:"youtube"},slug:"kenneth-foner-getting-a-quick-fix-on-comonads",tag:["Haskell"],thumbnails:{default:{url:"https://i.ytimg.com/vi/F7F-BzOB670/default.jpg",height:90,width:120}},title:"Kenneth Foner - Getting a Quick Fix on Comonads"}},{node:{description:"Why is functional programming becoming such a hot topic? Just what _is_ functional programming anyway? And when am I going to have to know about it? In this talk Uncle Bob will walk you through the rationale that is driving the current push towards functional programming. He'll also introduce you to the basics by walking through some simple Clojure code.",meta:{duration:"PT58M27S"},presenter:{name:'"Uncle Bob" - Robert Cecil Martin'},source:{id:"7Zlp9rKHGD4",provider:"youtube"},slug:"functional-programming-what-why-when",tag:["Functional Programming","NDC Conference 2014"],thumbnails:{default:{url:"https://i.ytimg.com/vi/7Zlp9rKHGD4/default.jpg",height:90,width:120}},title:"Functional Programming; What? Why? When?"}},{node:{description:"Dan Doel's talk at the Boston Haskell Meetup, Sept 17, 2014\nSlides: https://drive.google.com/file/d/0B8Kkr1O1jFwcRmhxbzBMR1Ntb3c/edit?usp=sharing",meta:{duration:"PT1H9M40S"},presenter:{name:null},source:{id:"McFNkLPTOSY",provider:"youtube"},slug:"dan-doel-introduction-to-low-level-haskell-optimization",tag:["Haskell"],thumbnails:{default:{url:"https://i.ytimg.com/vi/McFNkLPTOSY/default.jpg",height:90,width:120}},title:"Dan Doel - Introduction to Low Level Haskell Optimization"}},{node:{description:"Talk by ACM A.M. Turing Laureate Dana S. Scott during the ACM A.M. Turing Centenary Celebration, June, 2012.\n\nAbstract:\n\nA very fast development in the early 1930s, following Hilbert's codification of Mathematical Logic, led to the Incompleteness Theorems, Computable Functions, Undecidability Theorems, and the general formulation of recursive Function Theory. The so-called Lambda Calculus played a key role. The history of these developments will be traced, and the much later place of Lambda Calculus in Mathematics and Programming-Language Theory will be outlined.",meta:{duration:"PT30M8S"},presenter:{name:null},source:{id:"SphBW9ILVPU",provider:"youtube"},slug:"lambda-calculus-then-and-now",tag:["Calculus","Dana S. Scott","ACM","ACM A.M. Turing Award","Alan Turing","Nobel Prize","in","computing","Contest","Entry","Computer","Electronics","Gadget","Technology","Space","Physics","Mechanics","Experiment","Math"],thumbnails:{default:{url:"https://i.ytimg.com/vi/SphBW9ILVPU/default.jpg",height:90,width:120}},title:"Lambda Calculus Then and Now"}},{node:{description:" ",meta:{duration:"PT1H4M35S"},presenter:{name:null},source:{id:"YScIPA8RbVE",provider:"youtube"},slug:"the-algebra-of-algebraic-data-types",tag:["London","Haskell","Algebra","Algebraic","Types"],thumbnails:{default:{url:"https://i.ytimg.com/vi/YScIPA8RbVE/default.jpg",height:90,width:120}},title:"The Algebra of Algebraic Data Types"}},{node:{description:"Cody Roux's talk for the Boston Haskell Meetup - February 18, 2015\nSlides: http://www.slideshare.net/imalsogreg/cody-roux-pure-type-systems-boston-haskell-meetup",meta:{duration:"PT1H17M1S"},presenter:{name:null},source:{id:"ZGqKsalJi4s",provider:"youtube"},slug:"cody-roux-pure-type-systems",tag:["Haskell"],thumbnails:{default:{url:"https://i.ytimg.com/vi/ZGqKsalJi4s/default.jpg",height:90,width:120}},title:"Cody Roux - Pure Type Systems"}},{node:{description:"Cross posted from msdn's channel 9.\n\nFunctional programming is increasing in popularity these days given the inherent problems with shared mutable state that is rife in the imperative world. As we march on to a world of multi and many-core chipsets, software engineering must evolve to better equip software engineers with the tools to exploit the vast power of multiple core processors as it won't come for free as it did in the recent past which was predictably based on Moore's law.\n\nOf course, learning new ways to think about programming semantics and code patterns are not always straight forward. For example, most imperative programmers (which include most of us who build software for a living...) are somewhat perplexed by the notion of functions as first class data structures that can be combined to create powerful and composable systems. Languages like Haskell are pure functional languages and require programmers to think in a different way, often in a precise mathematical fashion where composing and chaining functions is \"the Way\".\n\nDr. Brian Beckman, a Channel 9 celebrity, astrophysicist and senior software engineer thought it would be a very good idea to address the complexity of monads in an easy to understand way: a technical conversation at the whiteboard with yours truly for Channel 9.\n\nThis video interview is the result of Brian's idea that he can in fact remove the fear of monads from anybody who pays attention to his explanation. Of course, you can't just cover monads in a vacuum (category theory is not really addressed here) so the context is functional programming (Brian covers functions and composable functional structures (function chains) and of course monoids and then monads).\n\nTune in. There's a lot to learn here and only Brian can make monads easy to understand for the rest of us!",meta:{duration:"PT1H7M11S"},presenter:{name:null},source:{id:"ZhuHCtR3xq8",provider:"youtube"},slug:"brian-beckman-dont-fear-the-monad",tag:["haskell","monads","programming","brian beckman","functional programming","Haskell"],thumbnails:{default:{url:"https://i.ytimg.com/vi/ZhuHCtR3xq8/default.jpg",height:90,width:120}},title:"Brian Beckman: Don't fear the Monad"}}]}},pathContext:{slug:"lenses-folds-and-traversals",tags:["Haskell","Functional Programming","Haskell","Mathematics","Lecture","Talk","Academic","Talking","Computer"]}}}});
//# sourceMappingURL=path---talk-lenses-folds-and-traversals-5405a4a7247c2a8d25a8.js.map