{"version":3,"sources":["webpack:///path---tag-datomic-82faf89da24d0bc3f655.js","webpack:///./.cache/json/tag-datomic.json"],"names":["webpackJsonp","2150","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,+0CAAAC,MAAq2CC,SAAA,YAAsBC,WAAcC,KAAA,oBAA0BC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,mDAAAC,KAAA,qBAAAC,YAAqGC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,wDAAgEC,aAAgBR,KAAA,UAAAC,IAAA","file":"path---tag-datomic-82faf89da24d0bc3f655.js","sourcesContent":["webpackJsonp([274401624191748],{\n\n/***/ 2150:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Have you ever hit a wall with REST? Does modeling your problem domain into CRUD-able entities feel like fitting a square peg into a round hole? Have you ever tried implementing a PATCH request (without going crazy), or debated PUT vs. POST for resource updates?\\n\\nAn alternative to CRUD-flavored REST is CQRS (Command and Query Responsibility Segregation). In this talk, I'll discuss the advantages and trade-offs of CQRS (and its cousin, Event Sourcing), and demonstrate them using an implementation of CQRS based on Clojure microservices, Kafka, and Datomic. These advantages include:\\n\\nOperational simplicity, flexibility, and extensibility\\nApplying Clojure's sound model of state transitions to the resources exposed by your web application\\nSimplified client implementation\\nBONUS: We'll even be able to keep the best parts of REST!\\n\\nI'll also discuss how this technique dovetails nicely with other good ideas in the Clojure community like the design of Datomic and the ideas behind Om.Next.\\n\\nAbout the speaker: Bobby is a member of the Technology Fellows team at Capital One, where he designs and develops solutions to difficult problems, influences the technical direction of Capital One while helping development teams implement that technical direction, and engages the broader technical community via speaking and open-source contribution.\",\"meta\":{\"duration\":\"PT44M25S\"},\"presenter\":{\"name\":\"Bobby Calderwood\"},\"source\":{\"id\":\"qDNPQo9UmJA\",\"provider\":\"youtube\"},\"slug\":\"from-rest-to-cqrs-with-clojure-kafka-and-datomic\",\"tag\":[\"clojure\",\"Datomic\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/qDNPQo9UmJA/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"From REST to CQRS with Clojure, Kafka, & Datomic\"}}]}},\"pathContext\":{\"slug\":\"datomic\",\"tag\":\"Datomic\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tag-datomic-82faf89da24d0bc3f655.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Have you ever hit a wall with REST? Does modeling your problem domain into CRUD-able entities feel like fitting a square peg into a round hole? Have you ever tried implementing a PATCH request (without going crazy), or debated PUT vs. POST for resource updates?\\n\\nAn alternative to CRUD-flavored REST is CQRS (Command and Query Responsibility Segregation). In this talk, I'll discuss the advantages and trade-offs of CQRS (and its cousin, Event Sourcing), and demonstrate them using an implementation of CQRS based on Clojure microservices, Kafka, and Datomic. These advantages include:\\n\\nOperational simplicity, flexibility, and extensibility\\nApplying Clojure's sound model of state transitions to the resources exposed by your web application\\nSimplified client implementation\\nBONUS: We'll even be able to keep the best parts of REST!\\n\\nI'll also discuss how this technique dovetails nicely with other good ideas in the Clojure community like the design of Datomic and the ideas behind Om.Next.\\n\\nAbout the speaker: Bobby is a member of the Technology Fellows team at Capital One, where he designs and develops solutions to difficult problems, influences the technical direction of Capital One while helping development teams implement that technical direction, and engages the broader technical community via speaking and open-source contribution.\",\"meta\":{\"duration\":\"PT44M25S\"},\"presenter\":{\"name\":\"Bobby Calderwood\"},\"source\":{\"id\":\"qDNPQo9UmJA\",\"provider\":\"youtube\"},\"slug\":\"from-rest-to-cqrs-with-clojure-kafka-and-datomic\",\"tag\":[\"clojure\",\"Datomic\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/qDNPQo9UmJA/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"From REST to CQRS with Clojure, Kafka, & Datomic\"}}]}},\"pathContext\":{\"slug\":\"datomic\",\"tag\":\"Datomic\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tag-datomic.json\n// module id = 2150\n// module chunks = 274401624191748"],"sourceRoot":""}