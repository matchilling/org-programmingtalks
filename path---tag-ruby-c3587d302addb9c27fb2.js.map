{"version":3,"sources":["webpack:///path---tag-ruby-c3587d302addb9c27fb2.js","webpack:///./.cache/json/tag-ruby.json"],"names":["webpackJsonp","2657","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,giBAAAC,MAAsjBC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,4DAAAC,KAAA,yDAAAC,YAAkJC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,+DAAwEhB,MAAQC,YAAA,4jCAAyeC,MAAymBC,SAAA,YAAsBC,WAAcC,KAAA,iBAAuBC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,iCAAAC,KAAA,iDAAAC,YAA+GC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,oCAA6ChB,MAAQC,YAAA,68BAAubC,MAA4iBC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,iDAAAC,KAAA,iCAAAC,YAA+GC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,oDAA6DhB,MAAQC,YAAA,85BAAAC,MAAo7BC,SAAA,YAAsBC,WAAcC,KAAA,eAAqBC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,6CAAAC,KAAA,6BAAAC,YAAuGC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,kDAA2DhB,MAAQC,YAAA,mVAAAC,MAAyWC,SAAA,YAAsBC,WAAcC,KAAA,eAAqBC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,qBAAAC,KAAA,2DAAAC,YAA6GC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,0BAAkCC,aAAgBR,KAAA,OAAAC,IAAA","file":"path---tag-ruby-c3587d302addb9c27fb2.js","sourcesContent":["webpackJsonp([25470694546083],{\n\n/***/ 2657:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Tired of maintaining your one-off script that has now become someone's job to execute? Wishing you could create polished applications on the command line similar to git or cucumber? In my talk, I'll talk about what makes a command line application \\\"awesome\\\", and why you should care. I'll talk about what makes Ruby particularly suited to this task over mainstays like bash and Perl. We'll compare and contrast several Ruby libraries that can make even your lowliest automation script a polished, maintainable, and predictable application.\",\"meta\":{\"duration\":\"PT28M57S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"1ILEw6Qca3U\",\"provider\":\"youtube\"},\"slug\":\"make-awesome-command-line-apps-with-ruby-by-dave-copeland\",\"tag\":[\"rubymidwest2011\",\"Ruby\",\"CLI\",\"Command-line Interface\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/1ILEw6Qca3U/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Make awesome command line apps with ruby by Dave Copeland\"}},{\"node\":{\"description\":\"Most developers know enough about refactoring to write code that's pretty good. They create short methods, and classes with one responsibility. They're also familiar with a good handful of refactorings, and the code smells that motivate them.\\n\\nThis talk is about the next level of knowledge: the things advanced developers know that let them turn good code into great. Code that's easy to read and a breeze to change.\\n\\nThese topics will be covered solely by LIVE CODING; no slides. We'll boldly refactor right on stage, and pray the tests stay green. You might even learn some vim tricks as well as an expert user shows you his workflow.\\n\\nTopics include:\\n\\nThe Open-Closed Principle The types of coupling, and their dangers Why composition is so damn great A powerful refactoring that Kent Beck refers to as \\\"deep deep magic\\\" How to destroy conditionals with a NullObject The beauty of the Decorator pattern Testing smells, including Mystery Guest and stubbing the system under test The stuff from the last halves of Refactoring and Clean Code that you never quite got to.\",\"meta\":{\"duration\":\"PT44M19S\"},\"presenter\":{\"name\":\"Ben Orenstein\"},\"source\":{\"id\":\"DC-pQPq0acs\",\"provider\":\"youtube\"},\"slug\":\"refactoring-from-good-to-great\",\"tag\":[\"Aloha Ruby 2012\",\"Refactoring\",\"Ruby\",\"Hawaii\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/DC-pQPq0acs/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Refactoring from Good to Great\"}},{\"node\":{\"description\":\"Are your methods timid? Do they constantly second-guess themselves, checking for nil values, errors, and unexpected input? Even the cleanest Ruby codebases can become littered over time with nil checks, error handling, and other interruptions which steal attention away from the essential purpose of the code. This talk will discuss strategies for writing your Ruby classes and methods in a confident, straightforward style; without sacrificing functionality or robustness. In the process, we'll cover concepts and techniques points including: The narrative style of method construction The four parts of a method Three strategies for dealing with uncertain input Massaging input with coercion and the Decorator pattern Lightweight preconditions Exterminating nils from your code The chaining and iterative styles of method construction Eliminating conditionals with the Special Case and Null Object patterns Isolating errors with the Bouncer and Checked Method patterns\",\"meta\":{\"duration\":\"PT31M24S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"T8J0j2xJFgQ\",\"provider\":\"youtube\"},\"slug\":\"ruby-midwest-2011-confident-code-by-avdi-grimm\",\"tag\":[\"rubymidwest2011\",\"Ruby\",\"Code\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/T8J0j2xJFgQ/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Ruby Midwest 2011 Confident Code by Avdi Grimm\"}},{\"node\":{\"description\":\"I'm a language nut. I love trying them out, and I love thinking about their design and implementation. (I know, it's sad.) I came across Ruby in 1998 because I was an avid reader of comp.lang.misc (ask your parents). I downloaded it, compiled it, and fell in love. As with any time you fall in love, it's difficult to explain why. It just worked the way I work, and it had enough depth to keep me interested. Fast forward 15 years. All that time I'd been looking for something new that gave me the same feeling. Then I came across Elixir, a language by Jos√© Valim, that puts a humane, Ruby-like syntax on the Erlang VM. Now I'm dangerous. I want other people to see just how great this is. I want to evangelize. So come along and let me show you the things that I think make Elixir a serious alternative for writing highly reliable, scalable, and performant server code. And, more important, let me show you some fun stuff.\",\"meta\":{\"duration\":\"PT49M42S\"},\"presenter\":{\"name\":\"Dave Thomas\"},\"source\":{\"id\":\"lww1aZ-ldz0\",\"provider\":\"youtube\"},\"slug\":\"elixir-the-power-of-erlang-the-joy-of-ruby\",\"tag\":[\"Erlang\",\"Ruby\",\"GOTO 2014\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/lww1aZ-ldz0/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Elixir: The Power of Erlang, the Joy of Ruby\"}},{\"node\":{\"description\":\"Rich Hickey, the author of Clojure and designer of Datomic, is a software developer with over 20 years of experience in various domains. Rich has worked on scheduling systems, broadcast automation, audio analysis and fingerprinting, database design, yield management, exit poll systems, and machine listening, in a variety of languages.\",\"meta\":{\"duration\":\"PT36M54S\"},\"presenter\":{\"name\":\"Rich Hickey\"},\"source\":{\"id\":\"rI8tNMsozo0\",\"provider\":\"youtube\"},\"slug\":\"simplicity-matters\",\"tag\":[\"railsconf\",\"Ruby on Rails\",\"Simplicity\",\"Ruby\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/rI8tNMsozo0/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Simplicity Matters\"}}]}},\"pathContext\":{\"slug\":\"ruby\",\"tag\":\"Ruby\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tag-ruby-c3587d302addb9c27fb2.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Tired of maintaining your one-off script that has now become someone's job to execute? Wishing you could create polished applications on the command line similar to git or cucumber? In my talk, I'll talk about what makes a command line application \\\"awesome\\\", and why you should care. I'll talk about what makes Ruby particularly suited to this task over mainstays like bash and Perl. We'll compare and contrast several Ruby libraries that can make even your lowliest automation script a polished, maintainable, and predictable application.\",\"meta\":{\"duration\":\"PT28M57S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"1ILEw6Qca3U\",\"provider\":\"youtube\"},\"slug\":\"make-awesome-command-line-apps-with-ruby-by-dave-copeland\",\"tag\":[\"rubymidwest2011\",\"Ruby\",\"CLI\",\"Command-line Interface\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/1ILEw6Qca3U/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Make awesome command line apps with ruby by Dave Copeland\"}},{\"node\":{\"description\":\"Most developers know enough about refactoring to write code that's pretty good. They create short methods, and classes with one responsibility. They're also familiar with a good handful of refactorings, and the code smells that motivate them.\\n\\nThis talk is about the next level of knowledge: the things advanced developers know that let them turn good code into great. Code that's easy to read and a breeze to change.\\n\\nThese topics will be covered solely by LIVE CODING; no slides. We'll boldly refactor right on stage, and pray the tests stay green. You might even learn some vim tricks as well as an expert user shows you his workflow.\\n\\nTopics include:\\n\\nThe Open-Closed Principle The types of coupling, and their dangers Why composition is so damn great A powerful refactoring that Kent Beck refers to as \\\"deep deep magic\\\" How to destroy conditionals with a NullObject The beauty of the Decorator pattern Testing smells, including Mystery Guest and stubbing the system under test The stuff from the last halves of Refactoring and Clean Code that you never quite got to.\",\"meta\":{\"duration\":\"PT44M19S\"},\"presenter\":{\"name\":\"Ben Orenstein\"},\"source\":{\"id\":\"DC-pQPq0acs\",\"provider\":\"youtube\"},\"slug\":\"refactoring-from-good-to-great\",\"tag\":[\"Aloha Ruby 2012\",\"Refactoring\",\"Ruby\",\"Hawaii\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/DC-pQPq0acs/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Refactoring from Good to Great\"}},{\"node\":{\"description\":\"Are your methods timid? Do they constantly second-guess themselves, checking for nil values, errors, and unexpected input? Even the cleanest Ruby codebases can become littered over time with nil checks, error handling, and other interruptions which steal attention away from the essential purpose of the code. This talk will discuss strategies for writing your Ruby classes and methods in a confident, straightforward style; without sacrificing functionality or robustness. In the process, we'll cover concepts and techniques points including: The narrative style of method construction The four parts of a method Three strategies for dealing with uncertain input Massaging input with coercion and the Decorator pattern Lightweight preconditions Exterminating nils from your code The chaining and iterative styles of method construction Eliminating conditionals with the Special Case and Null Object patterns Isolating errors with the Bouncer and Checked Method patterns\",\"meta\":{\"duration\":\"PT31M24S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"T8J0j2xJFgQ\",\"provider\":\"youtube\"},\"slug\":\"ruby-midwest-2011-confident-code-by-avdi-grimm\",\"tag\":[\"rubymidwest2011\",\"Ruby\",\"Code\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/T8J0j2xJFgQ/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Ruby Midwest 2011 Confident Code by Avdi Grimm\"}},{\"node\":{\"description\":\"I'm a language nut. I love trying them out, and I love thinking about their design and implementation. (I know, it's sad.) I came across Ruby in 1998 because I was an avid reader of comp.lang.misc (ask your parents). I downloaded it, compiled it, and fell in love. As with any time you fall in love, it's difficult to explain why. It just worked the way I work, and it had enough depth to keep me interested. Fast forward 15 years. All that time I'd been looking for something new that gave me the same feeling. Then I came across Elixir, a language by Jos√© Valim, that puts a humane, Ruby-like syntax on the Erlang VM. Now I'm dangerous. I want other people to see just how great this is. I want to evangelize. So come along and let me show you the things that I think make Elixir a serious alternative for writing highly reliable, scalable, and performant server code. And, more important, let me show you some fun stuff.\",\"meta\":{\"duration\":\"PT49M42S\"},\"presenter\":{\"name\":\"Dave Thomas\"},\"source\":{\"id\":\"lww1aZ-ldz0\",\"provider\":\"youtube\"},\"slug\":\"elixir-the-power-of-erlang-the-joy-of-ruby\",\"tag\":[\"Erlang\",\"Ruby\",\"GOTO 2014\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/lww1aZ-ldz0/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Elixir: The Power of Erlang, the Joy of Ruby\"}},{\"node\":{\"description\":\"Rich Hickey, the author of Clojure and designer of Datomic, is a software developer with over 20 years of experience in various domains. Rich has worked on scheduling systems, broadcast automation, audio analysis and fingerprinting, database design, yield management, exit poll systems, and machine listening, in a variety of languages.\",\"meta\":{\"duration\":\"PT36M54S\"},\"presenter\":{\"name\":\"Rich Hickey\"},\"source\":{\"id\":\"rI8tNMsozo0\",\"provider\":\"youtube\"},\"slug\":\"simplicity-matters\",\"tag\":[\"railsconf\",\"Ruby on Rails\",\"Simplicity\",\"Ruby\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/rI8tNMsozo0/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Simplicity Matters\"}}]}},\"pathContext\":{\"slug\":\"ruby\",\"tag\":\"Ruby\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tag-ruby.json\n// module id = 2657\n// module chunks = 25470694546083"],"sourceRoot":""}