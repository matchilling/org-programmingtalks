{"version":3,"sources":["webpack:///path---tag-computer-a69f7f8d43d7a38f3b95.js","webpack:///./.cache/json/tag-computer.json"],"names":["webpackJsonp","2119","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,gkBAAAC,MAAslBC,SAAA,WAAqBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,+BAAAC,KAAA,0NAAAC,YAAsRC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,kCAA2ChB,MAAQC,YAAA,ugEAAAC,MAA6hEC,SAAA,cAAwBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,8BAAAC,KAAA,6GAAAC,YAAwKC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,mCAA4ChB,MAAQC,YAAA,49BAAAC,MAAk/BC,SAAA,aAAuBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,sDAAAC,KAAA,2GAAAC,YAA8LC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,6DAAqEC,aAAgBR,KAAA,WAAAC,IAAA","file":"path---tag-computer-a69f7f8d43d7a38f3b95.js","sourcesContent":["webpackJsonp([32930150302736],{\n\n/***/ 2119:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Talk by ACM A.M. Turing Laureate Dana S. Scott during the ACM A.M. Turing Centenary Celebration, June, 2012.\\n\\nAbstract:\\n\\nA very fast development in the early 1930s, following Hilbert's codification of Mathematical Logic, led to the Incompleteness Theorems, Computable Functions, Undecidability Theorems, and the general formulation of recursive Function Theory. The so-called Lambda Calculus played a key role. The history of these developments will be traced, and the much later place of Lambda Calculus in Mathematics and Programming-Language Theory will be outlined.\",\"meta\":{\"duration\":\"PT30M8S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"SphBW9ILVPU\",\"provider\":\"youtube\"},\"slug\":\"lambda-calculus-then-and-now\",\"tag\":[\"Calculus\",\"Dana S. Scott\",\"ACM\",\"ACM A.M. Turing Award\",\"Alan Turing\",\"Nobel Prize\",\"in\",\"computing\",\"Contest\",\"Entry\",\"Computer\",\"Electronics\",\"Gadget\",\"Technology\",\"Space\",\"Physics\",\"Mechanics\",\"Experiment\",\"Math\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/SphBW9ILVPU/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Lambda Calculus Then and Now\"}},{\"node\":{\"description\":\"Slides: http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf\\n\\nThis was a talk I gave at the second New York Haskell User Group Meeting (http://www.meetup.com/NY-Haskell/) on the new lens library, which provides a highly composable toolbox for accessing and modifying multiple parts of data structures.\\n\\nStarting with building blocks such as fmap and (.), we build up combinators suitable for working with a wide array of data structures. These generalize the notions you already know how to use into a form that is easier to compose and simultaneously allow them to be used for monomorphic containers such as Data.Text. \\n\\nAll without compromising on your ability to reason about them using laws!\\n\\nFinally, once I've built up some foundations, I do a bit of a deep dive, exploring consequences of this design. In particular we discuss the efficient generic programming programming framework exported by lens, and type-safe Traversal-based zippers.\\n\\nFamiliarity with the Applicative and Traversable classes from the Haskell base libraries will be helpful (links provided below), but a basic understanding of the concepts get introduced as I go along. \\n\\nUseful (but not mandatory) references:\\n\\nThe lens library and documentation: http://hackage.haskell.org/package/lens\\nA previous, more introductory talk on how to use the lenses Edward Kmett wrote for the scalaz in the Scala programming language: https://www.youtube.com/watch?v=efv0SQNde5Q\\nThe original Applicative paper: http://www.soi.city.ac.uk/~ross/papers/Applicative.pdf\\nLots of information on Traversable: http://www.cs.ox.ac.uk/jeremy.gibbons/publications/iterator.pdf\\nA write-up of this talk, as presented at the Bay Area Haskell Users Group: http://google-opensource.blogspot.com/2012/10/lenses-folds-and-traversals-haskell.html\\n\\nThe original Keynote version of the slides are available from http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.key\\n\\nThanks go to Johan Kiviniemi, who worked magic when it came to cleaning up the audio for this recording!\",\"meta\":{\"duration\":\"PT1H54M46S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"cefnmjtAolY\",\"provider\":\"youtube\"},\"slug\":\"lenses-folds-and-traversals\",\"tag\":[\"Haskell\",\"Functional Programming\",\"Haskell\",\"Mathematics\",\"Lecture\",\"Talk\",\"Academic\",\"Talking\",\"Computer\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/cefnmjtAolY/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Lenses, Folds, and Traversals\"}},{\"node\":{\"description\":\"How Billions of Trivial Data Points can Lead to Understanding\\r\\n\\r\\nPeter Norvig (Director of Research, Google) presents as part of the UBC Department of Computer Science's Distinguished Lecture Series, September 23, 2010.\\r\\n\\r\\nIn decades past, models of human language were wrought from the sweat and pencils of linguists. In the modern day, it is more common to think of language modeling as an exercise in probabilistic inference from data: we observe how words and combinations of words are used, and from that build computer models of what the phrases mean. This approach is hopeless with a small amount of data, but somewhere in the range of millions or billions of examples, we pass a threshold, and the hopeless suddenly becomes effective, and computer models sometimes meet or exceed human performance. This talk gives examples of the data available in large repositories of text, images, and videos, and shows some tasks that can be accomplished with the resulting models.\",\"meta\":{\"duration\":\"PT1H2M57S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"yvDCzhbjYWs\",\"provider\":\"youtube\"},\"slug\":\"peter-norvig-the-unreasonable-effectiveness-of-data\",\"tag\":[\"UBC\",\"Computer\",\"Science\",\"CPSC\",\"Distinguished\",\"Lecture\",\"Series\",\"DLS\",\"Peter\",\"Norvig\",\"PeterNorvig\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/yvDCzhbjYWs/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Peter Norvig - The Unreasonable Effectiveness of Data\"}}]}},\"pathContext\":{\"slug\":\"computer\",\"tag\":\"Computer\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tag-computer-a69f7f8d43d7a38f3b95.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Talk by ACM A.M. Turing Laureate Dana S. Scott during the ACM A.M. Turing Centenary Celebration, June, 2012.\\n\\nAbstract:\\n\\nA very fast development in the early 1930s, following Hilbert's codification of Mathematical Logic, led to the Incompleteness Theorems, Computable Functions, Undecidability Theorems, and the general formulation of recursive Function Theory. The so-called Lambda Calculus played a key role. The history of these developments will be traced, and the much later place of Lambda Calculus in Mathematics and Programming-Language Theory will be outlined.\",\"meta\":{\"duration\":\"PT30M8S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"SphBW9ILVPU\",\"provider\":\"youtube\"},\"slug\":\"lambda-calculus-then-and-now\",\"tag\":[\"Calculus\",\"Dana S. Scott\",\"ACM\",\"ACM A.M. Turing Award\",\"Alan Turing\",\"Nobel Prize\",\"in\",\"computing\",\"Contest\",\"Entry\",\"Computer\",\"Electronics\",\"Gadget\",\"Technology\",\"Space\",\"Physics\",\"Mechanics\",\"Experiment\",\"Math\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/SphBW9ILVPU/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Lambda Calculus Then and Now\"}},{\"node\":{\"description\":\"Slides: http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf\\n\\nThis was a talk I gave at the second New York Haskell User Group Meeting (http://www.meetup.com/NY-Haskell/) on the new lens library, which provides a highly composable toolbox for accessing and modifying multiple parts of data structures.\\n\\nStarting with building blocks such as fmap and (.), we build up combinators suitable for working with a wide array of data structures. These generalize the notions you already know how to use into a form that is easier to compose and simultaneously allow them to be used for monomorphic containers such as Data.Text. \\n\\nAll without compromising on your ability to reason about them using laws!\\n\\nFinally, once I've built up some foundations, I do a bit of a deep dive, exploring consequences of this design. In particular we discuss the efficient generic programming programming framework exported by lens, and type-safe Traversal-based zippers.\\n\\nFamiliarity with the Applicative and Traversable classes from the Haskell base libraries will be helpful (links provided below), but a basic understanding of the concepts get introduced as I go along. \\n\\nUseful (but not mandatory) references:\\n\\nThe lens library and documentation: http://hackage.haskell.org/package/lens\\nA previous, more introductory talk on how to use the lenses Edward Kmett wrote for the scalaz in the Scala programming language: https://www.youtube.com/watch?v=efv0SQNde5Q\\nThe original Applicative paper: http://www.soi.city.ac.uk/~ross/papers/Applicative.pdf\\nLots of information on Traversable: http://www.cs.ox.ac.uk/jeremy.gibbons/publications/iterator.pdf\\nA write-up of this talk, as presented at the Bay Area Haskell Users Group: http://google-opensource.blogspot.com/2012/10/lenses-folds-and-traversals-haskell.html\\n\\nThe original Keynote version of the slides are available from http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.key\\n\\nThanks go to Johan Kiviniemi, who worked magic when it came to cleaning up the audio for this recording!\",\"meta\":{\"duration\":\"PT1H54M46S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"cefnmjtAolY\",\"provider\":\"youtube\"},\"slug\":\"lenses-folds-and-traversals\",\"tag\":[\"Haskell\",\"Functional Programming\",\"Haskell\",\"Mathematics\",\"Lecture\",\"Talk\",\"Academic\",\"Talking\",\"Computer\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/cefnmjtAolY/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Lenses, Folds, and Traversals\"}},{\"node\":{\"description\":\"How Billions of Trivial Data Points can Lead to Understanding\\r\\n\\r\\nPeter Norvig (Director of Research, Google) presents as part of the UBC Department of Computer Science's Distinguished Lecture Series, September 23, 2010.\\r\\n\\r\\nIn decades past, models of human language were wrought from the sweat and pencils of linguists. In the modern day, it is more common to think of language modeling as an exercise in probabilistic inference from data: we observe how words and combinations of words are used, and from that build computer models of what the phrases mean. This approach is hopeless with a small amount of data, but somewhere in the range of millions or billions of examples, we pass a threshold, and the hopeless suddenly becomes effective, and computer models sometimes meet or exceed human performance. This talk gives examples of the data available in large repositories of text, images, and videos, and shows some tasks that can be accomplished with the resulting models.\",\"meta\":{\"duration\":\"PT1H2M57S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"yvDCzhbjYWs\",\"provider\":\"youtube\"},\"slug\":\"peter-norvig-the-unreasonable-effectiveness-of-data\",\"tag\":[\"UBC\",\"Computer\",\"Science\",\"CPSC\",\"Distinguished\",\"Lecture\",\"Series\",\"DLS\",\"Peter\",\"Norvig\",\"PeterNorvig\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/yvDCzhbjYWs/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Peter Norvig - The Unreasonable Effectiveness of Data\"}}]}},\"pathContext\":{\"slug\":\"computer\",\"tag\":\"Computer\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tag-computer.json\n// module id = 2119\n// module chunks = 32930150302736"],"sourceRoot":""}