{"version":3,"sources":["webpack:///path---tag-code-3c2cb08555fd1dc98fa0.js","webpack:///./.cache/json/tag-code.json"],"names":["webpackJsonp","2088","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,uZAAAC,MAA6aC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,uDAAAC,KAAA,4GAAAC,YAAgMC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,2DAAoEhB,MAAQC,YAAA,68BAAubC,MAA4iBC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,iDAAAC,KAAA,iCAAAC,YAA+GC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,sDAA8DC,aAAgBR,KAAA,OAAAC,IAAA","file":"path---tag-code-3c2cb08555fd1dc98fa0.js","sourcesContent":["webpackJsonp([134487802908386],{\n\n/***/ 2088:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"In this video tutorial, Dan Rosen will show you how to use Scala's capacity for monadic design to eliminate repetitive boilerplate in your code.  You'll learn to recognize places where the perpetual clutter of null checks, try-catch blocks and more can be hidden within a monad, to make your code's logic stand out clearly.\\r\\n\\r\\n** Head to http://marakana.com for more open source educational resources\",\"meta\":{\"duration\":\"PT31M22S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"Mw_Jnn_Y5iA\",\"provider\":\"youtube\"},\"slug\":\"scala-monads-declutter-your-code-with-monadic-design\",\"tag\":[\"scala\",\"monad\",\"monadic\",\"design patterns\",\"monadic design\",\"dan rosen\",\"marakana\",\"techtv\",\"Code\",\"Demo\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/Mw_Jnn_Y5iA/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Scala Monads: Declutter Your Code With Monadic Design\"}},{\"node\":{\"description\":\"Are your methods timid? Do they constantly second-guess themselves, checking for nil values, errors, and unexpected input? Even the cleanest Ruby codebases can become littered over time with nil checks, error handling, and other interruptions which steal attention away from the essential purpose of the code. This talk will discuss strategies for writing your Ruby classes and methods in a confident, straightforward style; without sacrificing functionality or robustness. In the process, we'll cover concepts and techniques points including: The narrative style of method construction The four parts of a method Three strategies for dealing with uncertain input Massaging input with coercion and the Decorator pattern Lightweight preconditions Exterminating nils from your code The chaining and iterative styles of method construction Eliminating conditionals with the Special Case and Null Object patterns Isolating errors with the Bouncer and Checked Method patterns\",\"meta\":{\"duration\":\"PT31M24S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"T8J0j2xJFgQ\",\"provider\":\"youtube\"},\"slug\":\"ruby-midwest-2011-confident-code-by-avdi-grimm\",\"tag\":[\"rubymidwest2011\",\"Ruby\",\"Code\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/T8J0j2xJFgQ/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Ruby Midwest 2011 Confident Code by Avdi Grimm\"}}]}},\"pathContext\":{\"slug\":\"code\",\"tag\":\"Code\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tag-code-3c2cb08555fd1dc98fa0.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"In this video tutorial, Dan Rosen will show you how to use Scala's capacity for monadic design to eliminate repetitive boilerplate in your code.  You'll learn to recognize places where the perpetual clutter of null checks, try-catch blocks and more can be hidden within a monad, to make your code's logic stand out clearly.\\r\\n\\r\\n** Head to http://marakana.com for more open source educational resources\",\"meta\":{\"duration\":\"PT31M22S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"Mw_Jnn_Y5iA\",\"provider\":\"youtube\"},\"slug\":\"scala-monads-declutter-your-code-with-monadic-design\",\"tag\":[\"scala\",\"monad\",\"monadic\",\"design patterns\",\"monadic design\",\"dan rosen\",\"marakana\",\"techtv\",\"Code\",\"Demo\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/Mw_Jnn_Y5iA/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Scala Monads: Declutter Your Code With Monadic Design\"}},{\"node\":{\"description\":\"Are your methods timid? Do they constantly second-guess themselves, checking for nil values, errors, and unexpected input? Even the cleanest Ruby codebases can become littered over time with nil checks, error handling, and other interruptions which steal attention away from the essential purpose of the code. This talk will discuss strategies for writing your Ruby classes and methods in a confident, straightforward style; without sacrificing functionality or robustness. In the process, we'll cover concepts and techniques points including: The narrative style of method construction The four parts of a method Three strategies for dealing with uncertain input Massaging input with coercion and the Decorator pattern Lightweight preconditions Exterminating nils from your code The chaining and iterative styles of method construction Eliminating conditionals with the Special Case and Null Object patterns Isolating errors with the Bouncer and Checked Method patterns\",\"meta\":{\"duration\":\"PT31M24S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"T8J0j2xJFgQ\",\"provider\":\"youtube\"},\"slug\":\"ruby-midwest-2011-confident-code-by-avdi-grimm\",\"tag\":[\"rubymidwest2011\",\"Ruby\",\"Code\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/T8J0j2xJFgQ/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Ruby Midwest 2011 Confident Code by Avdi Grimm\"}}]}},\"pathContext\":{\"slug\":\"code\",\"tag\":\"Code\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tag-code.json\n// module id = 2088\n// module chunks = 134487802908386"],"sourceRoot":""}