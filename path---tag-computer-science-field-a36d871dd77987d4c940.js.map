{"version":3,"sources":["webpack:///path---tag-computer-science-field-a36d871dd77987d4c940.js","webpack:///./.cache/json/tag-computer-science-field.json"],"names":["webpackJsonp","2108","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,2uDAAAC,MAAiwDC,SAAA,cAAwBC,WAAcC,KAAA,MAAYC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,gFAAAC,KAAA,qKAAAC,YAAkRC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,+FAAyGC,aAAgBR,KAAA,yBAAAC,IAAA","file":"path---tag-computer-science-field-a36d871dd77987d4c940.js","sourcesContent":["webpackJsonp([84156300723218],{\n\n/***/ 2108:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"http://www.Cppcon.org\\n—\\nA primary use case for C++ is low latency, low overhead, high performance code. But C++ does not give you these things for free, it gives you the tools to control these things and achieve them where needed. How do you realize this potential of the language? How do you tune your C++ code and achieve the necessary performance metrics?\\n\\nThis talk will walk through the process of tuning C++ code from benchmarking to performance analysis. It will focus on small scale performance problems ranging from loop kernels to data structures and algorithms. It will show you how to write benchmarks that effectively measure different aspects of performance even in the face of advanced compiler optimizations and bedeviling modern CPUs. It will also show how to analyze the performance of your benchmark, understand its behavior as well as the CPUs behavior, and use a wide array of tools available to isolate and pinpoint performance problems. The tools and some processor details will be Linux and x86 specific, but the techniques and concepts should be broadly applicable.\\n--\\nChandler Carruth leads the Clang team at Google, building better diagnostics, tools, and more. Previously, he worked on several pieces of Google’s distributed build system. He makes guest appearances helping to maintain a few core C++ libraries across Google’s codebase, and is active in the LLVM and Clang open source communities. He received his M.S. and B.S. in Computer Science from Wake Forest University, but disavows all knowledge of the contents of his Master’s thesis. He is regularly found drinking Cherry Coke Zero in the daytime and pontificating over a single malt scotch in the evening.\\n--\\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com\",\"meta\":{\"duration\":\"PT1H29M54S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"nXaxk27zwlk\",\"provider\":\"youtube\"},\"slug\":\"cppcon-2015-chandler-carruth-tuning-c-benchmarks-and-cpus-and-compilers-oh-my\",\"tag\":[\"CppCon 2015\",\"Computer Science (Field)\",\"Bash Films\",\"Conference Video Recording\",\"Event Video Recording\",\"Video Conferencing\",\"Video Services\",\"Chandler Carruth\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/nXaxk27zwlk/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"CppCon 2015: Chandler Carruth \\\"Tuning C++: Benchmarks, and CPUs, and Compilers! Oh My!\\\"\"}}]}},\"pathContext\":{\"slug\":\"computer-science-field\",\"tag\":\"Computer Science (Field)\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tag-computer-science-field-a36d871dd77987d4c940.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"http://www.Cppcon.org\\n—\\nA primary use case for C++ is low latency, low overhead, high performance code. But C++ does not give you these things for free, it gives you the tools to control these things and achieve them where needed. How do you realize this potential of the language? How do you tune your C++ code and achieve the necessary performance metrics?\\n\\nThis talk will walk through the process of tuning C++ code from benchmarking to performance analysis. It will focus on small scale performance problems ranging from loop kernels to data structures and algorithms. It will show you how to write benchmarks that effectively measure different aspects of performance even in the face of advanced compiler optimizations and bedeviling modern CPUs. It will also show how to analyze the performance of your benchmark, understand its behavior as well as the CPUs behavior, and use a wide array of tools available to isolate and pinpoint performance problems. The tools and some processor details will be Linux and x86 specific, but the techniques and concepts should be broadly applicable.\\n--\\nChandler Carruth leads the Clang team at Google, building better diagnostics, tools, and more. Previously, he worked on several pieces of Google’s distributed build system. He makes guest appearances helping to maintain a few core C++ libraries across Google’s codebase, and is active in the LLVM and Clang open source communities. He received his M.S. and B.S. in Computer Science from Wake Forest University, but disavows all knowledge of the contents of his Master’s thesis. He is regularly found drinking Cherry Coke Zero in the daytime and pontificating over a single malt scotch in the evening.\\n--\\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com\",\"meta\":{\"duration\":\"PT1H29M54S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"nXaxk27zwlk\",\"provider\":\"youtube\"},\"slug\":\"cppcon-2015-chandler-carruth-tuning-c-benchmarks-and-cpus-and-compilers-oh-my\",\"tag\":[\"CppCon 2015\",\"Computer Science (Field)\",\"Bash Films\",\"Conference Video Recording\",\"Event Video Recording\",\"Video Conferencing\",\"Video Services\",\"Chandler Carruth\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/nXaxk27zwlk/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"CppCon 2015: Chandler Carruth \\\"Tuning C++: Benchmarks, and CPUs, and Compilers! Oh My!\\\"\"}}]}},\"pathContext\":{\"slug\":\"computer-science-field\",\"tag\":\"Computer Science (Field)\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tag-computer-science-field.json\n// module id = 2108\n// module chunks = 84156300723218"],"sourceRoot":""}