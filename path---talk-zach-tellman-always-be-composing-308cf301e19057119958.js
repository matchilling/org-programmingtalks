webpackJsonp([37945818395067],{3250:function(e,a){e.exports={data:{talkJson:{description:"The Clojure ecosystem, we're told, is made up of small, composable libraries. In practice, though, it's all too common to find that two libraries simply will not cleanly compose. This typically will lead to another library that does the same thing, but in a subtly different way. Sometimes this is warranted, but often it's not.\n\nThis talk will discuss the constraints and affordances that make a piece of code play nicely with other pieces of code. Attendees will learn how to write clean, reusable Clojure, drawing on the speaker's many past failures and few notable successes.\n\nThe first place I think of, when I try to tell someone about this quality, is a corner of an English country garden, where Zach Tellman grows against a wall.\n\nThe wall runs east to west; Zach grows flat against its southern side. The sun shines on him and as it warms the bricks behind Zach, the warm bricks themselves warms the peaches on him. It has a slightly dozy quality. Zach, carefully tied to grow flat against the wall; warming the bricks; the peaches growing in the sun; the wild grass growing around Zach's roots, in the angle where the earth and roots and wall all meet.",meta:{duration:"PT35M12S"},presenter:{name:null},slug:"zach-tellman-always-be-composing",source:{id:"3oQTSP4FngY",provider:"youtube"},tag:["clojure","abstraction","Functional Programming (Programming Language Paradigm)"],title:"Zach Tellman - Always Be Composing"},allTalkJson:{edges:[{node:{description:"Haskell is a beautiful functional language, written by smart computer scientists, and having clever and elegant functional constructs. It clearly separates pure and impure parts of the program.\nGame programming on the other hand is a very hands-on discipline, trying to wring out the most of the machine's performance, and aiming for one thing, in disregard of all else: a pleasant, challenging experience for the player.\nI aim to bring intersect those worlds and describe the process, and the specifics, of writing a Haskell game. Functional reactive programming, bindings to graphical libraries, etc, will all have a role to play.\n\nby Elise Huard (@elise_huard)\n\nElise Huard is a software consultant who's been crafting and bashing together software for about 15 years now. Her skill set comprises talking to people, Haskell, Clojure, R, javascript, ruby, C, scaling, and a good few bits and bobs beside.\nShe's spoken at a fair number of conferences, most of them Ruby, some of them javascript, some of them\npolyglot.\nShe's based in Berlin, Germany. She enjoys reading sci-fi, traveling, cooking, tinkering, and spending time with her husband and baby daughter.",meta:{duration:"PT29M37S"},presenter:{name:null},source:{id:"1MNTerD8IuI",provider:"youtube"},slug:"writing-a-game-in-haskell-by-elise-huard",tag:["Haskell","game programming","Functional Programming (Programming Language Paradigm)"],thumbnails:{default:{url:"https://i.ytimg.com/vi/1MNTerD8IuI/default.jpg",height:90,width:120}},title:'"Writing a game in Haskell" by Elise Huard'}},{node:{description:"Many of us have hazy memories of finite state machines from computer science theory classes in college. But finite state machines (FSMs) have real, practical value, and it is useful to know how to build and apply them in Clojure. For example, FSMs have long been popular to model game AIs and workflow rules, and FSMs provide the behind-the-scenes magic that powers Java's regexes and core.async's go blocks. In this talk, we'll look at two programming puzzles that, suprisingly, have very elegant solutions when looked at through the lens of FSMs, with code demonstrations using two different Clojure libraries for automata (automat and reduce-fsm), as well as loco, a Clojure constraint solver.\n\nAbout the speakers: Mark Engelberg has been an active member of the Clojure community ever since Clojure turned 1.0, and is the primary developer of math.combinatorics, math.numeric-tower, data.priority-map, ubergraph, and a co-developer of instaparse. By day, he teaches Scheme and Clojure to talented kids in the Seattle area; by night, he creates logic puzzles and games, using Clojure as his \"secret weapon\". His latest game is Code Master, a programming-themed puzzle game for kids, available exclusively at Target (and created with Clojure, of course!)\n\nAlex Engelberg was indoctrinated by his father in the ways of functional programming at a young age, and Clojure rapidly became his language of choice. He is happy to be using Clojure professionally as a software engineer at SecureOne in Seattle. Alex also enjoys contributing to open source; he is the primary developer of loco, and co-developer of instaparse.",meta:{duration:"PT38M4S"},presenter:{name:null},source:{id:"AEhULv4ruL4",provider:"youtube"},slug:"solving-problems-with-automata-mark-engelberg-and-alex-engelberg",tag:["clojure","automata","finite state machines","Automata Theory"],thumbnails:{default:{url:"https://i.ytimg.com/vi/AEhULv4ruL4/default.jpg",height:90,width:120}},title:"Solving Problems with Automata - Mark Engelberg & Alex Engelberg"}},{node:{description:"Build Your Own Lisp for Great Justice\n\nImplementing a toy Lisp interpreter is practically a rite of passage for the budding computer scientist. This hallowed tradition is described in detail in \"Lisp in Small Pieces,\" the seminal work on the making of Lisps, but everybody loves a tl;dr, so let's do the 40 minute executive summary.\n\nWe'll charge at high speed\nthrough the following topics, with Clojure code to follow along with as we go (because there's no better language for implementing a Lisp than another Lisp):\n\n* Parsing: turning text files into ASTs\n* Fundamental Lisp datatypes\n* McCarthy's elementary functions\n* Evaluating Lisp code\n* Lambdas and lexical scope\n* Your friend, the state monad\n* Beyond Lisp: pattern matching and type systems\n\nWhen we're done, you'll be ready to go forth and fill the world with Lisps of all shapes, colours and Greenspun violations for Great Justice. Also, it'll be good fun.\n\nSpeaker\nBodil Stokke (@bodil) is a compulsive conference speaker in the fields of functional programming and internets technologies, and is a co-organiser of three annual developer conferences in her home\ntown of Oslo, Norway, mostly because she's still learning how to stop. She is a prolific contributor to the Free Software community, primarily as a Clojure developer, and has recently taken up designing new programming languages as a hobby. In her spare time, she works as a web developer for Comoyo, which is like Hulu for non-Americans.",meta:{duration:"PT53M52S"},presenter:{name:null},source:{id:"DHubfS8E--o",provider:"youtube"},slug:"functional-programming-bodil-stokke",tag:["programming","lisp","geek","functional","clojure"],thumbnails:{default:{url:"https://i.ytimg.com/vi/DHubfS8E--o/default.jpg",height:90,width:120}},title:"Functional programming - Bodil Stokke"}},{node:{description:"In object-oriented development, we are all familiar with design patterns such as the Strategy pattern and Decorator pattern, and design principles such as SOLID. The functional programming community has design patterns and principles as well. This talk will provide an overview of some of these, and present some demonstrations of FP design in practice.",meta:{duration:"PT1H5M44S"},presenter:{name:null},source:{id:"E8I19uA-wGY",provider:"youtube"},slug:"functional-programming-design-patterns-by-scott-wlaschin",tag:["Software Design Pattern (Field Of Study)","Functional Programming (Programming Language Paradigm)"],thumbnails:{default:{url:"https://i.ytimg.com/vi/E8I19uA-wGY/default.jpg",height:90,width:120}},title:"Functional programming design patterns by Scott Wlaschin"}},{node:{description:"Jafar Husain shares how Netflix uses the Reactive Extensions (Rx) library to build responsive user experiences that strive to be event-driven, scalable and resilient. Learn the power of the Observable and how Netflix has simplified code through the ability to filter, aggregate, compose and project data streams.\n\nThis talk discusses how Netflix uses Rx to:\n- Declaratively build complex events out of simple events (ex. drag and drop)\n- Coordinate and sequence multiple Ajax requests\n- Reactively update the UI in response to data changes\n- Eliminate memory leaks caused by neglecting to unsubscribe from events\n- Gracefully propagate and handle asynchronous exceptions\n\nSlides: http://www.slideboom.com/presentations/1002549/Async-Javascript-at-Netflix-2014-03-19?pk=58d9-8985-be37-25f7-dc90-fe60-a9e2-03ab\n",meta:{duration:"PT28M39S"},presenter:{name:null},source:{id:"FAZJsxcykPs",provider:"youtube"},slug:"netflix-javascript-talks-async-javascript-with-reactive-extensions",tag:["JavaScript","netflix","netflix ui engineering","Functional Programming (Programming Language Paradigm)","User Experience Design (Industry)","Web Development (Interest)","Reactive Programming"],thumbnails:{default:{url:"https://i.ytimg.com/vi/FAZJsxcykPs/default.jpg",height:90,width:120}},title:"Netflix JavaScript Talks - Async JavaScript with Reactive Extensions"}},{node:{description:"About the speaker: Stuart Halloway (@stuarthalloway) is a founder and President of Cognitect (formerly Relevance). He is a Clojure committer, and a developer of the Datomic database. Stuart has spoken at a variety of industry events, including Strange Loop, Clojure/conj, EuroClojure, ClojureWest, SpeakerConf, QCon, GOTO, OSCON, RailsConf, RubyConf, JavaOne, and NFJS. Stuart has written a number of books and technical articles. Of these, he is most proud of Programming Clojure.",meta:{duration:"PT49M9S"},presenter:{name:null},source:{id:"FihU5JxmnBg",provider:"youtube"},slug:"debugging-with-the-scientific-method-stuart-halloway",tag:["clojure","Debugging (Quotation Subject)","Scientific Method (Literature Subject)"],thumbnails:{default:{url:"https://i.ytimg.com/vi/FihU5JxmnBg/default.jpg",height:90,width:120}},title:"Debugging with the Scientific Method - Stuart Halloway"}},{node:{description:"Genetic programming harnesses the mechanisms of natural evolution, including mutation, recombination, and natural selection, to automatically synthesize computer programs. It has been applied to a wide range of problems spanning several areas of science, engineering, and the arts, in many cases equaling or exceeding human performance.\n\nGenetic programming's roots are in Lisp, making Clojure a natural choice for modern genetic programming research and development. In this talk I will show how a simple genetic programming system can be written in about 100 lines of Clojure code, how a mature genetic programming system (PushGP) implemented in Clojure can improve the state of the art in automatic programming, and how genetic programming can be incorporated into an artificial life environment implemented in Clojure and Quil.\n\nAbout the speaker: Lee Spector is a Professor of Computer Science in the School of Cognitive Science at Hampshire College in Amherst, Massachusetts, and an adjunct professor of Computer Science at the University of Massachusetts, Amherst. His areas of teaching and research include genetic and evolutionary computation, quantum computation, and a variety of intersections between computer science, cognitive science, evolutionary biology, and the arts. He is the Editor-in-Chief of the journal Genetic Programming and Evolvable Machines (published by Springer) and a member of the editorial board of Evolutionary Computation (published by MIT Press). He is also a member of the SIGEVO executive committee and he was named a Fellow of the International Society for Genetic and Evolutionary Computation. \n\nMore details: http://hampshire.edu/lspector Resume: http://hampshire.edu/lspector/spector-resume.pdf",meta:{duration:"PT40M8S"},presenter:{name:null},source:{id:"HWMJdO4klIE",provider:"youtube"},slug:"genetic-programming-in-clojure-lee-spector",tag:["clojure","Genetic Programming"],thumbnails:{default:{url:"https://i.ytimg.com/vi/HWMJdO4klIE/default.jpg",height:90,width:120}},title:"Genetic Programming in Clojure - Lee Spector"}},{node:{description:"Contemporary compilers are among the most complex of software systems, typically being required to handle sophisticated high-level source languages, generate efficient code for multiple hardware architectures and operating systems, and support source-level debuggers, profilers, and other program development tools. Nanopass frameworks are designed to help manage this complexity. A nanopass compiler is comprised of many single-task passes with formally defined intermediate languages. The nanopass compiler technique evolved from a methodology for teaching a compiler course at Indiana University, into a full-fledged framework, capable of implementing a replacement for the Chez Scheme compiler that runs on par with the original compiler. This talk will discuss the idea of a nanopass compiler and the implementation of a simple language using the framework in Chez Scheme, along with the challenges and opportunities of using these techniques in Clojure.\n\nAndy is a postdoc at the University of Utah, currently working on malware detection in Android Apps, using both Scala and miniKanren to write abstract analyzers in Matt Might's lab. Andy completed his Ph.D. at Indiana University, defending his dissertation, \"A Nanopass Framework for Commercial Compiler Development\", in December 2012 and will be presenting a paper related to this work at this year's International Conference on Functional Programming. This project focused on replacing Chez Scheme's compiler with a nanopass compiler, along with his adviser R. Kent Dybvig. Before returning to graduate school in 2007, Andy worked in industry as a web developer, first for the consulting firms Razorfish and Gotham Broadband, along with some independent consulting work for Viacom, and later worked full time at Teach For America, maintaining both front-end and back-end web applications.",meta:{duration:"PT40M48S"},presenter:{name:null},source:{id:"Os7FE3J-U5Q",provider:"youtube"},slug:"andy-keep-writing-a-nanopass-compiler",tag:["clojure"],thumbnails:{default:{url:"https://i.ytimg.com/vi/Os7FE3J-U5Q/default.jpg",height:90,width:120}},title:"Andy Keep - Writing a Nanopass Compiler"}},{node:{description:"This presentation will introduce a new start-up focused on machine learning that is using Clojure. We will discuss the technology and architecture it has developed for real-time machine learning and pattern recognition, and how Clojure provides a unique set of advantages.\n\nThere will be a live coding demonstration of interactively applying machine learning to a simple task and visualization of the results.",meta:{duration:"PT27M38S"},presenter:{name:null},source:{id:"QJ1qgCr09j8",provider:"youtube"},slug:"machine-learning-live-mike-anderson",tag:["clojure"],thumbnails:{default:{url:"https://i.ytimg.com/vi/QJ1qgCr09j8/default.jpg",height:90,width:120}},title:"Machine Learning Live - Mike Anderson"}},{node:{description:"Data science / big data exists at the overlap of traditional analytics and large scale computation. As such, neither the traditional tools of analytics (R, Mathematica, Matlab) nor mainstreams languages (Java, C++, C#) supply its requirements well as they cannot simultaneously provide the mathematical abstractions and real-word platform power that are required. Clojure is privileged in that it has the potential to provide just exactly that. This talk will explore why this is the case, the tools that are available and the challenges that need be overcome for Clojure to realise this potential.",meta:{duration:"PT32M40S"},presenter:{name:null},source:{id:"RVmY2lQ4DHE",provider:"youtube"},slug:"clojure-data-science-edmund-jackson",tag:["clojure"],thumbnails:{default:{url:"https://i.ytimg.com/vi/RVmY2lQ4DHE/default.jpg",height:90,width:120}},title:"Clojure Data Science - Edmund Jackson"}}]}},pathContext:{slug:"zach-tellman-always-be-composing",tags:["clojure","abstraction","Functional Programming (Programming Language Paradigm)"]}}}});
//# sourceMappingURL=path---talk-zach-tellman-always-be-composing-308cf301e19057119958.js.map