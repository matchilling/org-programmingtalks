{"version":3,"sources":["webpack:///./src/templates/talk/index.js"],"names":["TalkTemplate","render","talk","this","props","data","talkJson","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_components_Layout__WEBPACK_IMPORTED_MODULE_11__","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","title","presenter","name","meta","content","description","_components_Player__WEBPACK_IMPORTED_MODULE_5__","videoId","source","id","className","_components_Search__WEBPACK_IMPORTED_MODULE_7__","_components_Talk__WEBPACK_IMPORTED_MODULE_9__","duration","path","slug","String","slugify","tags","tag","map","_components_TalkList__WEBPACK_IMPORTED_MODULE_10__","list","normalizeResult","allTalkJson","Object","assign","React","Component","query"],"mappings":"sTAWqBA,4FACnBC,OAAA,WACE,IAAMC,EAAOC,KAAKC,MAAMC,KAAKC,SAE7B,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,MACEV,EAAKW,UAAUC,KACRZ,EAAKU,MADZ,OACwBV,EAAKW,UAAUC,KACnCZ,EAAKU,MAEXG,KAAM,CAAC,CAAED,KAAM,cAAeE,QAASd,EAAKe,gBAG9CV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQC,QAASjB,EAAKkB,OAAOC,KAE7Bd,EAAAC,EAAAC,cAAA,OAAKa,UAAU,eACbf,EAAAC,EAAAC,cAACc,EAAA,EAAD,MACAhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACEP,YAAaf,EAAKe,YAClBQ,SAAUvB,EAAKa,KAAKU,SACpBC,KAAI,SAAWxB,EAAKyB,KACpBd,UAAW,CACTC,KAAMZ,EAAKW,UAAUC,KACrBY,KAAI,YAAcE,IAAOC,QAAQ3B,EAAKW,UAAUC,OAElDgB,KAAM5B,EAAK6B,IAAIC,IAAI,SAAAD,GACjB,MAAO,CAAEjB,KAAMiB,EAAKL,KAAI,QAAUE,IAAOC,QAAQE,MAEnDnB,MAAOV,EAAKU,QAGdL,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CACEC,KAAMC,0BAAgBhC,KAAKC,MAAMC,KAAK+B,aAAaJ,IAAI,SAAA9B,GACrD,OAAAmC,OAAAC,OAAA,CACEZ,KAAI,SAAWxB,EAAKyB,KACpBG,KAAM5B,EAAK6B,IAAIC,IAAI,SAAAD,GACjB,MAAO,CAAEjB,KAAMiB,EAAKL,KAAI,QAAUE,IAAOC,QAAQE,MAEnDlB,UAAW,CACTC,KAAMZ,EAAKW,UAAUC,KACrBY,KAAI,YAAcE,IAAOC,QAAQ3B,EAAKW,UAAUC,QAE/CZ,KAGPU,MAAM,wBA/CwB2B,IAAMC,WAwDnCC,EAAK","file":"component---src-templates-talk-index-js-d1f153b528e4b40b7b0e.js","sourcesContent":["import Helmet from 'react-helmet'\nimport { normalizeResult } from '../../utils/graphql'\nimport Player from '../../components/Player'\nimport React from 'react'\nimport Search from '../../components/Search'\nimport String from '../../utils/string'\nimport Talk from '../../components/Talk'\nimport TalkList from '../../components/TalkList'\nimport { graphql } from 'gatsby'\nimport Layout from '../../components/Layout'\n\nexport default class TalkTemplate extends React.Component {\n  render() {\n    const talk = this.props.data.talkJson\n\n    return (\n      <Layout>\n        <Helmet\n          title={\n            talk.presenter.name\n              ? `${talk.title} by ${talk.presenter.name}`\n              : talk.title\n          }\n          meta={[{ name: 'description', content: talk.description }]}\n        />\n\n        <Player videoId={talk.source.id} />\n\n        <div className=\"row content\">\n          <Search />\n          <Talk\n            description={talk.description}\n            duration={talk.meta.duration}\n            path={`/talk/${talk.slug}`}\n            presenter={{\n              name: talk.presenter.name,\n              path: `/speaker/${String.slugify(talk.presenter.name)}`,\n            }}\n            tags={talk.tag.map(tag => {\n              return { name: tag, path: `/tag/${String.slugify(tag)}` }\n            })}\n            title={talk.title}\n          />\n\n          <TalkList\n            list={normalizeResult(this.props.data.allTalkJson).map(talk => {\n              return {\n                path: `/talk/${talk.slug}`,\n                tags: talk.tag.map(tag => {\n                  return { name: tag, path: `/tag/${String.slugify(tag)}` }\n                }),\n                presenter: {\n                  name: talk.presenter.name,\n                  path: `/speaker/${String.slugify(talk.presenter.name)}`,\n                },\n                ...talk,\n              }\n            })}\n            title=\"Related Talks\"\n          />\n        </div>\n      </Layout>\n    )\n  }\n}\n\n/*eslint no-undef: \"off\"*/\nexport const query = graphql`\n  query TalkQuery($slug: String, $tags: [String]) {\n    talkJson(slug: { eq: $slug }) {\n      description\n      meta {\n        duration\n      }\n      presenter {\n        name\n      }\n      slug\n      source {\n        id\n        provider\n      }\n      tag\n      title\n    }\n    allTalkJson(\n      limit: 10\n      filter: { tag: { in: $tags }, slug: { ne: $slug } }\n    ) {\n      edges {\n        node {\n          description\n          meta {\n            duration\n          }\n          presenter {\n            name\n          }\n          source {\n            id\n            provider\n          }\n          slug\n          tag\n          thumbnails {\n            default {\n              url\n              height\n              width\n            }\n          }\n          title\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}