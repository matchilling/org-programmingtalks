{"version":3,"sources":["webpack:///path---talk-functional-programming-design-patterns-by-scott-wlaschin-cbd2118261a99659da34.js","webpack:///./.cache/json/talk-functional-programming-design-patterns-by-scott-wlaschin.json"],"names":["webpackJsonp","2959","module","exports","data","talkJson","description","meta","duration","presenter","name","slug","source","id","provider","tag","title","allTalkJson","edges","node","thumbnails","default","url","height","width","pathContext","tags"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,UAAYC,YAAA,oWAAAC,MAA0XC,SAAA,aAAuBC,WAAcC,KAAA,MAAYC,KAAA,2DAAAC,QAA6EC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,qGAAAC,MAAA,4DAAgLC,aAAgBC,QAAUC,MAAQb,YAAA,upCAAAC,MAA6qCC,SAAA,YAAsBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,2CAAAI,KAAA,uFAAAK,YAA+JC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,gDAA2DG,MAAQb,YAAA,opCAA0jCC,MAAgHC,SAAA,YAAsBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,mCAAAI,KAAA,kFAAAK,YAAkJC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,wCAAiDG,MAAQb,YAAA,szBAAAC,MAA40BC,SAAA,YAAsBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,qEAAAI,KAAA,kMAAAK,YAAoSC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,0EAAmFG,MAAQb,YAAA,itBAAAC,MAA0uBC,SAAA,aAAuBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,yDAAAI,KAAA,oUAAAK,YAA0ZC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,kEAA0ES,aAAgBd,KAAA,2DAAAe,MAAA","file":"path---talk-functional-programming-design-patterns-by-scott-wlaschin-cbd2118261a99659da34.js","sourcesContent":["webpackJsonp([83211416691806],{\n\n/***/ 2959:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"talkJson\":{\"description\":\"In object-oriented development, we are all familiar with design patterns such as the Strategy pattern and Decorator pattern, and design principles such as SOLID. The functional programming community has design patterns and principles as well. This talk will provide an overview of some of these, and present some demonstrations of FP design in practice.\",\"meta\":{\"duration\":\"PT1H5M44S\"},\"presenter\":{\"name\":null},\"slug\":\"functional-programming-design-patterns-by-scott-wlaschin\",\"source\":{\"id\":\"E8I19uA-wGY\",\"provider\":\"youtube\"},\"tag\":[\"Software Design Pattern (Field Of Study)\",\"Functional Programming (Programming Language Paradigm)\"],\"title\":\"Functional programming design patterns by Scott Wlaschin\"},\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Haskell is a beautiful functional language, written by smart computer scientists, and having clever and elegant functional constructs. It clearly separates pure and impure parts of the program.\\nGame programming on the other hand is a very hands-on discipline, trying to wring out the most of the machine's performance, and aiming for one thing, in disregard of all else: a pleasant, challenging experience for the player.\\nI aim to bring intersect those worlds and describe the process, and the specifics, of writing a Haskell game. Functional reactive programming, bindings to graphical libraries, etc, will all have a role to play.\\n\\nby Elise Huard (@elise_huard)\\n\\nElise Huard is a software consultant who's been crafting and bashing together software for about 15 years now. Her skill set comprises talking to people, Haskell, Clojure, R, javascript, ruby, C, scaling, and a good few bits and bobs beside.\\nShe's spoken at a fair number of conferences, most of them Ruby, some of them javascript, some of them\\npolyglot.\\nShe's based in Berlin, Germany. She enjoys reading sci-fi, traveling, cooking, tinkering, and spending time with her husband and baby daughter.\",\"meta\":{\"duration\":\"PT29M37S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"1MNTerD8IuI\",\"provider\":\"youtube\"},\"slug\":\"writing-a-game-in-haskell-by-elise-huard\",\"tag\":[\"Haskell\",\"game programming\",\"Functional Programming (Programming Language Paradigm)\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/1MNTerD8IuI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"\\\"Writing a game in Haskell\\\" by Elise Huard\"}},{\"node\":{\"description\":\"The Clojure ecosystem, we're told, is made up of small, composable libraries. In practice, though, it's all too common to find that two libraries simply will not cleanly compose. This typically will lead to another library that does the same thing, but in a subtly different way. Sometimes this is warranted, but often it's not.\\n\\nThis talk will discuss the constraints and affordances that make a piece of code play nicely with other pieces of code. Attendees will learn how to write clean, reusable Clojure, drawing on the speaker's many past failures and few notable successes.\\n\\nThe first place I think of, when I try to tell someone about this quality, is a corner of an English country garden, where Zach Tellman grows against a wall.\\n\\nThe wall runs east to west; Zach grows flat against its southern side. The sun shines on him and as it warms the bricks behind Zach, the warm bricks themselves warms the peaches on him. It has a slightly dozy quality. Zach, carefully tied to grow flat against the wall; warming the bricks; the peaches growing in the sun; the wild grass growing around Zach's roots, in the angle where the earth and roots and wall all meet.\",\"meta\":{\"duration\":\"PT35M12S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"3oQTSP4FngY\",\"provider\":\"youtube\"},\"slug\":\"zach-tellman-always-be-composing\",\"tag\":[\"clojure\",\"abstraction\",\"Functional Programming (Programming Language Paradigm)\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/3oQTSP4FngY/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Zach Tellman - Always Be Composing\"}},{\"node\":{\"description\":\"Jafar Husain shares how Netflix uses the Reactive Extensions (Rx) library to build responsive user experiences that strive to be event-driven, scalable and resilient. Learn the power of the Observable and how Netflix has simplified code through the ability to filter, aggregate, compose and project data streams.\\n\\nThis talk discusses how Netflix uses Rx to:\\n- Declaratively build complex events out of simple events (ex. drag and drop)\\n- Coordinate and sequence multiple Ajax requests\\n- Reactively update the UI in response to data changes\\n- Eliminate memory leaks caused by neglecting to unsubscribe from events\\n- Gracefully propagate and handle asynchronous exceptions\\n\\nSlides: http://www.slideboom.com/presentations/1002549/Async-Javascript-at-Netflix-2014-03-19?pk=58d9-8985-be37-25f7-dc90-fe60-a9e2-03ab\\n\",\"meta\":{\"duration\":\"PT28M39S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"FAZJsxcykPs\",\"provider\":\"youtube\"},\"slug\":\"netflix-javascript-talks-async-javascript-with-reactive-extensions\",\"tag\":[\"JavaScript\",\"netflix\",\"netflix ui engineering\",\"Functional Programming (Programming Language Paradigm)\",\"User Experience Design (Industry)\",\"Web Development (Interest)\",\"Reactive Programming\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/FAZJsxcykPs/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Netflix JavaScript Talks - Async JavaScript with Reactive Extensions\"}},{\"node\":{\"description\":\"Learn from John Papa's talk \\\"10 AngularJS Patterns\\\" from Code on the Beach 2014 at One Ocean Resort & Spa, Atlantic Beach, Florida. Sunday, August 10, 2014. www.codeonthebeach.com\\n\\nAbstract:\\n\\\"Once you get beyond the AngularJS basics there are many decisions to be made on how to build robust and maintainable apps. Come learn how to build AngularJS apps that manage multiple screens, structure your application code, maintain clean code with popular patterns, implement CRUD, perform robust HTML validation, use local storage, pass unit tests, and use a automated build tasks. This session explores solutions to several of the common challenges that AngularJS developers face while building business applications.\\\"\",\"meta\":{\"duration\":\"PT1H1M27S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"UlvCbnKAH3g\",\"provider\":\"youtube\"},\"slug\":\"john-papa-10-angularjs-patterns-code-on-the-beach-2014\",\"tag\":[\"John Papa\",\"AngularJS (Software)\",\"Beach\",\"JavaScript\",\"Single Page Apps\",\"Patterns\",\"Code on the Beach\",\"conference\",\"Software Engineering (Industry)\",\"Software Development (Industry)\",\"Software Design Pattern (Field Of Study)\",\"Programming Language\",\"programming\",\"Jacksonville (City/Town/Village)\",\"Florida (US State)\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/UlvCbnKAH3g/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"John Papa - 10 AngularJS Patterns - Code on the Beach 2014\"}}]}},\"pathContext\":{\"slug\":\"functional-programming-design-patterns-by-scott-wlaschin\",\"tags\":[\"Software Design Pattern (Field Of Study)\",\"Functional Programming (Programming Language Paradigm)\"]}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---talk-functional-programming-design-patterns-by-scott-wlaschin-cbd2118261a99659da34.js","module.exports = {\"data\":{\"talkJson\":{\"description\":\"In object-oriented development, we are all familiar with design patterns such as the Strategy pattern and Decorator pattern, and design principles such as SOLID. The functional programming community has design patterns and principles as well. This talk will provide an overview of some of these, and present some demonstrations of FP design in practice.\",\"meta\":{\"duration\":\"PT1H5M44S\"},\"presenter\":{\"name\":null},\"slug\":\"functional-programming-design-patterns-by-scott-wlaschin\",\"source\":{\"id\":\"E8I19uA-wGY\",\"provider\":\"youtube\"},\"tag\":[\"Software Design Pattern (Field Of Study)\",\"Functional Programming (Programming Language Paradigm)\"],\"title\":\"Functional programming design patterns by Scott Wlaschin\"},\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Haskell is a beautiful functional language, written by smart computer scientists, and having clever and elegant functional constructs. It clearly separates pure and impure parts of the program.\\nGame programming on the other hand is a very hands-on discipline, trying to wring out the most of the machine's performance, and aiming for one thing, in disregard of all else: a pleasant, challenging experience for the player.\\nI aim to bring intersect those worlds and describe the process, and the specifics, of writing a Haskell game. Functional reactive programming, bindings to graphical libraries, etc, will all have a role to play.\\n\\nby Elise Huard (@elise_huard)\\n\\nElise Huard is a software consultant who's been crafting and bashing together software for about 15 years now. Her skill set comprises talking to people, Haskell, Clojure, R, javascript, ruby, C, scaling, and a good few bits and bobs beside.\\nShe's spoken at a fair number of conferences, most of them Ruby, some of them javascript, some of them\\npolyglot.\\nShe's based in Berlin, Germany. She enjoys reading sci-fi, traveling, cooking, tinkering, and spending time with her husband and baby daughter.\",\"meta\":{\"duration\":\"PT29M37S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"1MNTerD8IuI\",\"provider\":\"youtube\"},\"slug\":\"writing-a-game-in-haskell-by-elise-huard\",\"tag\":[\"Haskell\",\"game programming\",\"Functional Programming (Programming Language Paradigm)\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/1MNTerD8IuI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"\\\"Writing a game in Haskell\\\" by Elise Huard\"}},{\"node\":{\"description\":\"The Clojure ecosystem, we're told, is made up of small, composable libraries. In practice, though, it's all too common to find that two libraries simply will not cleanly compose. This typically will lead to another library that does the same thing, but in a subtly different way. Sometimes this is warranted, but often it's not.\\n\\nThis talk will discuss the constraints and affordances that make a piece of code play nicely with other pieces of code. Attendees will learn how to write clean, reusable Clojure, drawing on the speaker's many past failures and few notable successes.\\n\\nThe first place I think of, when I try to tell someone about this quality, is a corner of an English country garden, where Zach Tellman grows against a wall.\\n\\nThe wall runs east to west; Zach grows flat against its southern side. The sun shines on him and as it warms the bricks behind Zach, the warm bricks themselves warms the peaches on him. It has a slightly dozy quality. Zach, carefully tied to grow flat against the wall; warming the bricks; the peaches growing in the sun; the wild grass growing around Zach's roots, in the angle where the earth and roots and wall all meet.\",\"meta\":{\"duration\":\"PT35M12S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"3oQTSP4FngY\",\"provider\":\"youtube\"},\"slug\":\"zach-tellman-always-be-composing\",\"tag\":[\"clojure\",\"abstraction\",\"Functional Programming (Programming Language Paradigm)\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/3oQTSP4FngY/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Zach Tellman - Always Be Composing\"}},{\"node\":{\"description\":\"Jafar Husain shares how Netflix uses the Reactive Extensions (Rx) library to build responsive user experiences that strive to be event-driven, scalable and resilient. Learn the power of the Observable and how Netflix has simplified code through the ability to filter, aggregate, compose and project data streams.\\n\\nThis talk discusses how Netflix uses Rx to:\\n- Declaratively build complex events out of simple events (ex. drag and drop)\\n- Coordinate and sequence multiple Ajax requests\\n- Reactively update the UI in response to data changes\\n- Eliminate memory leaks caused by neglecting to unsubscribe from events\\n- Gracefully propagate and handle asynchronous exceptions\\n\\nSlides: http://www.slideboom.com/presentations/1002549/Async-Javascript-at-Netflix-2014-03-19?pk=58d9-8985-be37-25f7-dc90-fe60-a9e2-03ab\\n\",\"meta\":{\"duration\":\"PT28M39S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"FAZJsxcykPs\",\"provider\":\"youtube\"},\"slug\":\"netflix-javascript-talks-async-javascript-with-reactive-extensions\",\"tag\":[\"JavaScript\",\"netflix\",\"netflix ui engineering\",\"Functional Programming (Programming Language Paradigm)\",\"User Experience Design (Industry)\",\"Web Development (Interest)\",\"Reactive Programming\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/FAZJsxcykPs/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Netflix JavaScript Talks - Async JavaScript with Reactive Extensions\"}},{\"node\":{\"description\":\"Learn from John Papa's talk \\\"10 AngularJS Patterns\\\" from Code on the Beach 2014 at One Ocean Resort & Spa, Atlantic Beach, Florida. Sunday, August 10, 2014. www.codeonthebeach.com\\n\\nAbstract:\\n\\\"Once you get beyond the AngularJS basics there are many decisions to be made on how to build robust and maintainable apps. Come learn how to build AngularJS apps that manage multiple screens, structure your application code, maintain clean code with popular patterns, implement CRUD, perform robust HTML validation, use local storage, pass unit tests, and use a automated build tasks. This session explores solutions to several of the common challenges that AngularJS developers face while building business applications.\\\"\",\"meta\":{\"duration\":\"PT1H1M27S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"UlvCbnKAH3g\",\"provider\":\"youtube\"},\"slug\":\"john-papa-10-angularjs-patterns-code-on-the-beach-2014\",\"tag\":[\"John Papa\",\"AngularJS (Software)\",\"Beach\",\"JavaScript\",\"Single Page Apps\",\"Patterns\",\"Code on the Beach\",\"conference\",\"Software Engineering (Industry)\",\"Software Development (Industry)\",\"Software Design Pattern (Field Of Study)\",\"Programming Language\",\"programming\",\"Jacksonville (City/Town/Village)\",\"Florida (US State)\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/UlvCbnKAH3g/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"John Papa - 10 AngularJS Patterns - Code on the Beach 2014\"}}]}},\"pathContext\":{\"slug\":\"functional-programming-design-patterns-by-scott-wlaschin\",\"tags\":[\"Software Design Pattern (Field Of Study)\",\"Functional Programming (Programming Language Paradigm)\"]}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/talk-functional-programming-design-patterns-by-scott-wlaschin.json\n// module id = 2959\n// module chunks = 83211416691806"],"sourceRoot":""}