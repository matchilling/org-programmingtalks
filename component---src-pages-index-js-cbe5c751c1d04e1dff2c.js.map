{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["blacklist","IndexPage","render","talks","array","popularSpeakers","Object","keys","speakers","map","key","name","path","String","slugify","popularTags","this","props","data","allTalkJson","edges","Array","from","reduce","el","isArray","node","tag","arr","i","length","has","set","get","Map","sort","a","b","filter","talk","indexOf","slice","Math","floor","random","videoId","source","id","style","className","list","normalizeResult","tags","slug","presenter","React","Component","query"],"mappings":"kaAaA,IAAMA,EAAY,CAChB,uBACA,aACA,MACA,qBACA,cACA,wBACA,iBACA,kBACA,8BAqBmBC,E,gLACnBC,OAAA,WACE,IApBiBC,EADFC,EAqBTC,EAAkBC,OAAOC,KAAKC,GAAUC,KAAI,SAAAC,GAChD,MAAO,CAAEC,KAAMD,EAAKE,KAAK,YAAaC,IAAOC,QAAQJ,OAEjDK,GAvBWZ,EAuBgBa,KAAKC,MAAMC,KAAKC,YAAYC,MAtBxDC,MAAMC,KACXnB,EAAMoB,QAAO,SAACd,EAAKe,GACjB,IAAKH,MAAMI,QAAQD,EAAGE,KAAKC,KAAM,OAAOC,IAExC,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAGE,KAAKC,IAAIG,OAAQD,IAAK,CAC3C,IAAMF,EAAMH,EAAGE,KAAKC,IAAIE,GACpBpB,EAAIsB,IAAIJ,GAAMlB,EAAIuB,IAAIL,EAAKlB,EAAIwB,IAAIN,GAAO,GACzClB,EAAIuB,IAAIL,EAAK,GAGpB,OAAOlB,IACN,IAAIyB,MACPC,MAAK,SAACC,EAAGC,GACT,OAAOA,EAAE,GAAKD,EAAE,OAUbE,QAAO,SAAAC,GAAI,SAAO,EAAIvC,EAAUwC,QAAQD,EAAK,QAC7CE,MAAM,EAAG,IACThC,KAAI,SAAAC,GACH,MAAO,CAAEC,KAAMD,EAAI,GAAIE,KAAK,QAASC,IAAOC,QAAQJ,EAAI,QAEtD6B,GA9BSnC,EA8BSY,KAAKC,MAAMC,KAAKC,YAAYC,MA9B5BhB,EAAMsC,KAAKC,MAAMD,KAAKE,SAAWxC,EAAM0B,UA8BJJ,KAE3D,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQmB,QAASN,EAAKO,OAAOC,GAAIC,OAAK,IACtC,yBAAKC,UAAU,eACb,kBAAC,IAAD,MACA,yBAAKA,UAAU,WACb,wBAAIA,UAAU,SAAd,oBACA,kBAAC,IAAD,CAASA,UAAU,OAAOC,KAAM7C,IAChC,wBAAI4C,UAAU,SAAd,gBACA,kBAAC,IAAD,CAASA,UAAU,OAAOC,KAAMnC,KAElC,kBAAC,IAAD,CACEmC,KAAMC,0BAAgBnC,KAAKC,MAAMC,KAAKC,aAAaV,KAAI,SAAA8B,GACrD,OAAO,OAAP,QACEa,KAAMb,EAAKZ,IAAIlB,KAAI,SAAAkB,GACjB,MAAO,CAAEhB,KAAMgB,EAAKf,KAAK,QAASC,IAAOC,QAAQa,OAEnDf,KAAK,SAAU2B,EAAKc,KACpBC,UAAW,CACT3C,KAAM4B,EAAKe,UAAU3C,KACrBC,KAAK,YAAaC,IAAOC,QAAQyB,EAAKe,UAAU3C,QAE/C4B,W,GAnCoBgB,IAAMC,WA8ChCC,EAAK,c","file":"component---src-pages-index-js-cbe5c751c1d04e1dff2c.js","sourcesContent":["import { normalizeResult } from '../utils/graphql'\nimport React from 'react'\nimport String from '../utils/string'\nimport Player from '../components/Player'\nimport speakers from '../../data/speaker/index.json'\nimport TagList from '../components/TagList'\nimport TalkList from '../components/TalkList'\nimport Search from '../components/Search'\nimport { graphql } from 'gatsby'\n\nimport './index.scss'\nimport Layout from '../components/Layout'\n\nconst blacklist = [\n  'Programming Language',\n  'Bash Films',\n  'psf',\n  'Video Conferencing',\n  'programming',\n  'Event Video Recording',\n  'video services',\n  'videoconference',\n  'Conference Video Recording',\n]\nconst randomTalk = array => array[Math.floor(Math.random() * array.length)]\nconst sumByTagDesc = talks => {\n  return Array.from(\n    talks.reduce((map, el) => {\n      if (!Array.isArray(el.node.tag)) return arr\n\n      for (let i = 0; i < el.node.tag.length; i++) {\n        const tag = el.node.tag[i]\n        if (map.has(tag)) map.set(tag, map.get(tag) + 1)\n        else map.set(tag, 1)\n      }\n\n      return map\n    }, new Map())\n  ).sort((a, b) => {\n    return b[1] - a[1]\n  })\n}\n\nexport default class IndexPage extends React.Component {\n  render() {\n    const popularSpeakers = Object.keys(speakers).map(key => {\n      return { name: key, path: `/speaker/${String.slugify(key)}` }\n    })\n    const popularTags = sumByTagDesc(this.props.data.allTalkJson.edges)\n      .filter(talk => !(-1 < blacklist.indexOf(talk[0])))\n      .slice(0, 15)\n      .map(key => {\n        return { name: key[0], path: `/tag/${String.slugify(key[0])}` }\n      })\n    const talk = randomTalk(this.props.data.allTalkJson.edges).node\n\n    return (\n      <Layout>\n        <Player videoId={talk.source.id} style />\n        <div className=\"row content\">\n          <Search />\n          <div className=\"popular\">\n            <h3 className=\"title\">Popular speakers</h3>\n            <TagList className=\"tags\" list={popularSpeakers} />\n            <h3 className=\"title\">Popular tags</h3>\n            <TagList className=\"tags\" list={popularTags} />\n          </div>\n          <TalkList\n            list={normalizeResult(this.props.data.allTalkJson).map(talk => {\n              return {\n                tags: talk.tag.map(tag => {\n                  return { name: tag, path: `/tag/${String.slugify(tag)}` }\n                }),\n                path: `/talk/${talk.slug}`,\n                presenter: {\n                  name: talk.presenter.name,\n                  path: `/speaker/${String.slugify(talk.presenter.name)}`,\n                },\n                ...talk,\n              }\n            })}\n          />\n        </div>\n      </Layout>\n    )\n  }\n}\n\n/*eslint no-undef: \"off\"*/\nexport const query = graphql`\n  query AllTalkQuery {\n    allTalkJson {\n      edges {\n        node {\n          description\n          meta {\n            duration\n          }\n          presenter {\n            name\n          }\n          source {\n            id\n            provider\n          }\n          slug\n          tag\n          thumbnails {\n            default {\n              url\n              height\n              width\n            }\n          }\n          title\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}