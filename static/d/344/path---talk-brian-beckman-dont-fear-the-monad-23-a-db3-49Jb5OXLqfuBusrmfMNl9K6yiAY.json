{"data":{"talkJson":{"description":"Cross posted from msdn's channel 9.\n\nFunctional programming is increasing in popularity these days given the inherent problems with shared mutable state that is rife in the imperative world. As we march on to a world of multi and many-core chipsets, software engineering must evolve to better equip software engineers with the tools to exploit the vast power of multiple core processors as it won't come for free as it did in the recent past which was predictably based on Moore's law.\n\nOf course, learning new ways to think about programming semantics and code patterns are not always straight forward. For example, most imperative programmers (which include most of us who build software for a living...) are somewhat perplexed by the notion of functions as first class data structures that can be combined to create powerful and composable systems. Languages like Haskell are pure functional languages and require programmers to think in a different way, often in a precise mathematical fashion where composing and chaining functions is \"the Way\".\n\nDr. Brian Beckman, a Channel 9 celebrity, astrophysicist and senior software engineer thought it would be a very good idea to address the complexity of monads in an easy to understand way: a technical conversation at the whiteboard with yours truly for Channel 9.\n\nThis video interview is the result of Brian's idea that he can in fact remove the fear of monads from anybody who pays attention to his explanation. Of course, you can't just cover monads in a vacuum (category theory is not really addressed here) so the context is functional programming (Brian covers functions and composable functional structures (function chains) and of course monoids and then monads).\n\nTune in. There's a lot to learn here and only Brian can make monads easy to understand for the rest of us!","meta":{"duration":"PT1H7M11S"},"presenter":{"name":null},"slug":"brian-beckman-dont-fear-the-monad","source":{"id":"ZhuHCtR3xq8","provider":"youtube"},"tag":["haskell","monads","programming","brian beckman","functional programming","Haskell"],"title":"Brian Beckman: Don't fear the Monad"},"allTalkJson":{"edges":[{"node":{"description":"Haskell is a beautiful functional language, written by smart computer scientists, and having clever and elegant functional constructs. It clearly separates pure and impure parts of the program.\nGame programming on the other hand is a very hands-on discipline, trying to wring out the most of the machine's performance, and aiming for one thing, in disregard of all else: a pleasant, challenging experience for the player.\nI aim to bring intersect those worlds and describe the process, and the specifics, of writing a Haskell game. Functional reactive programming, bindings to graphical libraries, etc, will all have a role to play.\n\nby Elise Huard (@elise_huard)\n\nElise Huard is a software consultant who's been crafting and bashing together software for about 15 years now. Her skill set comprises talking to people, Haskell, Clojure, R, javascript, ruby, C, scaling, and a good few bits and bobs beside.\nShe's spoken at a fair number of conferences, most of them Ruby, some of them javascript, some of them\npolyglot.\nShe's based in Berlin, Germany. She enjoys reading sci-fi, traveling, cooking, tinkering, and spending time with her husband and baby daughter.","meta":{"duration":"PT29M37S"},"presenter":{"name":null},"source":{"id":"1MNTerD8IuI","provider":"youtube"},"slug":"writing-a-game-in-haskell-by-elise-huard","tag":["Haskell","game programming","Functional Programming (Programming Language Paradigm)"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/1MNTerD8IuI/default.jpg","height":90,"width":120}},"title":"\"Writing a game in Haskell\" by Elise Huard"}},{"node":{"description":"Boston Haskell, February 18, 2015\nNikhil builds an Enigma machine. First in Cryptol, then in hardware by way of Haskell.\nSlides and code available here:  https://github.com/rsnikhil/Enigma_Cryptol_Bluespec_BSV.git","meta":{"duration":"PT59M41S"},"presenter":{"name":null},"source":{"id":"9-u2n4GgcVw","provider":"youtube"},"slug":"rishiyur-s-nikhil-enigmatic-haskell-haskellish-enigma","tag":["Haskell"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/9-u2n4GgcVw/default.jpg","height":90,"width":120}},"title":"Rishiyur S. Nikhil - Enigmatic Haskell, Haskellish Enigma"}},{"node":{"description":"The D Programming Language Conference, May 21-23 2014, Menlo Park, CA.","meta":{"duration":"PT48M37S"},"presenter":{"name":null},"source":{"id":"AhR4PSExnqk","provider":"youtube"},"slug":"dconf-2014-sdc-a-d-compiler-as-a-library-by-amaury-sechet","tag":["D programming language","programming languages","programming","dconf","dlang"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/AhR4PSExnqk/default.jpg","height":90,"width":120}},"title":"DConf 2014: SDC, a D Compiler as a Library by Amaury Sechet"}},{"node":{"description":"Abstract \nThe introduction of lambdas and first class function objects forever changed the nature of C++, opening up the floodgates to functional programming. Sometimes the best library design is based on a pattern that's very familiar to a Haskell programmer but alien to a C++ programmer. The new std::future proposal for C++17 hides several functional patterns including that of a monad -- the boogeyman of generations of imperative programmers. But once seen in action, the monad becomes just one more pattern in the toolbox of a library designer. \nBio\nBartosz Milewski always tries to be where the action is. He started as a quantum physicist when supertstrings were hot, joined the software industry to build the search engine for Microsoft Windows, became an avid proponent of object-oriented programming, and wrote a book on C++. He got into concurrency and parallelism when the multicores hit the market, and now he's evangelizing functional programming as the Holy Grail of software development.","meta":{"duration":"PT1H20M59S"},"presenter":{"name":null},"source":{"id":"BFnhhPehpKw","provider":"youtube"},"slug":"c17-i-see-a-monad-in-your-future","tag":["NWCPP","Bartosz Milewski","Monad","functional programming","Haskel","futures","promise","design patterns","software development","concurrent programming","parallell programming"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/BFnhhPehpKw/default.jpg","height":90,"width":120}},"title":"C++17: I See a Monad in Your Future"}},{"node":{"description":"We would like to thank everyone for attending the first edition of Atmosphere Conference, which was held on the 13th-14th May 2013 in Concordia Design in Poznan. Considering the fact that the event was organised for the first time, we must admit that there was a great number of attendees interested in web scalability and performance. Together with organisers we managed to gather over 200 people. Two tracks of lectures, interviews and thousands of conversations behind the scenes guaranteed a successful conference, which we are proud to be organisers of. We hope that this event has met your expectations and gave you a chance to exchange experience, establish cooperation and meet people with similar interests. The first edition of Atmosphere would not be possible if not a great partners' support. Main Partner was the Allegro Group, which has also helped us create the conference schedule. Gold Sponsors were Akamai Technologies and Cisco Systems, whereas Silver Sponsor was the Dell Company. We would also like to thank our media partners, online services and bloggers who helped us promote the event. Photos, presentations and videos will be available soon on the website. Once again - thank you all for creating the first edition of Atmosphere Conference and see you next year.","meta":{"duration":"PT51M26S"},"presenter":{"name":null},"source":{"id":"C4z_9F6nfS8","provider":"youtube"},"slug":"atmosphere-2013-your-css-is-a-mess-jonathan-snook-shopify","tag":["atmosphere","conference","2013","allegro","allegrogroup","cisco systems","cisco","dell","akamai","akamai technologies","performance","scalability","devops","web","java","javascript","css","http","developer","programming","tdd","data","john paul","conde nast"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/C4z_9F6nfS8/default.jpg","height":90,"width":120}},"title":"Atmosphere 2013: \"Your CSS is a Mess\" Jonathan Snook (Shopify)"}},{"node":{"description":"Build Your Own Lisp for Great Justice\n\nImplementing a toy Lisp interpreter is practically a rite of passage for the budding computer scientist. This hallowed tradition is described in detail in \"Lisp in Small Pieces,\" the seminal work on the making of Lisps, but everybody loves a tl;dr, so let's do the 40 minute executive summary.\n\nWe'll charge at high speed\nthrough the following topics, with Clojure code to follow along with as we go (because there's no better language for implementing a Lisp than another Lisp):\n\n* Parsing: turning text files into ASTs\n* Fundamental Lisp datatypes\n* McCarthy's elementary functions\n* Evaluating Lisp code\n* Lambdas and lexical scope\n* Your friend, the state monad\n* Beyond Lisp: pattern matching and type systems\n\nWhen we're done, you'll be ready to go forth and fill the world with Lisps of all shapes, colours and Greenspun violations for Great Justice. Also, it'll be good fun.\n\nSpeaker\nBodil Stokke (@bodil) is a compulsive conference speaker in the fields of functional programming and internets technologies, and is a co-organiser of three annual developer conferences in her home\ntown of Oslo, Norway, mostly because she's still learning how to stop. She is a prolific contributor to the Free Software community, primarily as a Clojure developer, and has recently taken up designing new programming languages as a hobby. In her spare time, she works as a web developer for Comoyo, which is like Hulu for non-Americans.","meta":{"duration":"PT53M52S"},"presenter":{"name":null},"source":{"id":"DHubfS8E--o","provider":"youtube"},"slug":"functional-programming-bodil-stokke","tag":["programming","lisp","geek","functional","clojure"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/DHubfS8E--o/default.jpg","height":90,"width":120}},"title":"Functional programming - Bodil Stokke"}},{"node":{"description":"Kenneth Foner's Comonad talk at the Boston Haskell meetup, September 17, 2014.\nCode and slides: https://github.com/kwf/ComonadSheet","meta":{"duration":"PT58M33S"},"presenter":{"name":null},"source":{"id":"F7F-BzOB670","provider":"youtube"},"slug":"kenneth-foner-getting-a-quick-fix-on-comonads","tag":["Haskell"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/F7F-BzOB670/default.jpg","height":90,"width":120}},"title":"Kenneth Foner - Getting a Quick Fix on Comonads"}},{"node":{"description":"Dan Doel's talk at the Boston Haskell Meetup, Sept 17, 2014\nSlides: https://drive.google.com/file/d/0B8Kkr1O1jFwcRmhxbzBMR1Ntb3c/edit?usp=sharing","meta":{"duration":"PT1H9M40S"},"presenter":{"name":null},"source":{"id":"McFNkLPTOSY","provider":"youtube"},"slug":"dan-doel-introduction-to-low-level-haskell-optimization","tag":["Haskell"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/McFNkLPTOSY/default.jpg","height":90,"width":120}},"title":"Dan Doel - Introduction to Low Level Haskell Optimization"}},{"node":{"description":"If you always wanted to know more about about Clang's AST [1], for example because you want to implement an awesome tool [2, 3] based on Clang, or simply because you want to start contributing, this talk is for you.\n\nMake sure to watch in HD to be able to read the font in the terminal!\n\nThe semantic code completion in the vim session is powered by YCM [4], and the quick formatting is done by clang-format [5].\n\n[1] http://clang.llvm.org/docs/IntroductionToTheClangAST.html\n[2] http://clang.llvm.org/docs/Tooling.html\n[3] http://clang.llvm.org/docs/LibTooling.html\n[4] https://github.com/Valloric/YouCompleteMe\n[5] http://clang.llvm.org/docs/ClangFormat.html\n\nFrom the LLVM Euro Conference 2013: http://llvm.org/devmtg/2013-04/","meta":{"duration":"PT44M53S"},"presenter":{"name":null},"source":{"id":"VqCkCDFLSsc","provider":"youtube"},"slug":"the-clang-ast-a-tutorial","tag":["C++","Clang","compiler","programming"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/VqCkCDFLSsc/default.jpg","height":90,"width":120}},"title":"The Clang AST - a Tutorial"}},{"node":{"description":" ","meta":{"duration":"PT1H4M35S"},"presenter":{"name":null},"source":{"id":"YScIPA8RbVE","provider":"youtube"},"slug":"the-algebra-of-algebraic-data-types","tag":["London","Haskell","Algebra","Algebraic","Types"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/YScIPA8RbVE/default.jpg","height":90,"width":120}},"title":"The Algebra of Algebraic Data Types"}}]}},"pageContext":{"slug":"brian-beckman-dont-fear-the-monad","tags":["haskell","monads","programming","brian beckman","functional programming","Haskell"]}}