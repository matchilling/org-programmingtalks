{"data":{"talkJson":{"description":"Build Your Own Lisp for Great Justice\n\nImplementing a toy Lisp interpreter is practically a rite of passage for the budding computer scientist. This hallowed tradition is described in detail in \"Lisp in Small Pieces,\" the seminal work on the making of Lisps, but everybody loves a tl;dr, so let's do the 40 minute executive summary.\n\nWe'll charge at high speed\nthrough the following topics, with Clojure code to follow along with as we go (because there's no better language for implementing a Lisp than another Lisp):\n\n* Parsing: turning text files into ASTs\n* Fundamental Lisp datatypes\n* McCarthy's elementary functions\n* Evaluating Lisp code\n* Lambdas and lexical scope\n* Your friend, the state monad\n* Beyond Lisp: pattern matching and type systems\n\nWhen we're done, you'll be ready to go forth and fill the world with Lisps of all shapes, colours and Greenspun violations for Great Justice. Also, it'll be good fun.\n\nSpeaker\nBodil Stokke (@bodil) is a compulsive conference speaker in the fields of functional programming and internets technologies, and is a co-organiser of three annual developer conferences in her home\ntown of Oslo, Norway, mostly because she's still learning how to stop. She is a prolific contributor to the Free Software community, primarily as a Clojure developer, and has recently taken up designing new programming languages as a hobby. In her spare time, she works as a web developer for Comoyo, which is like Hulu for non-Americans.","meta":{"duration":"PT53M52S"},"presenter":{"name":null},"slug":"functional-programming-bodil-stokke","source":{"id":"DHubfS8E--o","provider":"youtube"},"tag":["programming","lisp","geek","functional","clojure"],"title":"Functional programming - Bodil Stokke"},"allTalkJson":{"edges":[{"node":{"description":"The Clojure ecosystem, we're told, is made up of small, composable libraries. In practice, though, it's all too common to find that two libraries simply will not cleanly compose. This typically will lead to another library that does the same thing, but in a subtly different way. Sometimes this is warranted, but often it's not.\n\nThis talk will discuss the constraints and affordances that make a piece of code play nicely with other pieces of code. Attendees will learn how to write clean, reusable Clojure, drawing on the speaker's many past failures and few notable successes.\n\nThe first place I think of, when I try to tell someone about this quality, is a corner of an English country garden, where Zach Tellman grows against a wall.\n\nThe wall runs east to west; Zach grows flat against its southern side. The sun shines on him and as it warms the bricks behind Zach, the warm bricks themselves warms the peaches on him. It has a slightly dozy quality. Zach, carefully tied to grow flat against the wall; warming the bricks; the peaches growing in the sun; the wild grass growing around Zach's roots, in the angle where the earth and roots and wall all meet.","meta":{"duration":"PT35M12S"},"presenter":{"name":null},"source":{"id":"3oQTSP4FngY","provider":"youtube"},"slug":"zach-tellman-always-be-composing","tag":["clojure","abstraction","Functional Programming (Programming Language Paradigm)"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/3oQTSP4FngY/default.jpg","height":90,"width":120}},"title":"Zach Tellman - Always Be Composing"}},{"node":{"description":"Many of us have hazy memories of finite state machines from computer science theory classes in college. But finite state machines (FSMs) have real, practical value, and it is useful to know how to build and apply them in Clojure. For example, FSMs have long been popular to model game AIs and workflow rules, and FSMs provide the behind-the-scenes magic that powers Java's regexes and core.async's go blocks. In this talk, we'll look at two programming puzzles that, suprisingly, have very elegant solutions when looked at through the lens of FSMs, with code demonstrations using two different Clojure libraries for automata (automat and reduce-fsm), as well as loco, a Clojure constraint solver.\n\nAbout the speakers: Mark Engelberg has been an active member of the Clojure community ever since Clojure turned 1.0, and is the primary developer of math.combinatorics, math.numeric-tower, data.priority-map, ubergraph, and a co-developer of instaparse. By day, he teaches Scheme and Clojure to talented kids in the Seattle area; by night, he creates logic puzzles and games, using Clojure as his \"secret weapon\". His latest game is Code Master, a programming-themed puzzle game for kids, available exclusively at Target (and created with Clojure, of course!)\n\nAlex Engelberg was indoctrinated by his father in the ways of functional programming at a young age, and Clojure rapidly became his language of choice. He is happy to be using Clojure professionally as a software engineer at SecureOne in Seattle. Alex also enjoys contributing to open source; he is the primary developer of loco, and co-developer of instaparse.","meta":{"duration":"PT38M4S"},"presenter":{"name":null},"source":{"id":"AEhULv4ruL4","provider":"youtube"},"slug":"solving-problems-with-automata-mark-engelberg-and-alex-engelberg","tag":["clojure","automata","finite state machines","Automata Theory"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/AEhULv4ruL4/default.jpg","height":90,"width":120}},"title":"Solving Problems with Automata - Mark Engelberg & Alex Engelberg"}},{"node":{"description":"The D Programming Language Conference, May 21-23 2014, Menlo Park, CA.","meta":{"duration":"PT48M37S"},"presenter":{"name":null},"source":{"id":"AhR4PSExnqk","provider":"youtube"},"slug":"dconf-2014-sdc-a-d-compiler-as-a-library-by-amaury-sechet","tag":["D programming language","programming languages","programming","dconf","dlang"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/AhR4PSExnqk/default.jpg","height":90,"width":120}},"title":"DConf 2014: SDC, a D Compiler as a Library by Amaury Sechet"}},{"node":{"description":"We would like to thank everyone for attending the first edition of Atmosphere Conference, which was held on the 13th-14th May 2013 in Concordia Design in Poznan. Considering the fact that the event was organised for the first time, we must admit that there was a great number of attendees interested in web scalability and performance. Together with organisers we managed to gather over 200 people. Two tracks of lectures, interviews and thousands of conversations behind the scenes guaranteed a successful conference, which we are proud to be organisers of. We hope that this event has met your expectations and gave you a chance to exchange experience, establish cooperation and meet people with similar interests. The first edition of Atmosphere would not be possible if not a great partners' support. Main Partner was the Allegro Group, which has also helped us create the conference schedule. Gold Sponsors were Akamai Technologies and Cisco Systems, whereas Silver Sponsor was the Dell Company. We would also like to thank our media partners, online services and bloggers who helped us promote the event. Photos, presentations and videos will be available soon on the website. Once again - thank you all for creating the first edition of Atmosphere Conference and see you next year.","meta":{"duration":"PT51M26S"},"presenter":{"name":null},"source":{"id":"C4z_9F6nfS8","provider":"youtube"},"slug":"atmosphere-2013-your-css-is-a-mess-jonathan-snook-shopify","tag":["atmosphere","conference","2013","allegro","allegrogroup","cisco systems","cisco","dell","akamai","akamai technologies","performance","scalability","devops","web","java","javascript","css","http","developer","programming","tdd","data","john paul","conde nast"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/C4z_9F6nfS8/default.jpg","height":90,"width":120}},"title":"Atmosphere 2013: \"Your CSS is a Mess\" Jonathan Snook (Shopify)"}},{"node":{"description":"About the speaker: Stuart Halloway (@stuarthalloway) is a founder and President of Cognitect (formerly Relevance). He is a Clojure committer, and a developer of the Datomic database. Stuart has spoken at a variety of industry events, including Strange Loop, Clojure/conj, EuroClojure, ClojureWest, SpeakerConf, QCon, GOTO, OSCON, RailsConf, RubyConf, JavaOne, and NFJS. Stuart has written a number of books and technical articles. Of these, he is most proud of Programming Clojure.","meta":{"duration":"PT49M9S"},"presenter":{"name":null},"source":{"id":"FihU5JxmnBg","provider":"youtube"},"slug":"debugging-with-the-scientific-method-stuart-halloway","tag":["clojure","Debugging (Quotation Subject)","Scientific Method (Literature Subject)"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/FihU5JxmnBg/default.jpg","height":90,"width":120}},"title":"Debugging with the Scientific Method - Stuart Halloway"}},{"node":{"description":"Genetic programming harnesses the mechanisms of natural evolution, including mutation, recombination, and natural selection, to automatically synthesize computer programs. It has been applied to a wide range of problems spanning several areas of science, engineering, and the arts, in many cases equaling or exceeding human performance.\n\nGenetic programming's roots are in Lisp, making Clojure a natural choice for modern genetic programming research and development. In this talk I will show how a simple genetic programming system can be written in about 100 lines of Clojure code, how a mature genetic programming system (PushGP) implemented in Clojure can improve the state of the art in automatic programming, and how genetic programming can be incorporated into an artificial life environment implemented in Clojure and Quil.\n\nAbout the speaker: Lee Spector is a Professor of Computer Science in the School of Cognitive Science at Hampshire College in Amherst, Massachusetts, and an adjunct professor of Computer Science at the University of Massachusetts, Amherst. His areas of teaching and research include genetic and evolutionary computation, quantum computation, and a variety of intersections between computer science, cognitive science, evolutionary biology, and the arts. He is the Editor-in-Chief of the journal Genetic Programming and Evolvable Machines (published by Springer) and a member of the editorial board of Evolutionary Computation (published by MIT Press). He is also a member of the SIGEVO executive committee and he was named a Fellow of the International Society for Genetic and Evolutionary Computation. \n\nMore details: http://hampshire.edu/lspector Resume: http://hampshire.edu/lspector/spector-resume.pdf","meta":{"duration":"PT40M8S"},"presenter":{"name":null},"source":{"id":"HWMJdO4klIE","provider":"youtube"},"slug":"genetic-programming-in-clojure-lee-spector","tag":["clojure","Genetic Programming"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/HWMJdO4klIE/default.jpg","height":90,"width":120}},"title":"Genetic Programming in Clojure - Lee Spector"}},{"node":{"description":"This presentation will introduce a new start-up focused on machine learning that is using Clojure. We will discuss the technology and architecture it has developed for real-time machine learning and pattern recognition, and how Clojure provides a unique set of advantages.\n\nThere will be a live coding demonstration of interactively applying machine learning to a simple task and visualization of the results.","meta":{"duration":"PT27M38S"},"presenter":{"name":null},"source":{"id":"QJ1qgCr09j8","provider":"youtube"},"slug":"machine-learning-live-mike-anderson","tag":["clojure"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/QJ1qgCr09j8/default.jpg","height":90,"width":120}},"title":"Machine Learning Live - Mike Anderson"}},{"node":{"description":"Data science / big data exists at the overlap of traditional analytics and large scale computation. As such, neither the traditional tools of analytics (R, Mathematica, Matlab) nor mainstreams languages (Java, C++, C#) supply its requirements well as they cannot simultaneously provide the mathematical abstractions and real-word platform power that are required. Clojure is privileged in that it has the potential to provide just exactly that. This talk will explore why this is the case, the tools that are available and the challenges that need be overcome for Clojure to realise this potential.","meta":{"duration":"PT32M40S"},"presenter":{"name":null},"source":{"id":"RVmY2lQ4DHE","provider":"youtube"},"slug":"clojure-data-science-edmund-jackson","tag":["clojure"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/RVmY2lQ4DHE/default.jpg","height":90,"width":120}},"title":"Clojure Data Science - Edmund Jackson"}},{"node":{"description":"For most of human history, furniture was built by hand using a small set of simple tools. This approach connects you in a profoundly direct way to the work, your effort to the result. This changed with the rise of machine tools, which made production more efficient but also altered what's made and how we think about making it in in a profound way. This talk explores the effects of automation on our work, which is as relevant to software as it is to furniture, especially now that once again, with Clojure, we are building things using a small set of simple tools.\n\nTim Ewald designs and builds software systems. After 20 years using object oriented languages, he embraces Clojure because it provides the closes connection to the work and most directly expresses his intent. Tim works on the Datomic team at Cognitect, where he is a Vice President.","meta":{"duration":"PT58M39S"},"presenter":{"name":null},"source":{"id":"ShEez0JkOFw","provider":"youtube"},"slug":"tim-ewald-clojure-programming-with-hand-tools","tag":["clojure"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/ShEez0JkOFw/default.jpg","height":90,"width":120}},"title":"Tim Ewald - Clojure: Programming with Hand Tools"}},{"node":{"description":"Learn from John Papa's talk \"10 AngularJS Patterns\" from Code on the Beach 2014 at One Ocean Resort & Spa, Atlantic Beach, Florida. Sunday, August 10, 2014. www.codeonthebeach.com\n\nAbstract:\n\"Once you get beyond the AngularJS basics there are many decisions to be made on how to build robust and maintainable apps. Come learn how to build AngularJS apps that manage multiple screens, structure your application code, maintain clean code with popular patterns, implement CRUD, perform robust HTML validation, use local storage, pass unit tests, and use a automated build tasks. This session explores solutions to several of the common challenges that AngularJS developers face while building business applications.\"","meta":{"duration":"PT1H1M27S"},"presenter":{"name":null},"source":{"id":"UlvCbnKAH3g","provider":"youtube"},"slug":"john-papa-10-angularjs-patterns-code-on-the-beach-2014","tag":["John Papa","AngularJS (Software)","Beach","JavaScript","Single Page Apps","Patterns","Code on the Beach","conference","Software Engineering (Industry)","Software Development (Industry)","Software Design Pattern (Field Of Study)","Programming Language","programming","Jacksonville (City/Town/Village)","Florida (US State)"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/UlvCbnKAH3g/default.jpg","height":90,"width":120}},"title":"John Papa - 10 AngularJS Patterns - Code on the Beach 2014"}}]}},"pageContext":{"slug":"functional-programming-bodil-stokke","tags":["programming","lisp","geek","functional","clojure"]}}