{"data":{"talkJson":{"description":"Haskell is a beautiful functional language, written by smart computer scientists, and having clever and elegant functional constructs. It clearly separates pure and impure parts of the program.\nGame programming on the other hand is a very hands-on discipline, trying to wring out the most of the machine's performance, and aiming for one thing, in disregard of all else: a pleasant, challenging experience for the player.\nI aim to bring intersect those worlds and describe the process, and the specifics, of writing a Haskell game. Functional reactive programming, bindings to graphical libraries, etc, will all have a role to play.\n\nby Elise Huard (@elise_huard)\n\nElise Huard is a software consultant who's been crafting and bashing together software for about 15 years now. Her skill set comprises talking to people, Haskell, Clojure, R, javascript, ruby, C, scaling, and a good few bits and bobs beside.\nShe's spoken at a fair number of conferences, most of them Ruby, some of them javascript, some of them\npolyglot.\nShe's based in Berlin, Germany. She enjoys reading sci-fi, traveling, cooking, tinkering, and spending time with her husband and baby daughter.","meta":{"duration":"PT29M37S"},"presenter":{"name":null},"slug":"writing-a-game-in-haskell-by-elise-huard","source":{"id":"1MNTerD8IuI","provider":"youtube"},"tag":["Haskell","game programming","Functional Programming (Programming Language Paradigm)"],"title":"\"Writing a game in Haskell\" by Elise Huard"},"allTalkJson":{"edges":[{"node":{"description":"The Clojure ecosystem, we're told, is made up of small, composable libraries. In practice, though, it's all too common to find that two libraries simply will not cleanly compose. This typically will lead to another library that does the same thing, but in a subtly different way. Sometimes this is warranted, but often it's not.\n\nThis talk will discuss the constraints and affordances that make a piece of code play nicely with other pieces of code. Attendees will learn how to write clean, reusable Clojure, drawing on the speaker's many past failures and few notable successes.\n\nThe first place I think of, when I try to tell someone about this quality, is a corner of an English country garden, where Zach Tellman grows against a wall.\n\nThe wall runs east to west; Zach grows flat against its southern side. The sun shines on him and as it warms the bricks behind Zach, the warm bricks themselves warms the peaches on him. It has a slightly dozy quality. Zach, carefully tied to grow flat against the wall; warming the bricks; the peaches growing in the sun; the wild grass growing around Zach's roots, in the angle where the earth and roots and wall all meet.","meta":{"duration":"PT35M12S"},"presenter":{"name":null},"source":{"id":"3oQTSP4FngY","provider":"youtube"},"slug":"zach-tellman-always-be-composing","tag":["clojure","abstraction","Functional Programming (Programming Language Paradigm)"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/3oQTSP4FngY/default.jpg","height":90,"width":120}},"title":"Zach Tellman - Always Be Composing"}},{"node":{"description":"Boston Haskell, February 18, 2015\nNikhil builds an Enigma machine. First in Cryptol, then in hardware by way of Haskell.\nSlides and code available here:  https://github.com/rsnikhil/Enigma_Cryptol_Bluespec_BSV.git","meta":{"duration":"PT59M41S"},"presenter":{"name":null},"source":{"id":"9-u2n4GgcVw","provider":"youtube"},"slug":"rishiyur-s-nikhil-enigmatic-haskell-haskellish-enigma","tag":["Haskell"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/9-u2n4GgcVw/default.jpg","height":90,"width":120}},"title":"Rishiyur S. Nikhil - Enigmatic Haskell, Haskellish Enigma"}},{"node":{"description":"In object-oriented development, we are all familiar with design patterns such as the Strategy pattern and Decorator pattern, and design principles such as SOLID. The functional programming community has design patterns and principles as well. This talk will provide an overview of some of these, and present some demonstrations of FP design in practice.","meta":{"duration":"PT1H5M44S"},"presenter":{"name":null},"source":{"id":"E8I19uA-wGY","provider":"youtube"},"slug":"functional-programming-design-patterns-by-scott-wlaschin","tag":["Software Design Pattern (Field Of Study)","Functional Programming (Programming Language Paradigm)"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/E8I19uA-wGY/default.jpg","height":90,"width":120}},"title":"Functional programming design patterns by Scott Wlaschin"}},{"node":{"description":"Kenneth Foner's Comonad talk at the Boston Haskell meetup, September 17, 2014.\nCode and slides: https://github.com/kwf/ComonadSheet","meta":{"duration":"PT58M33S"},"presenter":{"name":null},"source":{"id":"F7F-BzOB670","provider":"youtube"},"slug":"kenneth-foner-getting-a-quick-fix-on-comonads","tag":["Haskell"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/F7F-BzOB670/default.jpg","height":90,"width":120}},"title":"Kenneth Foner - Getting a Quick Fix on Comonads"}},{"node":{"description":"Jafar Husain shares how Netflix uses the Reactive Extensions (Rx) library to build responsive user experiences that strive to be event-driven, scalable and resilient. Learn the power of the Observable and how Netflix has simplified code through the ability to filter, aggregate, compose and project data streams.\n\nThis talk discusses how Netflix uses Rx to:\n- Declaratively build complex events out of simple events (ex. drag and drop)\n- Coordinate and sequence multiple Ajax requests\n- Reactively update the UI in response to data changes\n- Eliminate memory leaks caused by neglecting to unsubscribe from events\n- Gracefully propagate and handle asynchronous exceptions\n\nSlides: http://www.slideboom.com/presentations/1002549/Async-Javascript-at-Netflix-2014-03-19?pk=58d9-8985-be37-25f7-dc90-fe60-a9e2-03ab\n","meta":{"duration":"PT28M39S"},"presenter":{"name":null},"source":{"id":"FAZJsxcykPs","provider":"youtube"},"slug":"netflix-javascript-talks-async-javascript-with-reactive-extensions","tag":["JavaScript","netflix","netflix ui engineering","Functional Programming (Programming Language Paradigm)","User Experience Design (Industry)","Web Development (Interest)","Reactive Programming"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/FAZJsxcykPs/default.jpg","height":90,"width":120}},"title":"Netflix JavaScript Talks - Async JavaScript with Reactive Extensions"}},{"node":{"description":"Dan Doel's talk at the Boston Haskell Meetup, Sept 17, 2014\nSlides: https://drive.google.com/file/d/0B8Kkr1O1jFwcRmhxbzBMR1Ntb3c/edit?usp=sharing","meta":{"duration":"PT1H9M40S"},"presenter":{"name":null},"source":{"id":"McFNkLPTOSY","provider":"youtube"},"slug":"dan-doel-introduction-to-low-level-haskell-optimization","tag":["Haskell"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/McFNkLPTOSY/default.jpg","height":90,"width":120}},"title":"Dan Doel - Introduction to Low Level Haskell Optimization"}},{"node":{"description":" ","meta":{"duration":"PT1H4M35S"},"presenter":{"name":null},"source":{"id":"YScIPA8RbVE","provider":"youtube"},"slug":"the-algebra-of-algebraic-data-types","tag":["London","Haskell","Algebra","Algebraic","Types"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/YScIPA8RbVE/default.jpg","height":90,"width":120}},"title":"The Algebra of Algebraic Data Types"}},{"node":{"description":"Cody Roux's talk for the Boston Haskell Meetup - February 18, 2015\nSlides: http://www.slideshare.net/imalsogreg/cody-roux-pure-type-systems-boston-haskell-meetup","meta":{"duration":"PT1H17M1S"},"presenter":{"name":null},"source":{"id":"ZGqKsalJi4s","provider":"youtube"},"slug":"cody-roux-pure-type-systems","tag":["Haskell"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/ZGqKsalJi4s/default.jpg","height":90,"width":120}},"title":"Cody Roux - Pure Type Systems"}},{"node":{"description":"Cross posted from msdn's channel 9.\n\nFunctional programming is increasing in popularity these days given the inherent problems with shared mutable state that is rife in the imperative world. As we march on to a world of multi and many-core chipsets, software engineering must evolve to better equip software engineers with the tools to exploit the vast power of multiple core processors as it won't come for free as it did in the recent past which was predictably based on Moore's law.\n\nOf course, learning new ways to think about programming semantics and code patterns are not always straight forward. For example, most imperative programmers (which include most of us who build software for a living...) are somewhat perplexed by the notion of functions as first class data structures that can be combined to create powerful and composable systems. Languages like Haskell are pure functional languages and require programmers to think in a different way, often in a precise mathematical fashion where composing and chaining functions is \"the Way\".\n\nDr. Brian Beckman, a Channel 9 celebrity, astrophysicist and senior software engineer thought it would be a very good idea to address the complexity of monads in an easy to understand way: a technical conversation at the whiteboard with yours truly for Channel 9.\n\nThis video interview is the result of Brian's idea that he can in fact remove the fear of monads from anybody who pays attention to his explanation. Of course, you can't just cover monads in a vacuum (category theory is not really addressed here) so the context is functional programming (Brian covers functions and composable functional structures (function chains) and of course monoids and then monads).\n\nTune in. There's a lot to learn here and only Brian can make monads easy to understand for the rest of us!","meta":{"duration":"PT1H7M11S"},"presenter":{"name":null},"source":{"id":"ZhuHCtR3xq8","provider":"youtube"},"slug":"brian-beckman-dont-fear-the-monad","tag":["haskell","monads","programming","brian beckman","functional programming","Haskell"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/ZhuHCtR3xq8/default.jpg","height":90,"width":120}},"title":"Brian Beckman: Don't fear the Monad"}},{"node":{"description":"Speaker: Tim Williams.\n\nLondon Haskell user group. 27th March 2013.\n\nThe theory and practice of various recursion schemes applied to real world problems. Demonstrating compositional data-types and data-type generic programs by modelling recursive types as fixed points of functors. Code starts with simple list examples and moves quickly on to more problematic topics, such as program analysis, optimisation, memoization, templating and more.","meta":{"duration":"PT1H50M29S"},"presenter":{"name":null},"source":{"id":"Zw9KeP3OzpU","provider":"youtube"},"slug":"recursion-schemes","tag":["Haskell"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/Zw9KeP3OzpU/default.jpg","height":90,"width":120}},"title":"Recursion Schemes"}}]}},"pageContext":{"slug":"writing-a-game-in-haskell-by-elise-huard","tags":["Haskell","game programming","Functional Programming (Programming Language Paradigm)"]}}