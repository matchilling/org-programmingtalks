{"data":{"talkJson":{"description":"Take a step back from your normal programming approach and discover a new way of looking at problems. All living organisms information systems are based on chemical processes. What can we learn by using this metaphor of chemistry in our programming? We will answer this question by looking at Artificial Chemical Computing. Building programs based on molecules and chemical reactions, we will explore new ways of thinking and opening ourselves up to innovation. We will discuss the basics of Chemical Programming and even touch on High Order Chemical Programming as well. Code examples will be in the powerful, elegant, and interactive programming language of Clojure, but you will not need to be an expert in the language to enjoy the demos. Come and join us for this adventure in looking at the programming world from a different perspective.\n\nCarin Meier\nCOGNITECT\n@gigasquid\n\nCarin started off as a professional ballet dancer, studied Physics in college, and has been developing software for both the enterprise and entrepreneur ever since. She has a strong background in Ruby and Clojure. Her passions lead her to the intersection of the physical and digital world, combining hardware and software, where she has helped clients develop Home Automation Systems as well as written a control library for the Parrot AR Drone in Clojure. She is highly involved in the community and spoken at many conferences, including keynoting at OSCON and Strange Loop. She helps lead the Cincinnati Functional Programmers and is the author of \"Living Clojure\".","meta":{"duration":"PT36M1S"},"presenter":{"name":null},"slug":"unconventional-programming-with-chemical-computing-by-carin-meier","source":{"id":"cHoYNStQOEc","provider":"youtube"},"tag":["clojure","Chemical Computer","Programming Language"],"title":"\"Unconventional Programming with Chemical Computing\" by Carin Meier"},"allTalkJson":{"edges":[{"node":{"description":"This presentation was recorded at GOTO Chicago 2015\nhttp://gotochgo.com\n\nBrian LeRoux - PhoneGap Project Team, Adobe\n\nABSTRACT\nJavaScript has a long history of being difficult to structure and maintain. To deal with this complexity a swath of frameworks appeared over the years. Prototype.js was quickly followed by jQuery and hounded by Dojo, YUI, Mootools and [...]\nDownload slides and read the full abstract here:\nhttp://gotocon.com/chicago-2015/presentation/ECMAScript%206%20&%20Web%20Components\n\nhttps://twitter.com/gotochgo\nhttps://www.facebook.com/GOTOConference\nhttp://gotocon.com","meta":{"duration":"PT36M12S"},"presenter":{"name":null},"source":{"id":"2w4sRkTnhPM","provider":"youtube"},"slug":"ecmascript-6-and-web-components-brian-leroux","tag":["Brian LeRoux","ECMAScript (Programming Language)","GOTO Conference","GOTO Conference","GOTO Conference","World Wide Web (Video Game Platform)","Software Development (Industry)","Programming Language","Java"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/2w4sRkTnhPM/default.jpg","height":90,"width":120}},"title":"ECMAScript 6 & Web Components • Brian LeRoux"}},{"node":{"description":"The time has come to think concurrently. Traditional software concurrency management leads to non-deterministic race conditions and deadlocks that are hard to reproduce and debug, leading to unreliable software. That means it's time to introduce math. Tony Hoare's paradigm of communicating sequential processes, or CSP, is not only a robust way to manage concurrency, but it's fun too! Join us to learn more about how CSP in the Go programming language allows us to reason more clearly about many things happening at once.\n\nAbout Eric:\n\nEric Shull is a software consultant and developer at Atomic Object. He enjoys working in Go and ClojureScript, writing, sketchnoting, doing math, creating data visualizations, making experimental programming languages, and much, much more.","meta":{"duration":"PT43M22S"},"presenter":{"name":null},"source":{"id":"3gXWA6WEvOM","provider":"youtube"},"slug":"eric-shull-communicating-sequential-processes-september-22-2015","tag":["Communicating Sequential Processes (Programming Language)","Eric Shull","Atomic Object","Programming Language","Programmer (Profession)","Software GR"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/3gXWA6WEvOM/default.jpg","height":90,"width":120}},"title":"Eric Shull: Communicating Sequential Processes (September 22, 2015)"}},{"node":{"description":"The Clojure ecosystem, we're told, is made up of small, composable libraries. In practice, though, it's all too common to find that two libraries simply will not cleanly compose. This typically will lead to another library that does the same thing, but in a subtly different way. Sometimes this is warranted, but often it's not.\n\nThis talk will discuss the constraints and affordances that make a piece of code play nicely with other pieces of code. Attendees will learn how to write clean, reusable Clojure, drawing on the speaker's many past failures and few notable successes.\n\nThe first place I think of, when I try to tell someone about this quality, is a corner of an English country garden, where Zach Tellman grows against a wall.\n\nThe wall runs east to west; Zach grows flat against its southern side. The sun shines on him and as it warms the bricks behind Zach, the warm bricks themselves warms the peaches on him. It has a slightly dozy quality. Zach, carefully tied to grow flat against the wall; warming the bricks; the peaches growing in the sun; the wild grass growing around Zach's roots, in the angle where the earth and roots and wall all meet.","meta":{"duration":"PT35M12S"},"presenter":{"name":null},"source":{"id":"3oQTSP4FngY","provider":"youtube"},"slug":"zach-tellman-always-be-composing","tag":["clojure","abstraction","Functional Programming (Programming Language Paradigm)"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/3oQTSP4FngY/default.jpg","height":90,"width":120}},"title":"Zach Tellman - Always Be Composing"}},{"node":{"description":"Dan North - Agile Troublemaker, Developer, Originator of BDD\n\nABSTRACT\nThus begins an old, and sadly lost in the mists of Usenet, love story about Vi and Ed (who becomes her \"ex\"), told entirely in Unix commands. I had no idea when I started learning these arcane (guess how the \"dd\" command got its name) and cryptic (what about \"grep\"?) Unix commands how incredibly useful they would become over the next two decades. If your primary OS is Linux or OSX on the desktop, and maybe iOS or Android on the move, you'll find this 40-something year joke (\"Unix\" itself was a bad pun) has managed to embed itself into every facet of your technological life.\n\nBeing comfortable at a shell prompt and having a healthy working knowledge of Unix commands and regular expressions will give you a whole new level of capability. In this fun talk I'll introduce a few commands and shell tricks you should have in your back pocket, and show you how to start taking control of your operating system. If you ask nicely I'll even tell you about the production system I wrote using Makefiles.","meta":{"duration":"PT30M4S"},"presenter":{"name":null},"source":{"id":"7uwW20odwEk","provider":"youtube"},"slug":"power-use-of-unix-dan-north","tag":["Unix (Software)","Unix Commands","Grep (Software)","Linux software","OSx86 (Software)","Android (Software)","production system","Makefiles","Dan North","GOTO Conference","GOTO Conference","GOTO Conference","Programming Language"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/7uwW20odwEk/default.jpg","height":90,"width":120}},"title":"Power Use of UNIX • Dan North"}},{"node":{"description":"Check out our upcoming conferences at http://gotocon.com\nSubscribe to the GOTO Conferences YouTube Channel at https://www.youtube.com/user/GOTOConf...\n\nJanne Jul Jensen - Interaction Designer and Usability Specialist\n\nABSTRACT\nMost developers today are aware of the importance of creating a good user interface with a high level of usability, but many are lacking the methods and techniques that can help in this process. This session will present to the listeners a range of concrete methods and techniques applicable in different phases of a design process, to handle specific challenges. This will include design patterns, personas, wire framing, paper prototype testing, progressive disclosure, card sorting and creative workshops and many of the methods and techniques will be accompanied by examples.\n\nhttps://twitter.com/gotocon\nhttps://www.facebook.com/GOTOConference\nhttp://gotocon.com","meta":{"duration":"PT51M20S"},"presenter":{"name":null},"source":{"id":"7OSkB4BCx00","provider":"youtube"},"slug":"user-interface-ux-techniques-janne-jul-jensen","tag":["Software Development","Janne Jul Jensen","User Interface Design (Field Of Study)","User Interface (Ontology Instance)","User Interface","GOTO Conference","GOTO Conference","GOTO Conference","User Experience Design (Industry)","Technology (Industry)","User Interface (Speech Topic)","UX","Trifork","Design (Industry)","Programming Language","Videos for Developers"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/7OSkB4BCx00/default.jpg","height":90,"width":120}},"title":"User Interface (UX) Techniques • Janne Jul Jensen"}},{"node":{"description":"Many of us have hazy memories of finite state machines from computer science theory classes in college. But finite state machines (FSMs) have real, practical value, and it is useful to know how to build and apply them in Clojure. For example, FSMs have long been popular to model game AIs and workflow rules, and FSMs provide the behind-the-scenes magic that powers Java's regexes and core.async's go blocks. In this talk, we'll look at two programming puzzles that, suprisingly, have very elegant solutions when looked at through the lens of FSMs, with code demonstrations using two different Clojure libraries for automata (automat and reduce-fsm), as well as loco, a Clojure constraint solver.\n\nAbout the speakers: Mark Engelberg has been an active member of the Clojure community ever since Clojure turned 1.0, and is the primary developer of math.combinatorics, math.numeric-tower, data.priority-map, ubergraph, and a co-developer of instaparse. By day, he teaches Scheme and Clojure to talented kids in the Seattle area; by night, he creates logic puzzles and games, using Clojure as his \"secret weapon\". His latest game is Code Master, a programming-themed puzzle game for kids, available exclusively at Target (and created with Clojure, of course!)\n\nAlex Engelberg was indoctrinated by his father in the ways of functional programming at a young age, and Clojure rapidly became his language of choice. He is happy to be using Clojure professionally as a software engineer at SecureOne in Seattle. Alex also enjoys contributing to open source; he is the primary developer of loco, and co-developer of instaparse.","meta":{"duration":"PT38M4S"},"presenter":{"name":null},"source":{"id":"AEhULv4ruL4","provider":"youtube"},"slug":"solving-problems-with-automata-mark-engelberg-and-alex-engelberg","tag":["clojure","automata","finite state machines","Automata Theory"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/AEhULv4ruL4/default.jpg","height":90,"width":120}},"title":"Solving Problems with Automata - Mark Engelberg & Alex Engelberg"}},{"node":{"description":"Build Your Own Lisp for Great Justice\n\nImplementing a toy Lisp interpreter is practically a rite of passage for the budding computer scientist. This hallowed tradition is described in detail in \"Lisp in Small Pieces,\" the seminal work on the making of Lisps, but everybody loves a tl;dr, so let's do the 40 minute executive summary.\n\nWe'll charge at high speed\nthrough the following topics, with Clojure code to follow along with as we go (because there's no better language for implementing a Lisp than another Lisp):\n\n* Parsing: turning text files into ASTs\n* Fundamental Lisp datatypes\n* McCarthy's elementary functions\n* Evaluating Lisp code\n* Lambdas and lexical scope\n* Your friend, the state monad\n* Beyond Lisp: pattern matching and type systems\n\nWhen we're done, you'll be ready to go forth and fill the world with Lisps of all shapes, colours and Greenspun violations for Great Justice. Also, it'll be good fun.\n\nSpeaker\nBodil Stokke (@bodil) is a compulsive conference speaker in the fields of functional programming and internets technologies, and is a co-organiser of three annual developer conferences in her home\ntown of Oslo, Norway, mostly because she's still learning how to stop. She is a prolific contributor to the Free Software community, primarily as a Clojure developer, and has recently taken up designing new programming languages as a hobby. In her spare time, she works as a web developer for Comoyo, which is like Hulu for non-Americans.","meta":{"duration":"PT53M52S"},"presenter":{"name":null},"source":{"id":"DHubfS8E--o","provider":"youtube"},"slug":"functional-programming-bodil-stokke","tag":["programming","lisp","geek","functional","clojure"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/DHubfS8E--o/default.jpg","height":90,"width":120}},"title":"Functional programming - Bodil Stokke"}},{"node":{"description":"About the speaker: Stuart Halloway (@stuarthalloway) is a founder and President of Cognitect (formerly Relevance). He is a Clojure committer, and a developer of the Datomic database. Stuart has spoken at a variety of industry events, including Strange Loop, Clojure/conj, EuroClojure, ClojureWest, SpeakerConf, QCon, GOTO, OSCON, RailsConf, RubyConf, JavaOne, and NFJS. Stuart has written a number of books and technical articles. Of these, he is most proud of Programming Clojure.","meta":{"duration":"PT49M9S"},"presenter":{"name":null},"source":{"id":"FihU5JxmnBg","provider":"youtube"},"slug":"debugging-with-the-scientific-method-stuart-halloway","tag":["clojure","Debugging (Quotation Subject)","Scientific Method (Literature Subject)"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/FihU5JxmnBg/default.jpg","height":90,"width":120}},"title":"Debugging with the Scientific Method - Stuart Halloway"}},{"node":{"description":"Meetup: http://www.meetup.com/papers-we-love/events/214400572/\nPaper: http://www.cs.cmu.edu/~crary/819-f09/Hoare69.pdf\nSlides: https://speakerdeck.com/paperswelove/jean-yang-on-an-axiomatic-basis-for-computer-programming\nAudio: http://www.mixcloud.com/paperswelove/jean-yang-on-an-axiomatic-basis-for-computer-programming/\n---------------------------------------------------------------------------------------------\nSponsored by The Ladders (@TheLaddersDev)\n---------------------------------------------------------------------------------------------\n\nDescription\n---------------\nOur lives now run on software. Bugs are becoming not just annoyances for software developers, but sources of potentially catastrophic failures. A careless programmer mistake could leak our social security numbers or crash our cars. While testing provides some assurance, it is difficult to test all possibilities in complex systems--and practically impossible in concurrent systems. For the critical systems in our lives, we should demand mathematical guarantees that the software behaves the way the programmer expected.\n\nA single paper influenced much of the work towards providing these mathematical guarantees. C.A.R. Hoare’s seminal 1969 paper “An Axiomatic Basis for Computer Programming” introduces a method of reasoning about program correctness now known as Hoare logic. In this paper, Hoare provides a technique that 1) allows programmers to express program properties and 2) allows these properties to be automatically checked. These ideas have influenced decades of research in automated reasoning about software correctness.\n\nIn this talk, I will describe the main ideas in Hoare logic, as well as the impact of these ideas. I will talk about my personal experience using Hoare logic to verify memory guarantees in an operating system. I will also discuss takeaway lessons for working programmers.\n\nBio\n----\nJean Yang (@jeanqasaur) is a final-year PhD student at MIT. For her PhD thesis she has created Jeeves, a programming language for automatically enforcing information flow policies for security and privacy. You may be more familiar with one of her other projects, Haskell Ryan Gosling.","meta":{"duration":"PT1H4M32S"},"presenter":{"name":null},"source":{"id":"GQi-6-d5ooQ","provider":"youtube"},"slug":"jean-yang-on-an-axiomatic-basis-for-computer-programming","tag":["Computer Programming (Conference Subject)","Mathematics (Field Of Study)","Software Engineering (Industry)","Program Correctness","Ryan Gosling","Hoare Logic","Type Checking","Computer (Industry)","Programming Language"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/GQi-6-d5ooQ/default.jpg","height":90,"width":120}},"title":"Jean Yang on An Axiomatic Basis for Computer Programming"}},{"node":{"description":"Genetic programming harnesses the mechanisms of natural evolution, including mutation, recombination, and natural selection, to automatically synthesize computer programs. It has been applied to a wide range of problems spanning several areas of science, engineering, and the arts, in many cases equaling or exceeding human performance.\n\nGenetic programming's roots are in Lisp, making Clojure a natural choice for modern genetic programming research and development. In this talk I will show how a simple genetic programming system can be written in about 100 lines of Clojure code, how a mature genetic programming system (PushGP) implemented in Clojure can improve the state of the art in automatic programming, and how genetic programming can be incorporated into an artificial life environment implemented in Clojure and Quil.\n\nAbout the speaker: Lee Spector is a Professor of Computer Science in the School of Cognitive Science at Hampshire College in Amherst, Massachusetts, and an adjunct professor of Computer Science at the University of Massachusetts, Amherst. His areas of teaching and research include genetic and evolutionary computation, quantum computation, and a variety of intersections between computer science, cognitive science, evolutionary biology, and the arts. He is the Editor-in-Chief of the journal Genetic Programming and Evolvable Machines (published by Springer) and a member of the editorial board of Evolutionary Computation (published by MIT Press). He is also a member of the SIGEVO executive committee and he was named a Fellow of the International Society for Genetic and Evolutionary Computation. \n\nMore details: http://hampshire.edu/lspector Resume: http://hampshire.edu/lspector/spector-resume.pdf","meta":{"duration":"PT40M8S"},"presenter":{"name":null},"source":{"id":"HWMJdO4klIE","provider":"youtube"},"slug":"genetic-programming-in-clojure-lee-spector","tag":["clojure","Genetic Programming"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/HWMJdO4klIE/default.jpg","height":90,"width":120}},"title":"Genetic Programming in Clojure - Lee Spector"}}]}},"pageContext":{"slug":"unconventional-programming-with-chemical-computing-by-carin-meier","tags":["clojure","Chemical Computer","Programming Language"]}}