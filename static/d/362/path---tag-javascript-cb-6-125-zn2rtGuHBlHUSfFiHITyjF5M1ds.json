{"data":{"allTalkJson":{"edges":[{"node":{"description":"NodeBots have been around for several years now, but with every presentation, there is always someone who asks, \"But... JavaScript?! Why on earth would you make robots with JavaScript?\"\n\nIt's a fair question, and one worthy of more than a hand-wavy answer about how it's cool... or something.\n\nIn this talk, let's discuss why, of all the languages on the planet, JavaScript is the perfect starting point for a future of robotics.\n\nAs a roboticist-turned-web-developer, I will provide some deep insights not only into the world of robotics, but also into JavaScript and its server-side cousin, Node.js. We'll talk about what JavaScript-enabled robots can already do, what they can't do yet, and what they might be able to do with a bit of elbow grease.\n\nAnd, if the demo deities are with us, we may even have a robot assistant on hand.\n\nRaquel Vélez\nNPM, INC.\n@rockbot\n\nRaquel Vélez is a Senior Software Developer at npm, Inc. in Oakland, CA. She has previously worked at institutions such as Caltech, NASA JPL, the MIT Lincoln Laboratory, and various universities in Europe. In her off time, you can find her baking, teaching NodeBots not to fall off of tables, and speaking. Also, hanging out with her hilarious husband and two cats dressed in dog suits.","meta":{"duration":"PT36M27S"},"presenter":{"name":"Raquel Velez"},"source":{"id":"3v75aX5-gSA","provider":"youtube"},"slug":"no-really-robots-and-javascript","tag":["JavaScript","Robot","Node.js"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/3v75aX5-gSA/default.jpg","height":90,"width":120}},"title":"\"No, Really... Robots and JavaScript?!\""}},{"node":{"description":"JavaScript programmers like to use words like, “event-loop”, “non-blocking”, “callback”, “asynchronous”, “single-threaded” and “concurrency”.\n\nWe say things like “don’t block the event loop”, “make sure your code runs at 60 frames-per-second”, “well of course, it won’t work, that function is an asynchronous callback!”\n\nIf you’re anything like me, you nod and agree, as if it’s all obvious, even though you don’t actually know what the words mean; and yet, finding good explanations of how JavaScript actually works isn’t all that easy, so let’s learn!\n\nWith some handy visualisations, and fun hacks, let’s get an intuitive understanding of what happens when JavaScript runs.\n\nTranscript: http://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html\n\nLicense: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.","meta":{"duration":"PT26M53S"},"presenter":{"name":"Philip Roberts"},"source":{"id":"8aGhZQkoFbQ","provider":"youtube"},"slug":"what-the-heck-is-the-event-loop-anyway","tag":["JavaScript","JSConf EU 2014"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/8aGhZQkoFbQ/default.jpg","height":90,"width":120}},"title":"What the heck is the event loop anyway?"}},{"node":{"description":"This talk speculates about the next language after JavaScript, and what to do in the mean time about some of the new features in ES6.\nThere will be an emphasis on simplicity and quality. The web is cluttered and full of errors. The talk will also touches on why you should subscribe to HBO.","meta":{"duration":"PT54M13S"},"presenter":{"name":"Douglas Crockford"},"source":{"id":"99Zacm7SsWQ","provider":"youtube"},"slug":"the-post-javascript-apocalypse","tag":["NDC Conferences","JavaScript","Web"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/99Zacm7SsWQ/default.jpg","height":90,"width":120}},"title":"The Post JavaScript Apocalypse"}},{"node":{"description":"How do we resolve the question, \"is this better than that?\" This talk discusses ideas for improving how we handle conflict in the programming community through the lens of evaluating whether Node.js is better than other technologies like Ruby.","meta":{"duration":"PT41M43S"},"presenter":{"name":"Brian Ford"},"source":{"id":"C5fa1LZYodQ","provider":"youtube"},"slug":"is-nodejs-better","tag":["JSConf US 2012","Node.js","Ruby On Rails","JavaScript"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/C5fa1LZYodQ/default.jpg","height":90,"width":120}},"title":"Is Node.js Better?"}},{"node":{"description":"Jafar Husain discusses interesting features that can be used today in JS6, such as Object.observe, async functions and async generators, while also giving a peek at what's being explored for JS7 to make async programming easier.","meta":{"duration":"PT1H11M54S"},"presenter":{"name":null},"source":{"id":"DqMFX91ToLw","provider":"youtube"},"slug":"netflix-javascript-talks-version-7-the-evolution-of-javascript","tag":["netflix","JavaScript","reactive programming","Web Development (Interest)","netflix ui engineering"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/DqMFX91ToLw/default.jpg","height":90,"width":120}},"title":"Netflix JavaScript Talks - Version 7: The Evolution of JavaScript"}},{"node":{"description":"Jafar Husain shares how Netflix uses the Reactive Extensions (Rx) library to build responsive user experiences that strive to be event-driven, scalable and resilient. Learn the power of the Observable and how Netflix has simplified code through the ability to filter, aggregate, compose and project data streams.\n\nThis talk discusses how Netflix uses Rx to:\n- Declaratively build complex events out of simple events (ex. drag and drop)\n- Coordinate and sequence multiple Ajax requests\n- Reactively update the UI in response to data changes\n- Eliminate memory leaks caused by neglecting to unsubscribe from events\n- Gracefully propagate and handle asynchronous exceptions\n\nSlides: http://www.slideboom.com/presentations/1002549/Async-Javascript-at-Netflix-2014-03-19?pk=58d9-8985-be37-25f7-dc90-fe60-a9e2-03ab\n","meta":{"duration":"PT28M39S"},"presenter":{"name":null},"source":{"id":"FAZJsxcykPs","provider":"youtube"},"slug":"netflix-javascript-talks-async-javascript-with-reactive-extensions","tag":["JavaScript","netflix","netflix ui engineering","Functional Programming (Programming Language Paradigm)","User Experience Design (Industry)","Web Development (Interest)","Reactive Programming"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/FAZJsxcykPs/default.jpg","height":90,"width":120}},"title":"Netflix JavaScript Talks - Async JavaScript with Reactive Extensions"}},{"node":{"description":"New web developers have trouble distinguishing jQuery from JavaScript. We frequently point developers to three.js for doing 3D on the web, but what is raw WebGL and what tools do we have for debugging 3D web applications?","meta":{"duration":"PT55M21S"},"presenter":{"name":"Nick Desaulniers"},"source":{"id":"H4c8t6myAWU","provider":"youtube"},"slug":"mozilla-raw-webgl","tag":["HTML5","HTML5DevConf 2014","JavaScript","Node.js","Web Browser"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/H4c8t6myAWU/default.jpg","height":90,"width":120}},"title":"Mozilla Raw WebGL"}},{"node":{"description":"We live in a time of vast computational resources - many of us carry around in our pockets what just thirty years ago would have been considered a supercomputer. But it's not just the hardware, these bite sized supercomputers run software using state of the art dynamic compilation techniques to deliver stellar performance without sacrificing flexibility.\n\nWhile all of this may sound incredibly futuristic, many of us still program these Dream Machines with miserly techniques not far removed from the best practices of the 1960s.\n\nWe have cycles to spare, by investing some of them into immutable data structures our programs get new wonderful properties that enable us to design solutions at a much higher level of abstraction. Om is a new library I've created just to explore these possibilities. While Om itself is written in ClojureScript, we'll focus primarily on the big ideas present in Om all of which are easily portable to JavaScript.","meta":{"duration":"PT22M6S"},"presenter":{"name":"David Nolen"},"source":{"id":"SiFwRtCnxv4","provider":"youtube"},"slug":"immutability-putting-the-dream-machine-to-work","tag":["JSConf 2014","JavaScript"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/SiFwRtCnxv4/default.jpg","height":90,"width":120}},"title":"Immutability: Putting The Dream Machine To Work"}},{"node":{"description":"Erik Bryn (@ebryn), our friendly neighborhood Ember core team member, spoke about the plans for Ember 2.0 and how we can start preparing our apps for Ember 2.0 today. Erik is also going to be providing Ember 2.0 training classes in several cities this summer. You can preregister for them at: http://www.prototypal.io","meta":{"duration":"PT40M21S"},"presenter":{"name":null},"source":{"id":"U1HEzVWseng","provider":"youtube"},"slug":"ember-20-erik-bryn","tag":["Ember.js","JavaScript","ebryn","Ember","Ember 2.0","Ember.js 2.0"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/U1HEzVWseng/default.jpg","height":90,"width":120}},"title":"Ember 2.0 - Erik Bryn"}},{"node":{"description":"Learn from John Papa's talk \"10 AngularJS Patterns\" from Code on the Beach 2014 at One Ocean Resort & Spa, Atlantic Beach, Florida. Sunday, August 10, 2014. www.codeonthebeach.com\n\nAbstract:\n\"Once you get beyond the AngularJS basics there are many decisions to be made on how to build robust and maintainable apps. Come learn how to build AngularJS apps that manage multiple screens, structure your application code, maintain clean code with popular patterns, implement CRUD, perform robust HTML validation, use local storage, pass unit tests, and use a automated build tasks. This session explores solutions to several of the common challenges that AngularJS developers face while building business applications.\"","meta":{"duration":"PT1H1M27S"},"presenter":{"name":null},"source":{"id":"UlvCbnKAH3g","provider":"youtube"},"slug":"john-papa-10-angularjs-patterns-code-on-the-beach-2014","tag":["John Papa","AngularJS (Software)","Beach","JavaScript","Single Page Apps","Patterns","Code on the Beach","conference","Software Engineering (Industry)","Software Development (Industry)","Software Design Pattern (Field Of Study)","Programming Language","programming","Jacksonville (City/Town/Village)","Florida (US State)"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/UlvCbnKAH3g/default.jpg","height":90,"width":120}},"title":"John Papa - 10 AngularJS Patterns - Code on the Beach 2014"}},{"node":{"description":"Don't miss an upload! Subscribe! http://goo.gl/szEauh\n\nHow does the pervasiveness of JavaScript on the client change how we architect applications? We can create hundreds virtual machines in the cloud, but we are using the millions of visual machines that visit our sites every day?\n\nSuddenly we are scripting against thousands of Virtual Machines from the command line while creating things today with JavaScript in the browser that were impossible yesterday. LiveScript becomes JavaScript becomes ES6 and now we're compiling C++ to JavaScript.\n\nJoin Scott Hanselman as he explores the relationship between the Cloud and the Browser, many Languages and one Language, how it might all fit together and what comes next.\n\nBuy Scott's books here. http://goo.gl/Y2Zsdh\n\nStay Connected to O'Reilly Media by Email - http://goo.gl/YZSWbO\n\nFollow O'Reilly Media:\nhttp://plus.google.com/+oreillymedia\nhttps://www.facebook.com/OReilly\nhttps://twitter.com/OReillyMedia","meta":{"duration":"PT25M57S"},"presenter":{"name":null},"source":{"id":"UzyoT4DziQ4","provider":"youtube"},"slug":"scott-hanselman-virtual-machines-javascript-and-assembler-fluent-2014-keynote","tag":["JavaScript","Assembly Language (Programming Language)","fluent 2014","fluentconf","fluent conference","Virtual Machine (Programming Language Paradigm)","scott hanselman","keynote","speaker","podcaster","Programming Language (Literary Genre)","o'reilly books","O'Reilly Media (Business Operation)","oreilly","oreilly media","O'Reilly"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/UzyoT4DziQ4/default.jpg","height":90,"width":120}},"title":"Scott Hanselman, \"Virtual Machines, JavaScript and Assembler\" -  Fluent 2014 Keynote"}},{"node":{"description":"Tim Ruffles investigates different approaches to managing and avoiding callback hell.","meta":{"duration":"PT21M54S"},"presenter":{"name":"Tim Ruffles"},"source":{"id":"Wu9n7Ry0PWw","provider":"youtube"},"slug":"solving-the-real-callback-hell-great-british-node-conf","tag":["Great British Node Conference","Node.js","JavaScript"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/Wu9n7Ry0PWw/default.jpg","height":90,"width":120}},"title":"Tim Ruffles: Solving the real callback hell - Great British Node Conf"}},{"node":{"description":"Hunter Loftis is responsible for the Node.js platform at Heroku. When he’s not working at Heroku, he runs PlayfulJS, a website of cool JavaScript code snippets.\n\nOne of the better well-known demos on PlayfulJS is a re-creation of the Doom rendering engine in JavaScript. After building this, Hunter was contacted by Warp records about building a first-person shooter in JavaScript.\n\nOne of the issues with this request was the timeframe — three weeks to build the game to coincide with an album release, and with a tiny budget. On top of that, the game had to work on desktop, Android, and iOS. So, Hunter rationalized and decided to accept the project.\n\nAfter accepting the project for what he thought would be a small, indie release, Hunter realized that the artist (Rustie) was huge in the UK and overseas, and this release would be a huge deal.\n\nJavaScript Training from NewCircle: http://crcl.to/72rru\n\nhttp://forwardjs.com/","meta":{"duration":"PT29M34S"},"presenter":{"name":"Hunter Loftis"},"source":{"id":"avwDj3KRuLc","provider":"youtube"},"slug":"we-will-all-be-game-programmers","tag":["Node.js","Heroku","ForwardJS","JavaScript","PlayfulJS","Doom","video games","Game Engine"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/avwDj3KRuLc/default.jpg","height":90,"width":120}},"title":"We Will All Be Game Programmers"}},{"node":{"description":"Brian explores the trickiest, funniest parts of JavaScript.","meta":{"duration":"PT18M27S"},"presenter":{"name":"Brian LeRoux"},"source":{"id":"et8xNAc2ic8","provider":"youtube"},"slug":"what-the-f-js","tag":["dotJS 20112","Paris","JavaScript"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/et8xNAc2ic8/default.jpg","height":90,"width":120}},"title":"What the f*** JS"}},{"node":{"description":"This presentation was recorded at GOTO Chicago 2015\nhttp://gotochgo.com\n\nVyacheslav Egorov - Java Script Performance Expert, SW Engineer on the Google Dart Team\n\nABSTRACT\nJavaScript is everywhere. JavaScript VMs improve by leaps and bounds. Performance graphs are breaking through the ceilings of expectations. And yet from time to time we still find ourselves wondering whether [...]\nDownload slides and read the full abstract here:\nhttp://gotocon.com/chicago-2015/presentation/Benchmarking%20JavaScript\n\nhttps://twitter.com/gotochgo\nhttps://www.facebook.com/GOTOConference\nhttp://gotocon.com","meta":{"duration":"PT40M55S"},"presenter":{"name":null},"source":{"id":"g0ek4vV7nEA","provider":"youtube"},"slug":"benchmarking-javascript-vyacheslav-egorov","tag":["JavaScript","Benchmark (Literature Subject)","GOTO Conference","GOTO Conference","GOTO Conference","Vyacheslav Egorov"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/g0ek4vV7nEA/default.jpg","height":90,"width":120}},"title":"Benchmarking JavaScript • Vyacheslav Egorov"}},{"node":{"description":"JavaScript is a language with more than its share of bad parts. It went from non-existence to global adoption in an alarmingly short period of time. It never had an interval in the lab when it could be tried out and polished. JavaScript has some extraordinarily good parts. In JavaScript there is a beautiful, highly expressive language that is buried under a steaming pile of good intentions and blunders. The best nature of JavaScript was so effectively hidden that for many years the prevailing opinion of JavaScript was that it was an unsightly, incompetent abomination. This session will expose the goodness in JavaScript, an outstanding dynamic programming language. Within the language is an elegant subset that is vastly superior to the language as a whole, being more reliable, readable and maintainable.","meta":{"duration":"PT1H3M48S"},"presenter":{"name":"Doug Crockford"},"source":{"id":"hQVTIJBZook","provider":"youtube"},"slug":"javascript-the-good-parts","tag":["JavaScript"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/hQVTIJBZook/default.jpg","height":90,"width":120}},"title":"JavaScript: The Good Parts"}},{"node":{"description":"Large Scale JavaScript Application Architecture  \nTime: Wednesday @ 10:40am | Room E-131\nhttp://html5devconf.com/index.html     #HTML5DevConf\n\nLearn how to build your team and technology without losing development time. In this presentation, you'll learn how to design a large-scale javascript application on a scalable front-end architecture to promote code modularization and division of labor. We'll synthesize a number of programming patterns to help you decouple application views, data, business logic as well as navigation paradigms and transitions between states to keep your product agile and moving forward.","meta":{"duration":"PT50M40S"},"presenter":{"name":"Dan Lynch"},"source":{"id":"kNrnRG1YgAQ","provider":"youtube"},"slug":"large-scale-javascript-application-architecture","tag":["HTML5DevConf 2014","JavaScript","Node.js","Code Modularization"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/kNrnRG1YgAQ/default.jpg","height":90,"width":120}},"title":"Large Scale JavaScript Application Architecture"}},{"node":{"description":"This is a talk from Barcelona FutureJS 2014 (http://futurejs.org).\n\nSurprisingly the high performance mutation available in modern JavaScript engines is a great foundation for building high performance immutable collections. Even more surprisingly efficient immutable collections permit new ways of approaching user interface programming. While the details will be in Om, an immutable user interface toolkit written in ClojureScript over Facebook's React, the talk will be primarily focused on high level concepts easily ported to JavaScript. We'll dive in and see how trees of JavaScript arrays can permit building these efficient immutable collections. Then we'll see how embracing immutable values dramatically simplifies some classic hard problems in client side programming including but not limited to undo, error playback, and online/offline synchronization.","meta":{"duration":"PT26M20S"},"presenter":{"name":"David Nolen"},"source":{"id":"mS264h8KGwk","provider":"youtube"},"slug":"immutability-interactivity-and-javascript","tag":["JavaScript","Clojure","Immutability","FutureJS 2014"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/mS264h8KGwk/default.jpg","height":90,"width":120}},"title":"Immutability, interactivity & JavaScript"}},{"node":{"description":"Inside most of us there’s a befunge programmer who wants to come out. When doing day-to-day “serious” programming it is usually a good idea to keep them as firmly locked up as possible. Let’s ignore that instinct for a little while.\n\nIn this talk I’ll try to convince you why you should try writing a completely impractical interpreter of your own. I’ll also use terms like “lexer”, “tokenizer” and “parser” at their widest possible definitions.\n\nTranscript/slides at: http://2014.jsconf.eu/speakers/arne-martin-aurlien-implement-an-esoteric-programming-language-for-fun-and-well-fun.html\n\nLicense: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.","meta":{"duration":"PT22M17S"},"presenter":{"name":null},"source":{"id":"oCPT3L33848","provider":"youtube"},"slug":"arne-martin-aurlien-implement-an-esoteric-programming-language-for-fun-or-jsconf-eu-2014","tag":["Arne Martin Aurlien","Esoteric Programming Language","JS","JSConf","JSConf EU","JavaScript"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/oCPT3L33848/default.jpg","height":90,"width":120}},"title":"Arne Martin Aurlien: Implement an Esoteric Programming Language for Fun | JSConf EU 2014"}},{"node":{"description":"Slides: http://www.slideshare.net/floydophone/react-preso-v2\nReact, the new open-source JS library from Facebook and Instagram, is a different way to write JavaScript apps. When it was introduced at JSConf US in May, the audience was shocked by some of its design principles. One sarcastic tweet from an audience member ended up describing React's philosophy quite accurately: https://twitter.com/cowboy/status/339858717451362304\n\nAt Facebook and Instagram, we're trying to push the limits of what's possible on the web with React. My talk will start with a brief introduction to the framework, and then dive into three controversial topics: Throwing out the notion of templates and building views with JavaScript, \"re-rendering\" your entire application when your data changes, and a lightweight implementation of the DOM and events.\n\n\nLicense: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.","meta":{"duration":"PT29M32S"},"presenter":{"name":null},"source":{"id":"x7cQ3mrcKaY","provider":"youtube"},"slug":"pete-hunt-react-rethinking-best-practices-jsconf-eu-2013","tag":["JS","JSConf","JSConf EU","JavaScript","JSConf EU 2013","Hunt","React","Facebook (Website)","framework"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/x7cQ3mrcKaY/default.jpg","height":90,"width":120}},"title":"Pete Hunt: React: Rethinking best practices -- JSConf EU 2013"}},{"node":{"description":"The web browser is the world's most ubiquitous user interface. Sadly, this means we're all basically stuck in an abusive relationship with JavaScript. Obviously not a desirable position to find ourselves in, we've tried breaking out of the JS trap in a variety of ways: JS dialects (solving no design flaws but at least looking prettier) and JS as a compilation target (resulting, mostly, in unappealingly large output to support the emulated runtimes).\nSo when I found myself having to build a system with real deliverable size constraints, my only options seemed to be JS itself, or TypeScript, which doesn't add much to JS but at least provides a modicum of type checking. After a few months of fighting TypeScript, though, I'd had enough. Happily, my frustration coincided with the advent of PureScript.\nAt first glance, PureScript looks and feels like Haskell, but there's hardly any extraneous machinery. The PureScript compiler generates very concise JS, and the language itself is designed with the platform's constraints in mind. Yet it offers things like higher kinded polymorphism, type classes and similar deep Haskell magic. More appealingly, it comes with a growing number of libraries for coping with the browser as a platform: functional DOM manipulation, reactive programming, and more.\nIt turned out to be a delight, getting out of my tangled mess of JavaScript and rebuilding it all in PureScript, and I'd like to show you how and why. \n\nby Bodil Stokke (@bodil) - Future Ad Labs\n\nBodil is a compulsive conference speaker in the fields of functional programming and internets technologies, and is a co-organiser of multiple developer conferences in Scandinavia and the UK, mostly because she's still learning how to stop. She is a prolific contributor to the Free Software community, and has recently taken up designing new programming languages as a hobby. In her spare time, she works as a developer for Future Ad Labs, a London based startup that wants to make advertising a productive member of society. Her favourite pony is Pinkie Pie.","meta":{"duration":"PT44M31S"},"presenter":{"name":null},"source":{"id":"yIlDBPiMb0o","provider":"youtube"},"slug":"purescript-maybe-this-time-we-get-javascript-right-by-bodil-stokke","tag":["JavaScript","PureScript","Haskell","TypeScript","Document Object Model (API)"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/yIlDBPiMb0o/default.jpg","height":90,"width":120}},"title":"\"PureScript (Maybe This Time We Get JavaScript Right)\" by Bodil Stokke"}}]}},"pageContext":{"slug":"javascript","tag":"JavaScript"}}