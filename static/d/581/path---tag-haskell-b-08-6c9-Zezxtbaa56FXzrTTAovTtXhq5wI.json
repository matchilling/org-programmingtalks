{"data":{"allTalkJson":{"edges":[{"node":{"description":"Haskell is a beautiful functional language, written by smart computer scientists, and having clever and elegant functional constructs. It clearly separates pure and impure parts of the program.\nGame programming on the other hand is a very hands-on discipline, trying to wring out the most of the machine's performance, and aiming for one thing, in disregard of all else: a pleasant, challenging experience for the player.\nI aim to bring intersect those worlds and describe the process, and the specifics, of writing a Haskell game. Functional reactive programming, bindings to graphical libraries, etc, will all have a role to play.\n\nby Elise Huard (@elise_huard)\n\nElise Huard is a software consultant who's been crafting and bashing together software for about 15 years now. Her skill set comprises talking to people, Haskell, Clojure, R, javascript, ruby, C, scaling, and a good few bits and bobs beside.\nShe's spoken at a fair number of conferences, most of them Ruby, some of them javascript, some of them\npolyglot.\nShe's based in Berlin, Germany. She enjoys reading sci-fi, traveling, cooking, tinkering, and spending time with her husband and baby daughter.","meta":{"duration":"PT29M37S"},"presenter":{"name":null},"source":{"id":"1MNTerD8IuI","provider":"youtube"},"slug":"writing-a-game-in-haskell-by-elise-huard","tag":["Haskell","game programming","Functional Programming (Programming Language Paradigm)"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/1MNTerD8IuI/default.jpg","height":90,"width":120}},"title":"\"Writing a game in Haskell\" by Elise Huard"}},{"node":{"description":"Boston Haskell, February 18, 2015\nNikhil builds an Enigma machine. First in Cryptol, then in hardware by way of Haskell.\nSlides and code available here:  https://github.com/rsnikhil/Enigma_Cryptol_Bluespec_BSV.git","meta":{"duration":"PT59M41S"},"presenter":{"name":null},"source":{"id":"9-u2n4GgcVw","provider":"youtube"},"slug":"rishiyur-s-nikhil-enigmatic-haskell-haskellish-enigma","tag":["Haskell"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/9-u2n4GgcVw/default.jpg","height":90,"width":120}},"title":"Rishiyur S. Nikhil - Enigmatic Haskell, Haskellish Enigma"}},{"node":{"description":"Kenneth Foner's Comonad talk at the Boston Haskell meetup, September 17, 2014.\nCode and slides: https://github.com/kwf/ComonadSheet","meta":{"duration":"PT58M33S"},"presenter":{"name":null},"source":{"id":"F7F-BzOB670","provider":"youtube"},"slug":"kenneth-foner-getting-a-quick-fix-on-comonads","tag":["Haskell"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/F7F-BzOB670/default.jpg","height":90,"width":120}},"title":"Kenneth Foner - Getting a Quick Fix on Comonads"}},{"node":{"description":"Dan Doel's talk at the Boston Haskell Meetup, Sept 17, 2014\nSlides: https://drive.google.com/file/d/0B8Kkr1O1jFwcRmhxbzBMR1Ntb3c/edit?usp=sharing","meta":{"duration":"PT1H9M40S"},"presenter":{"name":null},"source":{"id":"McFNkLPTOSY","provider":"youtube"},"slug":"dan-doel-introduction-to-low-level-haskell-optimization","tag":["Haskell"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/McFNkLPTOSY/default.jpg","height":90,"width":120}},"title":"Dan Doel - Introduction to Low Level Haskell Optimization"}},{"node":{"description":" ","meta":{"duration":"PT1H4M35S"},"presenter":{"name":null},"source":{"id":"YScIPA8RbVE","provider":"youtube"},"slug":"the-algebra-of-algebraic-data-types","tag":["London","Haskell","Algebra","Algebraic","Types"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/YScIPA8RbVE/default.jpg","height":90,"width":120}},"title":"The Algebra of Algebraic Data Types"}},{"node":{"description":"Cross posted from msdn's channel 9.\n\nFunctional programming is increasing in popularity these days given the inherent problems with shared mutable state that is rife in the imperative world. As we march on to a world of multi and many-core chipsets, software engineering must evolve to better equip software engineers with the tools to exploit the vast power of multiple core processors as it won't come for free as it did in the recent past which was predictably based on Moore's law.\n\nOf course, learning new ways to think about programming semantics and code patterns are not always straight forward. For example, most imperative programmers (which include most of us who build software for a living...) are somewhat perplexed by the notion of functions as first class data structures that can be combined to create powerful and composable systems. Languages like Haskell are pure functional languages and require programmers to think in a different way, often in a precise mathematical fashion where composing and chaining functions is \"the Way\".\n\nDr. Brian Beckman, a Channel 9 celebrity, astrophysicist and senior software engineer thought it would be a very good idea to address the complexity of monads in an easy to understand way: a technical conversation at the whiteboard with yours truly for Channel 9.\n\nThis video interview is the result of Brian's idea that he can in fact remove the fear of monads from anybody who pays attention to his explanation. Of course, you can't just cover monads in a vacuum (category theory is not really addressed here) so the context is functional programming (Brian covers functions and composable functional structures (function chains) and of course monoids and then monads).\n\nTune in. There's a lot to learn here and only Brian can make monads easy to understand for the rest of us!","meta":{"duration":"PT1H7M11S"},"presenter":{"name":null},"source":{"id":"ZhuHCtR3xq8","provider":"youtube"},"slug":"brian-beckman-dont-fear-the-monad","tag":["haskell","monads","programming","brian beckman","functional programming","Haskell"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/ZhuHCtR3xq8/default.jpg","height":90,"width":120}},"title":"Brian Beckman: Don't fear the Monad"}},{"node":{"description":"Speaker: Tim Williams.\n\nLondon Haskell user group. 27th March 2013.\n\nThe theory and practice of various recursion schemes applied to real world problems. Demonstrating compositional data-types and data-type generic programs by modelling recursive types as fixed points of functors. Code starts with simple list examples and moves quickly on to more problematic topics, such as program analysis, optimisation, memoization, templating and more.","meta":{"duration":"PT1H50M29S"},"presenter":{"name":null},"source":{"id":"Zw9KeP3OzpU","provider":"youtube"},"slug":"recursion-schemes","tag":["Haskell"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/Zw9KeP3OzpU/default.jpg","height":90,"width":120}},"title":"Recursion Schemes"}},{"node":{"description":"Cody Roux's talk for the Boston Haskell Meetup - February 18, 2015\nSlides: http://www.slideshare.net/imalsogreg/cody-roux-pure-type-systems-boston-haskell-meetup","meta":{"duration":"PT1H17M1S"},"presenter":{"name":null},"source":{"id":"ZGqKsalJi4s","provider":"youtube"},"slug":"cody-roux-pure-type-systems","tag":["Haskell"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/ZGqKsalJi4s/default.jpg","height":90,"width":120}},"title":"Cody Roux - Pure Type Systems"}},{"node":{"description":"We will begin with an overview of the Frames library that offers a data frame abstraction for efficiently working with tabular data in Haskell. A close look at an incidental aspect of the Frames implementation will provide an opportunity to think a bit about records and sum types, which will let us work up a technique for designing embedded domain specific languages (EDSLs) that run at top speed whether interpreted as ordinary Haskell values, or used to feed an entirely non-Haskell compiler tool chain for targeting specialized hardware.","meta":{"duration":"PT1H41M41S"},"presenter":{"name":"Anthony Cowley"},"source":{"id":"_KioQRICpmo","provider":"youtube"},"slug":"framing-the-discussion-with-edsls","tag":["Haskell"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/_KioQRICpmo/default.jpg","height":90,"width":120}},"title":"Framing the Discussion with EDSLs"}},{"node":{"description":"This talk was given at Midwest.io 2014.\n\nAn in-depth examination of the Fibonacci sequence intended to demonstrate the value of Haskell, bust myths about the difficulty of using Haskell and encourage further research and interest in the language.\n\nAbout the Speaker\n\nAndrew is a software consultant with experience delivering telemarketing, manufacturing and analytic systems to both web and native platforms.","meta":{"duration":"PT26M11S"},"presenter":{"name":null},"source":{"id":"apBWkBDVlow","provider":"youtube"},"slug":"midwestio-2014-demystifying-haskell-andrew-rademacher","tag":["Haskell","Fibonacci Number (Literature Subject)"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/apBWkBDVlow/default.jpg","height":90,"width":120}},"title":"Midwest.io 2014 - Demystifying Haskell - Andrew Rademacher"}},{"node":{"description":"Slides: http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf\n\nThis was a talk I gave at the second New York Haskell User Group Meeting (http://www.meetup.com/NY-Haskell/) on the new lens library, which provides a highly composable toolbox for accessing and modifying multiple parts of data structures.\n\nStarting with building blocks such as fmap and (.), we build up combinators suitable for working with a wide array of data structures. These generalize the notions you already know how to use into a form that is easier to compose and simultaneously allow them to be used for monomorphic containers such as Data.Text. \n\nAll without compromising on your ability to reason about them using laws!\n\nFinally, once I've built up some foundations, I do a bit of a deep dive, exploring consequences of this design. In particular we discuss the efficient generic programming programming framework exported by lens, and type-safe Traversal-based zippers.\n\nFamiliarity with the Applicative and Traversable classes from the Haskell base libraries will be helpful (links provided below), but a basic understanding of the concepts get introduced as I go along. \n\nUseful (but not mandatory) references:\n\nThe lens library and documentation: http://hackage.haskell.org/package/lens\nA previous, more introductory talk on how to use the lenses Edward Kmett wrote for the scalaz in the Scala programming language: https://www.youtube.com/watch?v=efv0SQNde5Q\nThe original Applicative paper: http://www.soi.city.ac.uk/~ross/papers/Applicative.pdf\nLots of information on Traversable: http://www.cs.ox.ac.uk/jeremy.gibbons/publications/iterator.pdf\nA write-up of this talk, as presented at the Bay Area Haskell Users Group: http://google-opensource.blogspot.com/2012/10/lenses-folds-and-traversals-haskell.html\n\nThe original Keynote version of the slides are available from http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.key\n\nThanks go to Johan Kiviniemi, who worked magic when it came to cleaning up the audio for this recording!","meta":{"duration":"PT1H54M46S"},"presenter":{"name":null},"source":{"id":"cefnmjtAolY","provider":"youtube"},"slug":"lenses-folds-and-traversals","tag":["Haskell","Functional Programming","Haskell","Mathematics","Lecture","Talk","Academic","Talking","Computer"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/cefnmjtAolY/default.jpg","height":90,"width":120}},"title":"Lenses, Folds, and Traversals"}},{"node":{"description":"The web browser is the world's most ubiquitous user interface. Sadly, this means we're all basically stuck in an abusive relationship with JavaScript. Obviously not a desirable position to find ourselves in, we've tried breaking out of the JS trap in a variety of ways: JS dialects (solving no design flaws but at least looking prettier) and JS as a compilation target (resulting, mostly, in unappealingly large output to support the emulated runtimes).\nSo when I found myself having to build a system with real deliverable size constraints, my only options seemed to be JS itself, or TypeScript, which doesn't add much to JS but at least provides a modicum of type checking. After a few months of fighting TypeScript, though, I'd had enough. Happily, my frustration coincided with the advent of PureScript.\nAt first glance, PureScript looks and feels like Haskell, but there's hardly any extraneous machinery. The PureScript compiler generates very concise JS, and the language itself is designed with the platform's constraints in mind. Yet it offers things like higher kinded polymorphism, type classes and similar deep Haskell magic. More appealingly, it comes with a growing number of libraries for coping with the browser as a platform: functional DOM manipulation, reactive programming, and more.\nIt turned out to be a delight, getting out of my tangled mess of JavaScript and rebuilding it all in PureScript, and I'd like to show you how and why. \n\nby Bodil Stokke (@bodil) - Future Ad Labs\n\nBodil is a compulsive conference speaker in the fields of functional programming and internets technologies, and is a co-organiser of multiple developer conferences in Scandinavia and the UK, mostly because she's still learning how to stop. She is a prolific contributor to the Free Software community, and has recently taken up designing new programming languages as a hobby. In her spare time, she works as a developer for Future Ad Labs, a London based startup that wants to make advertising a productive member of society. Her favourite pony is Pinkie Pie.","meta":{"duration":"PT44M31S"},"presenter":{"name":null},"source":{"id":"yIlDBPiMb0o","provider":"youtube"},"slug":"purescript-maybe-this-time-we-get-javascript-right-by-bodil-stokke","tag":["JavaScript","PureScript","Haskell","TypeScript","Document Object Model (API)"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/yIlDBPiMb0o/default.jpg","height":90,"width":120}},"title":"\"PureScript (Maybe This Time We Get JavaScript Right)\" by Bodil Stokke"}},{"node":{"description":"International Conference on Functional Programming 2014.\nGothenburg, Sweden.","meta":{"duration":"PT26M1S"},"presenter":{"name":null},"source":{"id":"xFy_8n_HdI4","provider":"youtube"},"slug":"icfp-2014-safe-zero-cost-coercions-for-haskell-richard-a-eisenberg","tag":["Haskell","International Conference On Functional Programming (Conference Series)"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/xFy_8n_HdI4/default.jpg","height":90,"width":120}},"title":"ICFP 2014: Safe Zero-Cost Coercions for Haskell - Richard A. Eisenberg"}}]}},"pageContext":{"slug":"haskell","tag":"Haskell"}}