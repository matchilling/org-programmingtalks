{"data":{"talkJson":{"description":"More than 55 years ago John McCarthy had an insanely great idea called Lisp. Lisp marked the beginning of functional programming, interpreters, high-level metaprogramming, garbage collection, and much more. Yet after such auspicious beginnings the idea of Lisp has since faded and many of its innovations have been adopted by much more popular programming languages. Until recently Lisp even appeared doomed to fade into obscurity but several things have conspired to make Lisp somewhat cool again - one of these is Clojure, a fun modern Lisp targeting the Java Virtual Machine.\n\nHowever the Web doesn't speak JVM bytecodes. It speaks JavaScript - thus the cornucopia of languages that now compile to JavaScript. The most well known include GWT, CoffeeScript, and more recently Dart and TypeScript. However none of these represent a real break from the status quo.\n\nJohn McCarthy's insanely great idea still has a lot to offer the Web and we'll see how with ClojureScript, an implementation of Clojure that targets JavaScript.","meta":{"duration":"PT32M3S"},"presenter":{"name":"David Nolen"},"slug":"clojurescript-lisps-revenge","source":{"id":"MTawgp3SKy8","provider":"youtube"},"tag":["Clojure","Lisp","GOTO Conference"],"title":"ClojureScript: Lisp's Revenge"},"allTalkJson":{"edges":[{"node":{"description":"Games are a modern art form, and like other artists, game designers need to experience their work as they create it. This talk will explore the benefits of making games \"at runtime\". Through both abstract discussion and concrete demonstration, we will see why Clojure is uniquely suited to the task.\n\nZach is an independent programmer and tutor in the Pittsburgh area. He made Nightcode, a Clojure IDE for beginners, and is working to make Clojure games a reality with the play-clj library and Nightmod, a game creation tool. Previously, he was a programmer at the National Security Agency in Maryland.","meta":{"duration":"PT37M34S"},"presenter":{"name":"Zach Oakes"},"source":{"id":"0GzzFeS5cMc","provider":"youtube"},"slug":"making-games-at-runtime-with-clojure","tag":["Clojure","Game Programmer"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/0GzzFeS5cMc/default.jpg","height":90,"width":120}},"title":"Making Games at Runtime with Clojure"}},{"node":{"description":"This presentation was recorded at GOTO Chicago 2015\nhttp://gotochgo.com\n\nBrian LeRoux - PhoneGap Project Team, Adobe\n\nABSTRACT\nJavaScript has a long history of being difficult to structure and maintain. To deal with this complexity a swath of frameworks appeared over the years. Prototype.js was quickly followed by jQuery and hounded by Dojo, YUI, Mootools and [...]\nDownload slides and read the full abstract here:\nhttp://gotocon.com/chicago-2015/presentation/ECMAScript%206%20&%20Web%20Components\n\nhttps://twitter.com/gotochgo\nhttps://www.facebook.com/GOTOConference\nhttp://gotocon.com","meta":{"duration":"PT36M12S"},"presenter":{"name":null},"source":{"id":"2w4sRkTnhPM","provider":"youtube"},"slug":"ecmascript-6-and-web-components-brian-leroux","tag":["Brian LeRoux","ECMAScript (Programming Language)","GOTO Conference","GOTO Conference","GOTO Conference","World Wide Web (Video Game Platform)","Software Development (Industry)","Programming Language","Java"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/2w4sRkTnhPM/default.jpg","height":90,"width":120}},"title":"ECMAScript 6 & Web Components • Brian LeRoux"}},{"node":{"description":"There are now several frameworks designed to address the demand for \"big agile.\"\n\nIn this talk Jez will explain the flaws in such frameworks, why they so often fail to produce the desired effects, and what we should do instead. He will also address some common organizational obstacles to moving fast at scale: governance, budgeting, and the project paradigm - and discuss how to address them. Warning: this talk will include liberal use of real, statistically sound data.","meta":{"duration":"PT51M2S"},"presenter":{"name":"Jez Humble"},"source":{"id":"2zYxWEZ0gYg","provider":"youtube"},"slug":"why-scaling-agile-doesnt-work","tag":["GOTO Conference","Agile","Scrum"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/2zYxWEZ0gYg/default.jpg","height":90,"width":120}},"title":"Why Scaling Agile Doesn't Work"}},{"node":{"description":"Software gets complicated fast. Most of good architecture and design practise is about trying to slow the rate at which software gets complicated. You can’t stop it, it’s a form of entropy. You can only slow it down and do your level best to stay on top of things.\n\nOne way to manage the mess is to maximise the likelihood that everyone knows what’s going on in the codebase. This requires two things: consistency and replaceability. Consistency implies you can make reasonable assumptions about unfamiliar parts of the application. Replaceability means you can kill code easily and replace it with something better.\n\nDan North argues that code should either be new enough that someone remembers writing it, or well-enough established that everyone knows how it works. It’s code in that awkward middle stage, between brand new and part-of-the-furniture, that gets forgotten about and starts to smell. If code is going to die it should die quickly. If it is going to stick around it should be stable.\n\nIn this talk, Dan describes a model for thinking about the age of code and argues for replaceability as a first class concern. He also discovers that if you optimise for both replaceability and consistency you can end up with something that looks a lot like microservices.","meta":{"duration":"PT37M22S"},"presenter":{"name":"Dan North"},"source":{"id":"4Y0tOi7QWqM","provider":"youtube"},"slug":"software-that-fits-in-your-head","tag":["Agile","GOTO Conference","Mircoservices","Software Architecture"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/4Y0tOi7QWqM/default.jpg","height":90,"width":120}},"title":"Software that Fits in Your Head"}},{"node":{"description":"Cybercriminals are often perceived as having super powers to get into your systems and steal your money and data. The vast majority are just following simple cookbook recipes to take advantage of laziness, sloppiness and an failure to understand what might be risky behaviour. Defences against cybercrime do not have to be hi-tech or even very complex.\nThis talk discusses various types of cybercrime and gives some practical advice as to how to make yourself a little safer.","meta":{"duration":"PT51M4S"},"presenter":{"name":"Richard Clayton"},"source":{"id":"624S9ly09Xk","provider":"youtube"},"slug":"a-practical-guide-to-cybercrime","tag":["GOTO Conference","University of Cambridge","Cybercrime","Security","Privacy"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/624S9ly09Xk/default.jpg","height":90,"width":120}},"title":"A Practical Guide to Cybercrime"}},{"node":{"description":"R is a domain-specific language for analyzing data. Why does data analysis need its own DSL? What does R do well and what does it do poorly? How can developers take advantage of R's strengths and mitigate its weaknesses? This talk will give some answers to these questions.","meta":{"duration":"PT38M9S"},"presenter":{"name":"John Cook"},"source":{"id":"6S9r_YbqHy8","provider":"youtube"},"slug":"the-r-language-the-good-the-bad-and-the-ugly","tag":["GOTO Conference","Aarhus","R Programming Language","Statistics"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/6S9r_YbqHy8/default.jpg","height":90,"width":120}},"title":"The R Language: The Good The Bad & The Ugly"}},{"node":{"description":"Check out our upcoming conferences at http://gotocon.com\nSubscribe to the GOTO Conferences YouTube Channel at https://www.youtube.com/user/GOTOConf...\n\nJanne Jul Jensen - Interaction Designer and Usability Specialist\n\nABSTRACT\nMost developers today are aware of the importance of creating a good user interface with a high level of usability, but many are lacking the methods and techniques that can help in this process. This session will present to the listeners a range of concrete methods and techniques applicable in different phases of a design process, to handle specific challenges. This will include design patterns, personas, wire framing, paper prototype testing, progressive disclosure, card sorting and creative workshops and many of the methods and techniques will be accompanied by examples.\n\nhttps://twitter.com/gotocon\nhttps://www.facebook.com/GOTOConference\nhttp://gotocon.com","meta":{"duration":"PT51M20S"},"presenter":{"name":null},"source":{"id":"7OSkB4BCx00","provider":"youtube"},"slug":"user-interface-ux-techniques-janne-jul-jensen","tag":["Software Development","Janne Jul Jensen","User Interface Design (Field Of Study)","User Interface (Ontology Instance)","User Interface","GOTO Conference","GOTO Conference","GOTO Conference","User Experience Design (Industry)","Technology (Industry)","User Interface (Speech Topic)","UX","Trifork","Design (Industry)","Programming Language","Videos for Developers"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/7OSkB4BCx00/default.jpg","height":90,"width":120}},"title":"User Interface (UX) Techniques • Janne Jul Jensen"}},{"node":{"description":"This presentation was recorded at GOTO Berlin 2015\nhttp://gotober.com\n\nKevin Goldsmith - Vice President, Engineering at Spotify\n\nABSTRACT\nThe software industry used to be all about building monoliths: monolithic applications and services, with bing-bang product releasees. All that has now changed [...]\nDownload slides and read the full abstract here:\nhttp://gotocon.com/berlin-2015/presentation/Microservices%20@%20Spotify\n\nhttps://twitter.com/gotober\nhttps://www.facebook.com/GOTOConference\nhttp://gotocon.com","meta":{"duration":"PT49M8S"},"presenter":{"name":"Kevin Goldsmith"},"source":{"id":"7LGPeBgNFuU","provider":"youtube"},"slug":"microservices-spotify-kevin-goldsmith","tag":["GOTO Conference","Berlin","Microservices","Spotify","Programming Languages"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/7LGPeBgNFuU/default.jpg","height":90,"width":120}},"title":"Microservices at Spotify"}},{"node":{"description":"Dan North - Agile Troublemaker, Developer, Originator of BDD\n\nABSTRACT\nThus begins an old, and sadly lost in the mists of Usenet, love story about Vi and Ed (who becomes her \"ex\"), told entirely in Unix commands. I had no idea when I started learning these arcane (guess how the \"dd\" command got its name) and cryptic (what about \"grep\"?) Unix commands how incredibly useful they would become over the next two decades. If your primary OS is Linux or OSX on the desktop, and maybe iOS or Android on the move, you'll find this 40-something year joke (\"Unix\" itself was a bad pun) has managed to embed itself into every facet of your technological life.\n\nBeing comfortable at a shell prompt and having a healthy working knowledge of Unix commands and regular expressions will give you a whole new level of capability. In this fun talk I'll introduce a few commands and shell tricks you should have in your back pocket, and show you how to start taking control of your operating system. If you ask nicely I'll even tell you about the production system I wrote using Makefiles.","meta":{"duration":"PT30M4S"},"presenter":{"name":null},"source":{"id":"7uwW20odwEk","provider":"youtube"},"slug":"power-use-of-unix-dan-north","tag":["Unix (Software)","Unix Commands","Grep (Software)","Linux software","OSx86 (Software)","Android (Software)","production system","Makefiles","Dan North","GOTO Conference","GOTO Conference","GOTO Conference","Programming Language"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/7uwW20odwEk/default.jpg","height":90,"width":120}},"title":"Power Use of UNIX • Dan North"}},{"node":{"description":"People keep implementing map, filter and other fundamental algorithms in different contexts - eagerly over collections, over lazy sequences, in parallel, over enumerables/iterables, over observables, over channels/streams etc. In addition to duplication of effort, this yields bloated APIs, and, when implemented in the classic way, often involves the creation of expensive intermediate objects/values that\ncan be difficult to optimize away.\nMost problematic is that this approach keeps us from composing core algorithms in a context-independent way which would facilitate reuse and engender greater flexibility.\nThis talk will describe transducers, a new library feature for Clojure (but of interest to other languages) that emphasizes composable, context-free, intermediate-free notions like 'mapping' and 'filtering' and their concrete reuse across all of the contexts above.","meta":{"duration":"PT45M1S"},"presenter":{"name":"Rich Hickey"},"source":{"id":"6mTbuzafcII","provider":"youtube"},"slug":"transducers","tag":["Clojure"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/6mTbuzafcII/default.jpg","height":90,"width":120}},"title":"Transducers"}}]}},"pageContext":{"slug":"clojurescript-lisps-revenge","tags":["Clojure","Lisp","GOTO Conference"]}}