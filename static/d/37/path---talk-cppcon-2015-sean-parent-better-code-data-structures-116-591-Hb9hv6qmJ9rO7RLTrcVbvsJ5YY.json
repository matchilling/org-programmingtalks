{"data":{"talkJson":{"description":"http://www.cppcon.org\n--\nThe standard library containers are often both misused and underused. Instead of creating new containers, applications are often structured with incidental data structures composed of objects referencing other object. This talk looks at some of the ways the standard containers can be better utilized and how creating (or using non-standard library) containers can greatly simplify code. The goal is no incidental data structures. \n--\nSean Parent is a principal scientist and software architect for Adobe’s mobile digital imaging group. Sean has been at Adobe since 1993 when he joined as a senior engineer working on Photoshop and later managed Adobe’s Software Technology Lab. In 2009 Sean spent a year at Google working on Chrome OS before returning to Adobe. From 1988 through 1993 Sean worked at Apple, where he was part of the system software team that developed the technologies allowing Apple’s successful transition to PowerPC.\n--\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com","meta":{"duration":"PT1H4M"},"presenter":{"name":null},"slug":"cppcon-2015-sean-parent-better-code-data-structures","source":{"id":"sWgDk-o-6ZE","provider":"youtube"},"tag":["CppCon 2015","Sean Parent","C++","Computer Programming (Conference Subject)","Data Structure (Literature Subject)","Bash Films","Conference Video","Video Services"],"title":"CppCon 2015: Sean Parent \"Better Code: Data Structures\""},"allTalkJson":{"edges":[{"node":{"description":"We know how to write bad code: litter our programs with casts, macros, pointers, naked new and deletes, and complicated control structures. Alternatively (or additionally), we could obscure every design decision in a mess of deeply nested abstractions using the latest object-oriented programming and generic programming tricks. Then, for good measure, we might complicate our algorithms with interesting special cases. Such code is incomprehensible, unmaintainable, usually inefficient, and not uncommon.\n\nBut how do we write good code? What principles, techniques, and idioms can we exploit to make it easier to produce quality code? In this presentation, I make an argument for type-rich interfaces, compact data structures, integrated resource management and error handling, and highly-structured algorithmic code. I illustrate my ideas and guidelines with a few idiomatic code examples.\n\nI use C++11 freely. Examples include auto, general constant expressions, uniform initialization, type aliases, type safe threading, and user-defined literals. C++11 features are only just starting to appear in production compilers, so some of my suggestions are conjecture. Developing a \"modern style,\" however, is essential if we don't want to maintain newly-written 1970s and 1980s style code in 2020.\n\nThis presentation reflects my thoughts on what \"Modern C++\" should mean in the 2010s: a language for programming based on light-weight abstraction with direct and efficient mapping to hardware, suitable for infrastructure code.","meta":{"duration":"PT1H29M48S"},"presenter":{"name":"Bjarne Stroustrup"},"source":{"id":"0iWb_qi2-uI","provider":"youtube"},"slug":"keynote-goingnative-2012","tag":["C++","GoingNative","Keynote"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/0iWb_qi2-uI/default.jpg","height":90,"width":120}},"title":"Keynote GoingNative 2012 C++"}},{"node":{"description":"http://www.cppcon.org\n--\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014\n--\nOne of the more challenging aspects of developing flight software (FSW) for NASA's Spirit and Opportunity Mars Exploration Rovers (MER) and Curiosity, the Mars Science Laboratory rover was how to enable them to drive themselves safely through unknown Martian terrain. When the MER mission was approved in the year 2000, JPL researchers had already demonstrated that capability on prototype rovers [1] using software written primarily in C++ on a VxWorks realtime O/S platform with shared memory. So when asked to incorporate that capability into the MER vehicles which also relied on a similar VxWorks realtime O/S, the team concluded it would be safest and most expedient to incorporate the already field-tested C++ software. But that presented a challenge, since at that point all rover FSW development was mandated to be done mainly in the C programming language.\n\nIn this talk we present some of the challenges we faced and solutions we found in deploying C++ onto the Mars Rovers. For example, dynamic allocation was initially precluded, but development of a specialized memory allocator (using the C++ \"placement new\" operator) enabled us to incorporate it safely into the flight system. We will discuss what aspects of C++ were incorporated, what simulation environments aided development, describe some of the tools used to validate system behavior, and explain how our success using C++ for the implementation of autonomous navigation on MER has influenced future FSW efforts.\n\n[1] Jeffrey Biesiadecki, Mark W. Maimone, and Jack Morrison., \"The Athena SDM Rover: A Testbed for Mars Rover Mobility,\" June 2001 iSAIRAS conference proceedings, Montreal, Canada., june 2001.\n--\nMark Maimone is a Navigation and Machine Vision researcher at JPL.Mark designed and developed the autonomous vision and navigation software that lets the MER and MSL Mars Rovers drive themselves safely, and wrote ground software that automated the analysis of Mobility and arm operations on MER.Mark is now a Rover Driver for Curiosity, and he continues to develop and enhance the onboard autonomous vision and navigation software for the rovers.Mark earned his Ph.D. in Computer Science at Carnegie Mellon University in 1996, and completed a postdoc there in 1997 as Navigation and Software Lead for the 1997 Atacama Desert Trek.At JPL since 1997, Mark has also worked on the Long Range Science Rover, Planetary Dexterous Manipulator, and Pioneer Vision System for Chornobyl Inspection projects, delivering 3D vision systems for autonomous robotic operations and mapping.Website: http://www-robotics.jpl.nasa.gov/people/Mark_Maimone/\n--\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com","meta":{"duration":"PT1H26M19S"},"presenter":{"name":null},"source":{"id":"3SdSKZFoUa8","provider":"youtube"},"slug":"cppcon-2014-mark-maimone-c-on-mars-incorporating-c-into-mars-rover-flight-software","tag":["C++ on Mars: Incorporating C++ into Mars Rover Flight Software","Mark Maimone","CppCon 2014","Bash Films"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/3SdSKZFoUa8/default.jpg","height":90,"width":120}},"title":"CppCon 2014: Mark Maimone \"C++ on Mars: Incorporating C++ into Mars Rover Flight Software\""}},{"node":{"description":"Hartmut Kaisers Keynote from Meeting C++ 2014\n\nSlides:\nhttp://meetingcpp.com/index.php/tv14/items/26.html","meta":{"duration":"PT1H27M36S"},"presenter":{"name":null},"source":{"id":"4OCUEgSNIAY","provider":"youtube"},"slug":"plain-threads-are-the-goto-of-todays-computing-hartmut-kaiser-keynote-meeting-c-2014","tag":["Software (Industry)","C (Programming Language)","C++","Meeting C++","Keynote","Parallelism","Concurrency","Threading","Thread","HPX","Meeting C++ 2014"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/4OCUEgSNIAY/default.jpg","height":90,"width":120}},"title":"Plain Threads are the GOTO of todays computing - Hartmut Kaiser - Keynote Meeting C++ 2014"}},{"node":{"description":"What’s the single most important design guideline for the creation of high-quality software? For Scott Meyers, it’s all about interface design. That includes user interfaces, of course, but also APIs, i.e., class interfaces, function interfaces, template interfaces, etc. The guideline is simple: make interfaces easy to use correctly and hard to use incorrectly, but achieving it can be challenging. In this presentation, Scott describes a number of specific ways to approach the design of high-quality interfaces. Much of the material is language- and domain-independent, but some of the ideas assume that you’re using a programming language with relatively strong static typing (e.g., C, C++, Java, C#).","meta":{"duration":"PT58M42S"},"presenter":{"name":null},"source":{"id":"5tg1ONG18H8","provider":"youtube"},"slug":"scott-meyers-the-most-important-design-guideline","tag":["Application Programming Interface (Literature Subject)","Scott Meyers","C++"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/5tg1ONG18H8/default.jpg","height":90,"width":120}},"title":"Scott Meyers – The Most Important Design Guideline"}},{"node":{"description":"http://www.cppcon.org\n—\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014\n--\nAsk a non-C++ developer what they think of C++ and they'll give the language plenty of compliments: powerful, fast, flexible, and \"the language for smart people\". But along with that you are likely to hear ugly, complicated, hard to read, and \"the language for smart people\". Is it possible to write beautiful C++? Not arcanely elegant or wickedly compact, but readable, clear, expressive - beautiful! We say it is, and we want to show you how.\n\nIn this session, you'll see how to turn pages of \"comic book characters swearing\" into code you'll be proud to call your own. By making your code express your intent, using the power of new language and library functionality, and leaving hard-to-read constructs out of your vocabulary, you can give your code a makeover that will stand the test of time.\n--\nJames McNellis is a senior engineer on the Microsoft Visual C++ team, where he is responsible for the Visual C++ C Runtime (CRT) and C Standard Library implementation. He was previously a member of the Microsoft Expression Blend team, developing the XAML designer tools for Windows 8 apps. Prior to joining Microsoft in 2010, he spent several years working on real-time 3-D simulation and robotics projects in the defense industry. James is a prolific contributor on the Stack Overflow programming Q&A website and occasionally writes for the Visual C++ Team Blog. He tweets at @JamesMcNellis and can be found elsewhere online via http://www.jamesmcnellis.com.\n--\nKate Gregory has been using C++ since before Microsoft had a C++ compiler. She writes, mentors, codes, and leads projects, in both C++ and .NET, especially for Windows 7 and 8. Kate is a Microsoft Regional Director, a Visual C++ MVP, and has written over a dozen books (the most recent on C++ AMP for Microsoft Press) and speaks at conferences and user groups around the world. Kate develops courses on C++, Visual Studio, and Windows programming for Pluralsight, founded the East of Toronto .NET Users group, and is a member of adjunct faculty at Trent University in Peterborough.Website: http://www.gregcons.comTwitter handle: @gregcons\n--\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com","meta":{"duration":"PT56M23S"},"presenter":{"name":null},"source":{"id":"BiYliKliFvs","provider":"youtube"},"slug":"cppcon-2014-james-mcnellis-and-kate-gregory-making-c-code-beautiful","tag":["CppCon 2014","James McNellis","Kate Gregory","Making C++ Code Beautiful","Bash Films"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/BiYliKliFvs/default.jpg","height":90,"width":120}},"title":"CppCon 2014: James McNellis & Kate Gregory \"Making C++ Code Beautiful\""}},{"node":{"description":"http://www.cppcon.org\n—\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014\n--\nExample-driven talk on how to design and write lock-free algorithms and data structures using C++ atomic -- something that can look deceptively simple, but contains very deep topics. (Important note: This is not the same as my \"atomic Weapons\" talk; that talk was about the \"what they are and why\" of the C++ memory model and atomics, and did not cover how to actually use atomics to implement highly concurrent algorithms and data structures.)\n--\nHerb Sutter: Author, chair of the ISO C++ committee, software architect at Microsoft.\n--\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com","meta":{"duration":"PT1H11M20S"},"presenter":{"name":null},"source":{"id":"CmxkPChOcvw","provider":"youtube"},"slug":"cppcon-2014-herb-sutter-lock-free-programming-or-juggling-razor-blades-part-ii","tag":["CppCon 2014","Herb Sutter","Juggling Razor Blades)","Bash Films"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/CmxkPChOcvw/default.jpg","height":90,"width":120}},"title":"CppCon 2014: Herb Sutter \"Lock-Free Programming (or, Juggling Razor Blades), Part II\""}},{"node":{"description":"Meetup: http://www.meetup.com/papers-we-love/events/214400572/\nPaper: http://www.cs.cmu.edu/~crary/819-f09/Hoare69.pdf\nSlides: https://speakerdeck.com/paperswelove/jean-yang-on-an-axiomatic-basis-for-computer-programming\nAudio: http://www.mixcloud.com/paperswelove/jean-yang-on-an-axiomatic-basis-for-computer-programming/\n---------------------------------------------------------------------------------------------\nSponsored by The Ladders (@TheLaddersDev)\n---------------------------------------------------------------------------------------------\n\nDescription\n---------------\nOur lives now run on software. Bugs are becoming not just annoyances for software developers, but sources of potentially catastrophic failures. A careless programmer mistake could leak our social security numbers or crash our cars. While testing provides some assurance, it is difficult to test all possibilities in complex systems--and practically impossible in concurrent systems. For the critical systems in our lives, we should demand mathematical guarantees that the software behaves the way the programmer expected.\n\nA single paper influenced much of the work towards providing these mathematical guarantees. C.A.R. Hoare’s seminal 1969 paper “An Axiomatic Basis for Computer Programming” introduces a method of reasoning about program correctness now known as Hoare logic. In this paper, Hoare provides a technique that 1) allows programmers to express program properties and 2) allows these properties to be automatically checked. These ideas have influenced decades of research in automated reasoning about software correctness.\n\nIn this talk, I will describe the main ideas in Hoare logic, as well as the impact of these ideas. I will talk about my personal experience using Hoare logic to verify memory guarantees in an operating system. I will also discuss takeaway lessons for working programmers.\n\nBio\n----\nJean Yang (@jeanqasaur) is a final-year PhD student at MIT. For her PhD thesis she has created Jeeves, a programming language for automatically enforcing information flow policies for security and privacy. You may be more familiar with one of her other projects, Haskell Ryan Gosling.","meta":{"duration":"PT1H4M32S"},"presenter":{"name":null},"source":{"id":"GQi-6-d5ooQ","provider":"youtube"},"slug":"jean-yang-on-an-axiomatic-basis-for-computer-programming","tag":["Computer Programming (Conference Subject)","Mathematics (Field Of Study)","Software Engineering (Industry)","Program Correctness","Ryan Gosling","Hoare Logic","Type Checking","Computer (Industry)","Programming Language"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/GQi-6-d5ooQ/default.jpg","height":90,"width":120}},"title":"Jean Yang on An Axiomatic Basis for Computer Programming"}},{"node":{"description":"The C++ programming language is accelerating with amazing new features, but sometimes it can feel like these features are out of reach. Unfortunately, many C++ developers are stuck using old C++ compilers, runtimes, and tools. They are missing out on some of the best features the language has to offer. LLVM is an open source project that can help address this, but even so it seems nearly impossible to address this growing gap between what C++ could be and what in practice it is today. This talk will explore these problems and what (if any) solutions might exist. Also, there might be some live demo. About the speaker: Chandler Carruth leads the LLVM and C++ teams at Google, building better compilers, libraries, tools, and more. He is an active contributor to the LLVM open source project, and sits on the board of directors for both the LLVM Foundation and the Standard C++ Foundation. Previously at Google, he worked on several pieces of Google’s distributed build system and helped maintain a few core C++ libraries within Google’s codebase. He received his M.S. and B.S. in Computer Science from Wake Forest University, but disavows all knowledge of the contents of his Master’s thesis. He is regularly found drinking Cherry Coke Zero in the daytime and pontificating over a single malt scotch in the evening.","meta":{"duration":"PT1H23M18S"},"presenter":{"name":"Jason Turner"},"source":{"id":"OkgvqjJzH_Y","provider":"youtube"},"slug":"rethinking-exceptions","tag":["C++","Exceptions","Pacific++"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/OkgvqjJzH_Y/default.jpg","height":90,"width":120}},"title":"Rethinking Exceptions"}},{"node":{"description":"In the 45+ years since Scott Meyers wrote his first program, he’s played many roles: programmer, user, educator, researcher, consultant. Different roles beget different perspectives on software development, and so many perspectives over so much time have led Scott to strong views about the things that really matter. In this presentation, he’ll share what he believes is especially important in software and software development, and he’ll try to convince you to embrace the same ideas he does.","meta":{"duration":"PT1H6M37S"},"presenter":{"name":"Scott Meyers"},"source":{"id":"RT46MpK39rQ","provider":"youtube"},"slug":"things-that-matter","tag":["DConf 2017","Software Development","Keynote","C++"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/RT46MpK39rQ/default.jpg","height":90,"width":120}},"title":"Things that Matter"}},{"node":{"description":"http://www.cppcon.org\n—\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014\n--\nReasonably-written C++ code will be naturally fast. This is to C++'s excellent low-penalty abstractions and a memory model close to the machine.\n\nHowever, a large category of applications have no boundaries on desired speed, meaning there's no point of diminishing returns in making code faster. Better speed means less power consumed for the same work, more workload with the same data center expense, better features for the end user, more features for machine learning, better analytics, and more.\n\nOptimizing has always been an art, and in particular optimizing C++ on contemporary hardware has become a task of formidable complexity. This is because modern hardware has a few peculiarities about it that are not sufficiently understood and explored. This talk discusses a few such effects, and guides the attendee on how to navigate design and implementation options in search for better performance.\n--\nAndrei Alexandrescu is a researcher, software engineer, and author. He wrote three best-selling books on programming (Modern C++ Design, C++ Coding Standards, and The D Programming Language) and numerous articles and papers on wide-ranging topics from programming to language design to Machine Learning to Natural Language Processing. Andrei holds a PhD in Computer Science from the University of Washington and a BSc in Electrical Engineering from University \"Politehnica\" Bucharest. He works as a Research Scientist for Facebook.\n\nWebsite: http://erdani.com\nTwitter handle: @incomputable\n--\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com","meta":{"duration":"PT58M19S"},"presenter":{"name":null},"source":{"id":"Qq_WaiwzOtI","provider":"youtube"},"slug":"cppcon-2014-andrei-alexandrescu-optimization-tips-mo-hustle-mo-problems","tag":["CppCon 2014","Andrei Alexandrescu","Optimization Tips","Mo' Hustle Mo' Problems","Bash Films"],"thumbnails":{"default":{"url":"https://i.ytimg.com/vi/Qq_WaiwzOtI/default.jpg","height":90,"width":120}},"title":"CppCon 2014: Andrei Alexandrescu \"Optimization Tips - Mo' Hustle Mo' Problems\""}}]}},"pageContext":{"slug":"cppcon-2015-sean-parent-better-code-data-structures","tags":["CppCon 2015","Sean Parent","C++","Computer Programming (Conference Subject)","Data Structure (Literature Subject)","Bash Films","Conference Video","Video Services"]}}