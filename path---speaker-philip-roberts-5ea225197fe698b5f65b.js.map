{"version":3,"sources":["webpack:///path---speaker-philip-roberts-5ea225197fe698b5f65b.js","webpack:///./.cache/json/speaker-philip-roberts.json"],"names":["webpackJsonp","1923","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext","speaker"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,i7BAAmdC,MAAofC,SAAA,YAAsBC,WAAcC,KAAA,kBAAwBC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,yCAAAC,KAAA,+BAAAC,YAAqGC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,+CAAuDC,aAAgBC,QAAA","file":"path---speaker-philip-roberts-5ea225197fe698b5f65b.js","sourcesContent":["webpackJsonp([26336274643670],{\n\n/***/ 1923:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"JavaScript programmers like to use words like, “event-loop”, “non-blocking”, “callback”, “asynchronous”, “single-threaded” and “concurrency”.\\n\\nWe say things like “don’t block the event loop”, “make sure your code runs at 60 frames-per-second”, “well of course, it won’t work, that function is an asynchronous callback!”\\n\\nIf you’re anything like me, you nod and agree, as if it’s all obvious, even though you don’t actually know what the words mean; and yet, finding good explanations of how JavaScript actually works isn’t all that easy, so let’s learn!\\n\\nWith some handy visualisations, and fun hacks, let’s get an intuitive understanding of what happens when JavaScript runs.\\n\\nTranscript: http://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html\\n\\nLicense: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.\",\"meta\":{\"duration\":\"PT26M53S\"},\"presenter\":{\"name\":\"Philip Roberts\"},\"source\":{\"id\":\"8aGhZQkoFbQ\",\"provider\":\"youtube\"},\"slug\":\"what-the-heck-is-the-event-loop-anyway\",\"tag\":[\"JavaScript\",\"JSConf EU 2014\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/8aGhZQkoFbQ/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"What the heck is the event loop anyway?\"}}]}},\"pathContext\":{\"speaker\":\"Philip Roberts\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---speaker-philip-roberts-5ea225197fe698b5f65b.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"JavaScript programmers like to use words like, “event-loop”, “non-blocking”, “callback”, “asynchronous”, “single-threaded” and “concurrency”.\\n\\nWe say things like “don’t block the event loop”, “make sure your code runs at 60 frames-per-second”, “well of course, it won’t work, that function is an asynchronous callback!”\\n\\nIf you’re anything like me, you nod and agree, as if it’s all obvious, even though you don’t actually know what the words mean; and yet, finding good explanations of how JavaScript actually works isn’t all that easy, so let’s learn!\\n\\nWith some handy visualisations, and fun hacks, let’s get an intuitive understanding of what happens when JavaScript runs.\\n\\nTranscript: http://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html\\n\\nLicense: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.\",\"meta\":{\"duration\":\"PT26M53S\"},\"presenter\":{\"name\":\"Philip Roberts\"},\"source\":{\"id\":\"8aGhZQkoFbQ\",\"provider\":\"youtube\"},\"slug\":\"what-the-heck-is-the-event-loop-anyway\",\"tag\":[\"JavaScript\",\"JSConf EU 2014\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/8aGhZQkoFbQ/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"What the heck is the event loop anyway?\"}}]}},\"pathContext\":{\"speaker\":\"Philip Roberts\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/speaker-philip-roberts.json\n// module id = 1923\n// module chunks = 26336274643670"],"sourceRoot":""}