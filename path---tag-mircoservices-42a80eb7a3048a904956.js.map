{"version":3,"sources":["webpack:///path---tag-mircoservices-42a80eb7a3048a904956.js","webpack:///./.cache/json/tag-mircoservices.json"],"names":["webpackJsonp","2510","module","exports","data","allTalkJson","edges","node","description","meta","duration","presenter","name","source","id","provider","slug","tag","thumbnails","default","url","height","width","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,QAAUC,MAAQC,YAAA,kwCAAAC,MAAwxCC,SAAA,YAAsBC,WAAcC,KAAA,aAAmBC,QAAWC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,kCAAAC,KAAA,mEAAAC,YAAkIC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFC,MAAA,uCAA+CC,aAAgBR,KAAA,gBAAAC,IAAA","file":"path---tag-mircoservices-42a80eb7a3048a904956.js","sourcesContent":["webpackJsonp([114994594409523],{\n\n/***/ 2510:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Software gets complicated fast. Most of good architecture and design practise is about trying to slow the rate at which software gets complicated. You can’t stop it, it’s a form of entropy. You can only slow it down and do your level best to stay on top of things.\\n\\nOne way to manage the mess is to maximise the likelihood that everyone knows what’s going on in the codebase. This requires two things: consistency and replaceability. Consistency implies you can make reasonable assumptions about unfamiliar parts of the application. Replaceability means you can kill code easily and replace it with something better.\\n\\nDan North argues that code should either be new enough that someone remembers writing it, or well-enough established that everyone knows how it works. It’s code in that awkward middle stage, between brand new and part-of-the-furniture, that gets forgotten about and starts to smell. If code is going to die it should die quickly. If it is going to stick around it should be stable.\\n\\nIn this talk, Dan describes a model for thinking about the age of code and argues for replaceability as a first class concern. He also discovers that if you optimise for both replaceability and consistency you can end up with something that looks a lot like microservices.\",\"meta\":{\"duration\":\"PT37M22S\"},\"presenter\":{\"name\":\"Dan North\"},\"source\":{\"id\":\"4Y0tOi7QWqM\",\"provider\":\"youtube\"},\"slug\":\"software-that-fits-in-your-head\",\"tag\":[\"Agile\",\"GOTO Conference\",\"Mircoservices\",\"Software Architecture\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/4Y0tOi7QWqM/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Software that Fits in Your Head\"}}]}},\"pathContext\":{\"slug\":\"mircoservices\",\"tag\":\"Mircoservices\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tag-mircoservices-42a80eb7a3048a904956.js","module.exports = {\"data\":{\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Software gets complicated fast. Most of good architecture and design practise is about trying to slow the rate at which software gets complicated. You can’t stop it, it’s a form of entropy. You can only slow it down and do your level best to stay on top of things.\\n\\nOne way to manage the mess is to maximise the likelihood that everyone knows what’s going on in the codebase. This requires two things: consistency and replaceability. Consistency implies you can make reasonable assumptions about unfamiliar parts of the application. Replaceability means you can kill code easily and replace it with something better.\\n\\nDan North argues that code should either be new enough that someone remembers writing it, or well-enough established that everyone knows how it works. It’s code in that awkward middle stage, between brand new and part-of-the-furniture, that gets forgotten about and starts to smell. If code is going to die it should die quickly. If it is going to stick around it should be stable.\\n\\nIn this talk, Dan describes a model for thinking about the age of code and argues for replaceability as a first class concern. He also discovers that if you optimise for both replaceability and consistency you can end up with something that looks a lot like microservices.\",\"meta\":{\"duration\":\"PT37M22S\"},\"presenter\":{\"name\":\"Dan North\"},\"source\":{\"id\":\"4Y0tOi7QWqM\",\"provider\":\"youtube\"},\"slug\":\"software-that-fits-in-your-head\",\"tag\":[\"Agile\",\"GOTO Conference\",\"Mircoservices\",\"Software Architecture\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/4Y0tOi7QWqM/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Software that Fits in Your Head\"}}]}},\"pathContext\":{\"slug\":\"mircoservices\",\"tag\":\"Mircoservices\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tag-mircoservices.json\n// module id = 2510\n// module chunks = 114994594409523"],"sourceRoot":""}