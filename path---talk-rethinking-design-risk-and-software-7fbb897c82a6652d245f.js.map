{"version":3,"sources":["webpack:///path---talk-rethinking-design-risk-and-software-7fbb897c82a6652d245f.js","webpack:///./.cache/json/talk-rethinking-design-risk-and-software.json"],"names":["webpackJsonp","3140","module","exports","data","talkJson","description","meta","duration","presenter","name","slug","source","id","provider","tag","title","allTalkJson","edges","node","thumbnails","default","url","height","width","pathContext","tags"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,UAAYC,YAAA,w+BAAAC,MAA8/BC,SAAA,aAAuBC,WAAcC,KAAA,YAAkBC,KAAA,sCAAAC,QAAwDC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,oCAAAC,MAAA,yCAA4FC,aAAgBC,QAAUC,MAAQb,YAAA,ubAAAC,MAA6cC,SAAA,YAAsBC,WAAcC,KAAA,eAAqBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,sBAAAI,KAAA,0BAAAK,YAA6EC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,yBAAkCG,MAAQb,YAAA,+/CAAAC,MAAwhDC,SAAA,cAAwBC,WAAcC,KAAA,qBAA2BE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,2BAAAI,KAAA,+BAAAK,YAAuFC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,kCAA2CG,MAAQb,YAAA,+GAAAC,MAAqIC,SAAA,cAAwBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,uFAAAI,KAAA,0JAAAK,YAA8QC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,gGAAyGG,MAAQb,YAAA,0rCAAAC,MAAgtCC,SAAA,YAAsBC,WAAcC,KAAA,eAAqBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,4BAAAI,KAAA,2CAAAK,YAAoGC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,+BAAwCG,MAAQb,YAAA,wgCAAAC,MAA8hCC,SAAA,YAAsBC,WAAcC,KAAA,iBAAuBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,qBAAAI,KAAA,sFAAAK,YAAwIC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,wBAAiCG,MAAQb,YAAA,gJAAAC,MAAwKC,SAAA,YAAsBC,WAAcC,KAAA,gBAAsBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,mDAAAI,KAAA,0DAAAK,YAA0IC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,2BAAsCG,MAAQb,YAAA,yZAAAC,MAA+aC,SAAA,YAAsBC,WAAcC,KAAA,gBAAsBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,mCAAAI,KAAA,oCAAAK,YAAoGC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,sCAA+CG,MAAQb,YAAA,oFAAAC,MAA0GC,SAAA,cAAwBC,WAAcC,KAAA,YAAkBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,wCAAAI,KAAA,6CAAAK,YAAkHC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,2CAAoDG,MAAQb,YAAA,4NAAAC,MAAkPC,SAAA,WAAqBC,WAAcC,KAAA,YAAkBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,sBAAAI,KAAA,0BAAAK,YAA6EC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,yBAAkCG,MAAQb,YAAA,sMAAAC,MAA4NC,SAAA,YAAsBC,WAAcC,KAAA,eAAqBE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,yBAAAI,KAAA,aAAAK,YAAmEC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,8BAAsCS,aAAgBd,KAAA,sCAAAe,MAAA","file":"path---talk-rethinking-design-risk-and-software-7fbb897c82a6652d245f.js","sourcesContent":["webpackJsonp([151364406482838],{\n\n/***/ 3140:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"talkJson\":{\"description\":\"Our increasingly complex needs have led us to build increasing complex software. We’ve done this in an incremental fashion, building code on top of code. We write understandable snippets of code built on programming languages we know well and then bundle them into program structures to perform complex tasks. This incremental process may seem to have low risk at the snippet level, but it leads to program structures that can be hundreds of millions of lines of code that is intractable to change, redesign, and understanding, nor in the end is it easy to design. It also leads to code with potentially unwanted emergent properties. Today, we know how to create programs that can create programming languages. So why not write software that closely follows the problem, without a programming language, then let other programs create the programming language to support it? If we apply this rethinking to the design process, both problems and solutions can be thought of in terms of relational str\",\"meta\":{\"duration\":\"PT1H7M19S\"},\"presenter\":{\"name\":\"Alan Kay\"},\"slug\":\"rethinking-design-risk-and-software\",\"source\":{\"id\":\"QboI_1WJUlM\",\"provider\":\"youtube\"},\"tag\":[\"Inspiring\",\"Keynote\",\"COFES 2012\"],\"title\":\"Rethinking Design, Risk, and Software\"},\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"In this keynote speech from JaxConf 2012, Rich Hickey, creator of Clojure and founder of Datomic gives an awesome analysis of the changing way we think about values (not the philosphoical kind) in light of the increasing complexity of information technology and the advent of Big Data. The broad subject of the talk makes it worth watching for almost anyone in the programming world, and was one of the highlights of the JaxConf lineup.\",\"meta\":{\"duration\":\"PT31M44S\"},\"presenter\":{\"name\":\"Rich Hickey\"},\"source\":{\"id\":\"-6BsiVyC1kM\",\"provider\":\"youtube\"},\"slug\":\"the-value-of-values\",\"tag\":[\"JaxConf 2012\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/-6BsiVyC1kM/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"The Value of Values\"}},{\"node\":{\"description\":\"We know how to write bad code: litter our programs with casts, macros, pointers, naked new and deletes, and complicated control structures. Alternatively (or additionally), we could obscure every design decision in a mess of deeply nested abstractions using the latest object-oriented programming and generic programming tricks. Then, for good measure, we might complicate our algorithms with interesting special cases. Such code is incomprehensible, unmaintainable, usually inefficient, and not uncommon.\\n\\nBut how do we write good code? What principles, techniques, and idioms can we exploit to make it easier to produce quality code? In this presentation, I make an argument for type-rich interfaces, compact data structures, integrated resource management and error handling, and highly-structured algorithmic code. I illustrate my ideas and guidelines with a few idiomatic code examples.\\n\\nI use C++11 freely. Examples include auto, general constant expressions, uniform initialization, type aliases, type safe threading, and user-defined literals. C++11 features are only just starting to appear in production compilers, so some of my suggestions are conjecture. Developing a \\\"modern style,\\\" however, is essential if we don't want to maintain newly-written 1970s and 1980s style code in 2020.\\n\\nThis presentation reflects my thoughts on what \\\"Modern C++\\\" should mean in the 2010s: a language for programming based on light-weight abstraction with direct and efficient mapping to hardware, suitable for infrastructure code.\",\"meta\":{\"duration\":\"PT1H29M48S\"},\"presenter\":{\"name\":\"Bjarne Stroustrup\"},\"source\":{\"id\":\"0iWb_qi2-uI\",\"provider\":\"youtube\"},\"slug\":\"keynote-goingnative-2012\",\"tag\":[\"C++\",\"GoingNative\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/0iWb_qi2-uI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Keynote GoingNative 2012 C++\"}},{\"node\":{\"description\":\"Hartmut Kaisers Keynote from Meeting C++ 2014\\n\\nSlides:\\nhttp://meetingcpp.com/index.php/tv14/items/26.html\",\"meta\":{\"duration\":\"PT1H27M36S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"4OCUEgSNIAY\",\"provider\":\"youtube\"},\"slug\":\"plain-threads-are-the-goto-of-todays-computing-hartmut-kaiser-keynote-meeting-c-2014\",\"tag\":[\"Software (Industry)\",\"C (Programming Language)\",\"C++\",\"Meeting C++\",\"Keynote\",\"Parallelism\",\"Concurrency\",\"Threading\",\"Thread\",\"HPX\",\"Meeting C++ 2014\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/4OCUEgSNIAY/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Plain Threads are the GOTO of todays computing - Hartmut Kaiser - Keynote Meeting C++ 2014\"}},{\"node\":{\"description\":\"\\\"The most dangerous thought you can have as a creative person is to think you know what you're doing.\\\"\\nPresented at Dropbox's DBX conference on July 9, 2013.\\nAll of the slides are available at: http://worrydream.com/dbx/\\n\\nFor his recent DBX Conference talk, Victor took attendees back to the year 1973, donning the uniform of an IBM systems engineer of the times, delivering his presentation on an overhead projector. The '60s and early '70s were a fertile time for CS ideas, reminds Victor, but even more importantly, it was a time of unfettered thinking, unconstrained by programming dogma, authority, and tradition. 'The most dangerous thought that you can have as a creative person is to think that you know what you're doing,' explains Victor. 'Because once you think you know what you're doing you stop looking around for other ways of doing things and you stop being able to see other ways of doing things. You become blind.' He concludes, 'I think you have to say: \\\"We don't know what programming is. We don't know what computing is. We don't even know what a computer is.\\\" And once you truly understand that, and once you truly believe that, then you're free, and you can think anything.'\\\"\",\"meta\":{\"duration\":\"PT32M56S\"},\"presenter\":{\"name\":\"Bret Victor\"},\"source\":{\"id\":\"8pTEmbeENF4\",\"provider\":\"youtube\"},\"slug\":\"the-future-of-programming\",\"tag\":[\"Inspiring\",\"Funny\",\"DBX conference 2013\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/8pTEmbeENF4/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"The Future of Programming\"}},{\"node\":{\"description\":\"Systems get bigger, technologies reach further, practices mature, advice changes... or at least some of it does. Some guidance remains unaffected by the passing of paradigms, the evolution of technology or the scaling of development: break your software into small, cohesive parts defined by clear interfaces and sound implementations, all the while striving for simplicity. The excuses for not doing so are as predictable as they are problematic. But if you want to create legacy code, make sure code is arbitrarily partitioned into large, incoherent parts characterised by unwieldy interfaces and incomprehensible implementations.\\nWhile there are many definitions of what a legacy system is, common to almost all perceptions of a legacy system is the concept of size — specifically, lots of it. The phrase 'small legacy system' can be considered an oxymoron. This talk sets out to re-assess and reassert the importance of thinking and implementing small as an essential property of software systems — yes, even the large ones.\",\"meta\":{\"duration\":\"PT1H7M3S\"},\"presenter\":{\"name\":\"Kevlin Henney\"},\"source\":{\"id\":\"B3b4tremI5o\",\"provider\":\"youtube\"},\"slug\":\"small-is-beautiful\",\"tag\":[\"GOTO Conference\",\"Keynote\",\"GOTO Copenhagen\",\"Scaling\",\"Legacy System\",\"Simplicity\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/B3b4tremI5o/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Small Is Beautiful\"}},{\"node\":{\"description\":\"Aaron Swartz keynote - \\\"How we stopped SOPA\\\"  at F2C:Freedom to Connect 2012, Washington DC on May 21 2012.\\n\\nhttp://freedom-to-connect.net/\",\"meta\":{\"duration\":\"PT22M52S\"},\"presenter\":{\"name\":\"Aaron Swartz\"},\"source\":{\"id\":\"Fgh2dFngFsg\",\"provider\":\"youtube\"},\"slug\":\"f2c2012-aaron-swartz-keynote-how-we-stopped-sopa\",\"tag\":[\"SOPA\",\"freedom to connect\",\"internet freedom\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/Fgh2dFngFsg/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"\\\"How we stopped SOPA\\\"\"}},{\"node\":{\"description\":\"This persuasive talk shows how essential and easy it is to gain a basic understanding of computer science learning principles. Our world increasingly driven by technology and software, so we all need to know the creative, problem-solving power of computer science. This is especially important to students who will lead the way in our shared future. Learn how you can take the next step at http://code.org.\",\"meta\":{\"duration\":\"PT10M33S\"},\"presenter\":{\"name\":\"Hadi Partovi\"},\"source\":{\"id\":\"FpMNs7H24X0\",\"provider\":\"youtube\"},\"slug\":\"computer-science-is-for-everyone\",\"tag\":[\"TEDtalks\",\"Education\",\"Inspiring\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/FpMNs7H24X0/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Computer science is for everyone\"}},{\"node\":{\"description\":\"Alan Kay talks about alternative approaches to teach Computer Science in schools.\",\"meta\":{\"duration\":\"PT1H10M32S\"},\"presenter\":{\"name\":\"Alan Kay\"},\"source\":{\"id\":\"N9c7_8Gp7gI\",\"provider\":\"youtube\"},\"slug\":\"rethinking-computer-science-education\",\"tag\":[\"Educational\",\"CrossRoads 2015\",\"Inspiring\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/N9c7_8Gp7gI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Rethinking Computer Science Education\"}},{\"node\":{\"description\":\"One of my all time favorite talks of Alan Kay's, given in 2015.\\n\\nNot my own video, though it hasn't been on YouTube before. Original location here: http://global.sap.com/campaign/na/usa/CRM-XU15-INT-STILP/index.html\",\"meta\":{\"duration\":\"PT51M7S\"},\"presenter\":{\"name\":\"Alan Kay\"},\"source\":{\"id\":\"NdSD07U5uBs\",\"provider\":\"youtube\"},\"slug\":\"power-of-simplicity\",\"tag\":[\"Inspiring\",\"Simplicity\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/NdSD07U5uBs/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Power of Simplicity\"}},{\"node\":{\"description\":\"Bret Victor invents tools that enable people to understand and create. He has designed experimental UI concepts at Apple, interactive data graphics for Al Gore, and musical instruments at Alesis.\",\"meta\":{\"duration\":\"PT54M20S\"},\"presenter\":{\"name\":\"Bret Victor\"},\"source\":{\"id\":\"PUv66718DII\",\"provider\":\"youtube\"},\"slug\":\"inventing-on-principle\",\"tag\":[\"Inspiring\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/PUv66718DII/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Inventing on Principle\"}}]}},\"pathContext\":{\"slug\":\"rethinking-design-risk-and-software\",\"tags\":[\"Inspiring\",\"Keynote\",\"COFES 2012\"]}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---talk-rethinking-design-risk-and-software-7fbb897c82a6652d245f.js","module.exports = {\"data\":{\"talkJson\":{\"description\":\"Our increasingly complex needs have led us to build increasing complex software. We’ve done this in an incremental fashion, building code on top of code. We write understandable snippets of code built on programming languages we know well and then bundle them into program structures to perform complex tasks. This incremental process may seem to have low risk at the snippet level, but it leads to program structures that can be hundreds of millions of lines of code that is intractable to change, redesign, and understanding, nor in the end is it easy to design. It also leads to code with potentially unwanted emergent properties. Today, we know how to create programs that can create programming languages. So why not write software that closely follows the problem, without a programming language, then let other programs create the programming language to support it? If we apply this rethinking to the design process, both problems and solutions can be thought of in terms of relational str\",\"meta\":{\"duration\":\"PT1H7M19S\"},\"presenter\":{\"name\":\"Alan Kay\"},\"slug\":\"rethinking-design-risk-and-software\",\"source\":{\"id\":\"QboI_1WJUlM\",\"provider\":\"youtube\"},\"tag\":[\"Inspiring\",\"Keynote\",\"COFES 2012\"],\"title\":\"Rethinking Design, Risk, and Software\"},\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"In this keynote speech from JaxConf 2012, Rich Hickey, creator of Clojure and founder of Datomic gives an awesome analysis of the changing way we think about values (not the philosphoical kind) in light of the increasing complexity of information technology and the advent of Big Data. The broad subject of the talk makes it worth watching for almost anyone in the programming world, and was one of the highlights of the JaxConf lineup.\",\"meta\":{\"duration\":\"PT31M44S\"},\"presenter\":{\"name\":\"Rich Hickey\"},\"source\":{\"id\":\"-6BsiVyC1kM\",\"provider\":\"youtube\"},\"slug\":\"the-value-of-values\",\"tag\":[\"JaxConf 2012\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/-6BsiVyC1kM/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"The Value of Values\"}},{\"node\":{\"description\":\"We know how to write bad code: litter our programs with casts, macros, pointers, naked new and deletes, and complicated control structures. Alternatively (or additionally), we could obscure every design decision in a mess of deeply nested abstractions using the latest object-oriented programming and generic programming tricks. Then, for good measure, we might complicate our algorithms with interesting special cases. Such code is incomprehensible, unmaintainable, usually inefficient, and not uncommon.\\n\\nBut how do we write good code? What principles, techniques, and idioms can we exploit to make it easier to produce quality code? In this presentation, I make an argument for type-rich interfaces, compact data structures, integrated resource management and error handling, and highly-structured algorithmic code. I illustrate my ideas and guidelines with a few idiomatic code examples.\\n\\nI use C++11 freely. Examples include auto, general constant expressions, uniform initialization, type aliases, type safe threading, and user-defined literals. C++11 features are only just starting to appear in production compilers, so some of my suggestions are conjecture. Developing a \\\"modern style,\\\" however, is essential if we don't want to maintain newly-written 1970s and 1980s style code in 2020.\\n\\nThis presentation reflects my thoughts on what \\\"Modern C++\\\" should mean in the 2010s: a language for programming based on light-weight abstraction with direct and efficient mapping to hardware, suitable for infrastructure code.\",\"meta\":{\"duration\":\"PT1H29M48S\"},\"presenter\":{\"name\":\"Bjarne Stroustrup\"},\"source\":{\"id\":\"0iWb_qi2-uI\",\"provider\":\"youtube\"},\"slug\":\"keynote-goingnative-2012\",\"tag\":[\"C++\",\"GoingNative\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/0iWb_qi2-uI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Keynote GoingNative 2012 C++\"}},{\"node\":{\"description\":\"Hartmut Kaisers Keynote from Meeting C++ 2014\\n\\nSlides:\\nhttp://meetingcpp.com/index.php/tv14/items/26.html\",\"meta\":{\"duration\":\"PT1H27M36S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"4OCUEgSNIAY\",\"provider\":\"youtube\"},\"slug\":\"plain-threads-are-the-goto-of-todays-computing-hartmut-kaiser-keynote-meeting-c-2014\",\"tag\":[\"Software (Industry)\",\"C (Programming Language)\",\"C++\",\"Meeting C++\",\"Keynote\",\"Parallelism\",\"Concurrency\",\"Threading\",\"Thread\",\"HPX\",\"Meeting C++ 2014\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/4OCUEgSNIAY/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Plain Threads are the GOTO of todays computing - Hartmut Kaiser - Keynote Meeting C++ 2014\"}},{\"node\":{\"description\":\"\\\"The most dangerous thought you can have as a creative person is to think you know what you're doing.\\\"\\nPresented at Dropbox's DBX conference on July 9, 2013.\\nAll of the slides are available at: http://worrydream.com/dbx/\\n\\nFor his recent DBX Conference talk, Victor took attendees back to the year 1973, donning the uniform of an IBM systems engineer of the times, delivering his presentation on an overhead projector. The '60s and early '70s were a fertile time for CS ideas, reminds Victor, but even more importantly, it was a time of unfettered thinking, unconstrained by programming dogma, authority, and tradition. 'The most dangerous thought that you can have as a creative person is to think that you know what you're doing,' explains Victor. 'Because once you think you know what you're doing you stop looking around for other ways of doing things and you stop being able to see other ways of doing things. You become blind.' He concludes, 'I think you have to say: \\\"We don't know what programming is. We don't know what computing is. We don't even know what a computer is.\\\" And once you truly understand that, and once you truly believe that, then you're free, and you can think anything.'\\\"\",\"meta\":{\"duration\":\"PT32M56S\"},\"presenter\":{\"name\":\"Bret Victor\"},\"source\":{\"id\":\"8pTEmbeENF4\",\"provider\":\"youtube\"},\"slug\":\"the-future-of-programming\",\"tag\":[\"Inspiring\",\"Funny\",\"DBX conference 2013\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/8pTEmbeENF4/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"The Future of Programming\"}},{\"node\":{\"description\":\"Systems get bigger, technologies reach further, practices mature, advice changes... or at least some of it does. Some guidance remains unaffected by the passing of paradigms, the evolution of technology or the scaling of development: break your software into small, cohesive parts defined by clear interfaces and sound implementations, all the while striving for simplicity. The excuses for not doing so are as predictable as they are problematic. But if you want to create legacy code, make sure code is arbitrarily partitioned into large, incoherent parts characterised by unwieldy interfaces and incomprehensible implementations.\\nWhile there are many definitions of what a legacy system is, common to almost all perceptions of a legacy system is the concept of size — specifically, lots of it. The phrase 'small legacy system' can be considered an oxymoron. This talk sets out to re-assess and reassert the importance of thinking and implementing small as an essential property of software systems — yes, even the large ones.\",\"meta\":{\"duration\":\"PT1H7M3S\"},\"presenter\":{\"name\":\"Kevlin Henney\"},\"source\":{\"id\":\"B3b4tremI5o\",\"provider\":\"youtube\"},\"slug\":\"small-is-beautiful\",\"tag\":[\"GOTO Conference\",\"Keynote\",\"GOTO Copenhagen\",\"Scaling\",\"Legacy System\",\"Simplicity\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/B3b4tremI5o/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Small Is Beautiful\"}},{\"node\":{\"description\":\"Aaron Swartz keynote - \\\"How we stopped SOPA\\\"  at F2C:Freedom to Connect 2012, Washington DC on May 21 2012.\\n\\nhttp://freedom-to-connect.net/\",\"meta\":{\"duration\":\"PT22M52S\"},\"presenter\":{\"name\":\"Aaron Swartz\"},\"source\":{\"id\":\"Fgh2dFngFsg\",\"provider\":\"youtube\"},\"slug\":\"f2c2012-aaron-swartz-keynote-how-we-stopped-sopa\",\"tag\":[\"SOPA\",\"freedom to connect\",\"internet freedom\",\"Keynote\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/Fgh2dFngFsg/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"\\\"How we stopped SOPA\\\"\"}},{\"node\":{\"description\":\"This persuasive talk shows how essential and easy it is to gain a basic understanding of computer science learning principles. Our world increasingly driven by technology and software, so we all need to know the creative, problem-solving power of computer science. This is especially important to students who will lead the way in our shared future. Learn how you can take the next step at http://code.org.\",\"meta\":{\"duration\":\"PT10M33S\"},\"presenter\":{\"name\":\"Hadi Partovi\"},\"source\":{\"id\":\"FpMNs7H24X0\",\"provider\":\"youtube\"},\"slug\":\"computer-science-is-for-everyone\",\"tag\":[\"TEDtalks\",\"Education\",\"Inspiring\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/FpMNs7H24X0/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Computer science is for everyone\"}},{\"node\":{\"description\":\"Alan Kay talks about alternative approaches to teach Computer Science in schools.\",\"meta\":{\"duration\":\"PT1H10M32S\"},\"presenter\":{\"name\":\"Alan Kay\"},\"source\":{\"id\":\"N9c7_8Gp7gI\",\"provider\":\"youtube\"},\"slug\":\"rethinking-computer-science-education\",\"tag\":[\"Educational\",\"CrossRoads 2015\",\"Inspiring\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/N9c7_8Gp7gI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Rethinking Computer Science Education\"}},{\"node\":{\"description\":\"One of my all time favorite talks of Alan Kay's, given in 2015.\\n\\nNot my own video, though it hasn't been on YouTube before. Original location here: http://global.sap.com/campaign/na/usa/CRM-XU15-INT-STILP/index.html\",\"meta\":{\"duration\":\"PT51M7S\"},\"presenter\":{\"name\":\"Alan Kay\"},\"source\":{\"id\":\"NdSD07U5uBs\",\"provider\":\"youtube\"},\"slug\":\"power-of-simplicity\",\"tag\":[\"Inspiring\",\"Simplicity\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/NdSD07U5uBs/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Power of Simplicity\"}},{\"node\":{\"description\":\"Bret Victor invents tools that enable people to understand and create. He has designed experimental UI concepts at Apple, interactive data graphics for Al Gore, and musical instruments at Alesis.\",\"meta\":{\"duration\":\"PT54M20S\"},\"presenter\":{\"name\":\"Bret Victor\"},\"source\":{\"id\":\"PUv66718DII\",\"provider\":\"youtube\"},\"slug\":\"inventing-on-principle\",\"tag\":[\"Inspiring\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/PUv66718DII/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Inventing on Principle\"}}]}},\"pathContext\":{\"slug\":\"rethinking-design-risk-and-software\",\"tags\":[\"Inspiring\",\"Keynote\",\"COFES 2012\"]}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/talk-rethinking-design-risk-and-software.json\n// module id = 3140\n// module chunks = 151364406482838"],"sourceRoot":""}