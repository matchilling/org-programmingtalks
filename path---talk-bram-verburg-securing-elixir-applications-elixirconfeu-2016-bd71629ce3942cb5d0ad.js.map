{"version":3,"sources":["webpack:///path---talk-bram-verburg-securing-elixir-applications-elixirconfeu-2016-bd71629ce3942cb5d0ad.js","webpack:///./.cache/json/talk-bram-verburg-securing-elixir-applications-elixirconfeu-2016.json"],"names":["webpackJsonp","2902","module","exports","data","talkJson","description","meta","duration","presenter","name","slug","source","id","provider","tag","title","allTalkJson","edges","node","thumbnails","default","url","height","width","pathContext","tags"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,UAAYC,YAAA,s/CAAAC,MAA4gDC,SAAA,YAAsBC,WAAcC,KAAA,MAAYC,KAAA,8DAAAC,QAAgFC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,kDAAAC,MAAA,mEAAoIC,aAAgBC,QAAUC,MAAQb,YAAA,+xEAAy8BC,MAA42CC,SAAA,YAAsBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,yEAAAI,KAAA,0CAAAK,YAAgJC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,gFAAyFG,MAAQb,YAAA,wjCAAAC,MAA8kCC,SAAA,YAAsBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,uFAAAI,KAAA,qDAAAK,YAAyKC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,gGAAwGS,aAAgBd,KAAA,8DAAAe,MAAA","file":"path---talk-bram-verburg-securing-elixir-applications-elixirconfeu-2016-bd71629ce3942cb5d0ad.js","sourcesContent":["webpackJsonp([26584622226433],{\n\n/***/ 2902:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"talkJson\":{\"description\":\"Slides and more info: http://www.elixirconf.eu/elixirconf2016/bram-verburg\\n\\nEvery new language or framework needs time to prove itself in production, for its early adopter to try, fail, iterate, and document what they have learned. Elixir and Phoenix can leverage the 30 years head-start of the underlying Erlang platform, but for newcomers to the platform it is not always easy to find and apply Erlang best practices. This talk explores some specific security-related aspects of Elixir, Phoenix and the Erlang VM, through practical demonstrations and use-cases. Topics covered include: use of Erlang's 'ssl' module, distributed Erlang, and VM hardening against DoS attacks.\\n\\nTalk objectives\\n\\nThe purpose of this talk is to make people familiar with some of the Erlang/Elixir specific security considerations. It is focussed on those things that may surprise people coming to Elixir from other languages, and therefore skims over common attack patterns (XSS, CSRF, SQLI, etc.) and their mitigations.\\n\\nTarget audience\\n\\nAnyone planning to deploy an Elixir application, with or without experience in deployment/security using other languages/platforms.\\n\\n\\nBram is a system architect and security advocate at Cisco Systems. His work focusses on massively concurrent back-end systems for IoT/IoE applications, preferably built using Erlang/Elixir, as well as PKI-based security solutions for such environments. He has previously built/designed API servers using Ruby on Rails, as well as VoIP soft switches in Java.\",\"meta\":{\"duration\":\"PT42M53S\"},\"presenter\":{\"name\":null},\"slug\":\"bram-verburg-securing-elixir-applications-elixirconfeu-2016\",\"source\":{\"id\":\"r0DuAse9tK8\",\"provider\":\"youtube\"},\"tag\":[\"Bram Verburg\",\"Elixir\",\"ElixirConfEU\",\"Phoenix\"],\"title\":\"Bram Verburg - Securing Elixir Applications (ElixirConfEU 2016)\"},\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Slides and more info: http://www.elixirconf.eu/elixirconf2016/justin-schneck\\n\\nNerves defines an entirely new way to build embedded systems with Elixir that could revolutionize an industry. Imagine booting to the BEAM VM in just a few seconds with your Elixir app in control of the entire system. Nerves makes this possible while replacing the traditional plethora of Linux init scripts or systemd configuration files with a toolchain that is delightful to use. The Nerves philosophy is that you already have a powerful, concurrent language to define what the system should do at start-up time: Elixir. Together, we'll explore the principles Nerves uses to create embedded systems that control 3d printers, power unmanned areal vehicles, and more. You'll see first-hand how Nerves can support service discovery, hot code swapping, and collaboration through PubSub messages and mesh networking. Finally, we will explore the Nerves development life-cycle; from running ExTest, to deployment and hot code reloading.\\n\\nTalk objectives\\n\\n* Introduce developing embedded systems in Elixir using Nerves\\n\\n* Explore the Nerves development life-cycle\\n\\n* Demonstrate autonomous robotics using service discovery and messaging\\n\\n* Execute tests, create user interfaces with Phoenix, and perform hot code updates\\n\\nTarget audience\\n\\nCreating devices and systems which enhance our environment is fundamental to our nature. The exploration into creating hardware that runs Elixir is geared toward the maker in all of us. Join us for an exciting demonstration into the creation of enhanced embedded systems with Elixir and Nerves.\\n\\n\\nJustin started his career as a recording engineer spanning several years in the early 2000â€™s. He transitioned to programming C++ apps in the public sector of local government in 2005 and eventually came to master iOS development while working for an interactive marketing company. During this time, he gained a passion for embedded systems, sparked from his love of riding motorcycles. Over the years, Justin has worked on a plethora of embedded projects from iPhone motorcycle starters to advanced brewing and distilling equipment. Recently, Justin founded Metasphere, an embedded software company primarily focused on building Bakeware and Nerves.\\n\\nGithub: mobileoverlord\\n\\nTwitter: @mobileoverlord\",\"meta\":{\"duration\":\"PT56M12S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"118-g0ODfgg\",\"provider\":\"youtube\"},\"slug\":\"justin-schneck-enhanced-embedded-systems-with-nerves-elixirconfeu-2016\",\"tag\":[\"Nerves\",\"Justin Schneck\",\"ElixirConfEU\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/118-g0ODfgg/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Justin Schneck - Enhanced Embedded Systems with Nerves (ElixirConfEU 2016)\"}},{\"node\":{\"description\":\"Slides and more info: http://www.elixirconf.eu/elixirconf2016/keith-salisbury\\n\\nPhoenix and Phaser might sound like a cheesy pop band but get these two frameworks playing nice together and you're guaranteed a party. Both are blistering fast, and incredibly easy to use. Building multiplayer games has never been easier.\\n\\nTalk objectives\\n\\nThis talk will take you on a step by step guide building yourself a game template, and then using that template to create several multiplayer games. We will introduce you to the joy of creating games using these two wonderful frameworks, and demonstrate some of the possibilities, as well as highlighting some of the challenges and common pitfalls to avoid when developing multiplayer games.\\n\\nTarget audience\\n\\nBeginners and anyone interested in having fun with Phoenix channels.\\n\\n\\nKeith is a programmer, sailor and kitesurfer in any order. He is passionate software development and particularly enjoying building fun social games. He is currently writing a book of the same title as this talk.\\n\\nGithub: ktec\\n\\nTwitter: @ktec\",\"meta\":{\"duration\":\"PT34M48S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"I5L9_cXwBcU\",\"provider\":\"youtube\"},\"slug\":\"keith-salisbury-building-multiplayer-games-with-phoenix-and-phaser-elixirconfeu-2016\",\"tag\":[\"Keith Salisbury\",\"Phoenix\",\"Phaser\",\"ElixirConfEU\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/I5L9_cXwBcU/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Keith Salisbury - Building Multiplayer Games with Phoenix and Phaser (ElixirConfEU 2016)\"}}]}},\"pathContext\":{\"slug\":\"bram-verburg-securing-elixir-applications-elixirconfeu-2016\",\"tags\":[\"Bram Verburg\",\"Elixir\",\"ElixirConfEU\",\"Phoenix\"]}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---talk-bram-verburg-securing-elixir-applications-elixirconfeu-2016-bd71629ce3942cb5d0ad.js","module.exports = {\"data\":{\"talkJson\":{\"description\":\"Slides and more info: http://www.elixirconf.eu/elixirconf2016/bram-verburg\\n\\nEvery new language or framework needs time to prove itself in production, for its early adopter to try, fail, iterate, and document what they have learned. Elixir and Phoenix can leverage the 30 years head-start of the underlying Erlang platform, but for newcomers to the platform it is not always easy to find and apply Erlang best practices. This talk explores some specific security-related aspects of Elixir, Phoenix and the Erlang VM, through practical demonstrations and use-cases. Topics covered include: use of Erlang's 'ssl' module, distributed Erlang, and VM hardening against DoS attacks.\\n\\nTalk objectives\\n\\nThe purpose of this talk is to make people familiar with some of the Erlang/Elixir specific security considerations. It is focussed on those things that may surprise people coming to Elixir from other languages, and therefore skims over common attack patterns (XSS, CSRF, SQLI, etc.) and their mitigations.\\n\\nTarget audience\\n\\nAnyone planning to deploy an Elixir application, with or without experience in deployment/security using other languages/platforms.\\n\\n\\nBram is a system architect and security advocate at Cisco Systems. His work focusses on massively concurrent back-end systems for IoT/IoE applications, preferably built using Erlang/Elixir, as well as PKI-based security solutions for such environments. He has previously built/designed API servers using Ruby on Rails, as well as VoIP soft switches in Java.\",\"meta\":{\"duration\":\"PT42M53S\"},\"presenter\":{\"name\":null},\"slug\":\"bram-verburg-securing-elixir-applications-elixirconfeu-2016\",\"source\":{\"id\":\"r0DuAse9tK8\",\"provider\":\"youtube\"},\"tag\":[\"Bram Verburg\",\"Elixir\",\"ElixirConfEU\",\"Phoenix\"],\"title\":\"Bram Verburg - Securing Elixir Applications (ElixirConfEU 2016)\"},\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Slides and more info: http://www.elixirconf.eu/elixirconf2016/justin-schneck\\n\\nNerves defines an entirely new way to build embedded systems with Elixir that could revolutionize an industry. Imagine booting to the BEAM VM in just a few seconds with your Elixir app in control of the entire system. Nerves makes this possible while replacing the traditional plethora of Linux init scripts or systemd configuration files with a toolchain that is delightful to use. The Nerves philosophy is that you already have a powerful, concurrent language to define what the system should do at start-up time: Elixir. Together, we'll explore the principles Nerves uses to create embedded systems that control 3d printers, power unmanned areal vehicles, and more. You'll see first-hand how Nerves can support service discovery, hot code swapping, and collaboration through PubSub messages and mesh networking. Finally, we will explore the Nerves development life-cycle; from running ExTest, to deployment and hot code reloading.\\n\\nTalk objectives\\n\\n* Introduce developing embedded systems in Elixir using Nerves\\n\\n* Explore the Nerves development life-cycle\\n\\n* Demonstrate autonomous robotics using service discovery and messaging\\n\\n* Execute tests, create user interfaces with Phoenix, and perform hot code updates\\n\\nTarget audience\\n\\nCreating devices and systems which enhance our environment is fundamental to our nature. The exploration into creating hardware that runs Elixir is geared toward the maker in all of us. Join us for an exciting demonstration into the creation of enhanced embedded systems with Elixir and Nerves.\\n\\n\\nJustin started his career as a recording engineer spanning several years in the early 2000â€™s. He transitioned to programming C++ apps in the public sector of local government in 2005 and eventually came to master iOS development while working for an interactive marketing company. During this time, he gained a passion for embedded systems, sparked from his love of riding motorcycles. Over the years, Justin has worked on a plethora of embedded projects from iPhone motorcycle starters to advanced brewing and distilling equipment. Recently, Justin founded Metasphere, an embedded software company primarily focused on building Bakeware and Nerves.\\n\\nGithub: mobileoverlord\\n\\nTwitter: @mobileoverlord\",\"meta\":{\"duration\":\"PT56M12S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"118-g0ODfgg\",\"provider\":\"youtube\"},\"slug\":\"justin-schneck-enhanced-embedded-systems-with-nerves-elixirconfeu-2016\",\"tag\":[\"Nerves\",\"Justin Schneck\",\"ElixirConfEU\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/118-g0ODfgg/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Justin Schneck - Enhanced Embedded Systems with Nerves (ElixirConfEU 2016)\"}},{\"node\":{\"description\":\"Slides and more info: http://www.elixirconf.eu/elixirconf2016/keith-salisbury\\n\\nPhoenix and Phaser might sound like a cheesy pop band but get these two frameworks playing nice together and you're guaranteed a party. Both are blistering fast, and incredibly easy to use. Building multiplayer games has never been easier.\\n\\nTalk objectives\\n\\nThis talk will take you on a step by step guide building yourself a game template, and then using that template to create several multiplayer games. We will introduce you to the joy of creating games using these two wonderful frameworks, and demonstrate some of the possibilities, as well as highlighting some of the challenges and common pitfalls to avoid when developing multiplayer games.\\n\\nTarget audience\\n\\nBeginners and anyone interested in having fun with Phoenix channels.\\n\\n\\nKeith is a programmer, sailor and kitesurfer in any order. He is passionate software development and particularly enjoying building fun social games. He is currently writing a book of the same title as this talk.\\n\\nGithub: ktec\\n\\nTwitter: @ktec\",\"meta\":{\"duration\":\"PT34M48S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"I5L9_cXwBcU\",\"provider\":\"youtube\"},\"slug\":\"keith-salisbury-building-multiplayer-games-with-phoenix-and-phaser-elixirconfeu-2016\",\"tag\":[\"Keith Salisbury\",\"Phoenix\",\"Phaser\",\"ElixirConfEU\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/I5L9_cXwBcU/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Keith Salisbury - Building Multiplayer Games with Phoenix and Phaser (ElixirConfEU 2016)\"}}]}},\"pathContext\":{\"slug\":\"bram-verburg-securing-elixir-applications-elixirconfeu-2016\",\"tags\":[\"Bram Verburg\",\"Elixir\",\"ElixirConfEU\",\"Phoenix\"]}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/talk-bram-verburg-securing-elixir-applications-elixirconfeu-2016.json\n// module id = 2902\n// module chunks = 26584622226433"],"sourceRoot":""}