webpackJsonp([0x9afa8ef9a1b8],{2979:function(e,t){e.exports={data:{talkJson:{description:"I'm a language nut. I love trying them out, and I love thinking about their design and implementation. (I know, it's sad.) I came across Ruby in 1998 because I was an avid reader of comp.lang.misc (ask your parents). I downloaded it, compiled it, and fell in love. As with any time you fall in love, it's difficult to explain why. It just worked the way I work, and it had enough depth to keep me interested. Fast forward 15 years. All that time I'd been looking for something new that gave me the same feeling. Then I came across Elixir, a language by Jos√© Valim, that puts a humane, Ruby-like syntax on the Erlang VM. Now I'm dangerous. I want other people to see just how great this is. I want to evangelize. So come along and let me show you the things that I think make Elixir a serious alternative for writing highly reliable, scalable, and performant server code. And, more important, let me show you some fun stuff.",meta:{duration:"PT49M42S"},presenter:{name:"Dave Thomas"},slug:"elixir-the-power-of-erlang-the-joy-of-ruby",source:{id:"lww1aZ-ldz0",provider:"youtube"},tag:["Erlang","Ruby","GOTO 2014"],title:"Elixir: The Power of Erlang, the Joy of Ruby"},allTalkJson:{edges:[{node:{description:"Tired of maintaining your one-off script that has now become someone's job to execute? Wishing you could create polished applications on the command line similar to git or cucumber? In my talk, I'll talk about what makes a command line application \"awesome\", and why you should care. I'll talk about what makes Ruby particularly suited to this task over mainstays like bash and Perl. We'll compare and contrast several Ruby libraries that can make even your lowliest automation script a polished, maintainable, and predictable application.",meta:{duration:"PT28M57S"},presenter:{name:null},source:{id:"1ILEw6Qca3U",provider:"youtube"},slug:"make-awesome-command-line-apps-with-ruby-by-dave-copeland",tag:["rubymidwest2011","Ruby","CLI","Command-line Interface"],thumbnails:{default:{url:"https://i.ytimg.com/vi/1ILEw6Qca3U/default.jpg",height:90,width:120}},title:"Make awesome command line apps with ruby by Dave Copeland"}},{node:{description:"Erlang is ideally suited building scalable, fault tolerant systems with minimal investment. It can be used for any conceivable application - not just telecom. It has a multi-decade track record of success. So why does it remain a niche technology?\n\nTo answer this question, Garrett turned to science. He conducted a detailed survey across a wide spectrum of programmers, architects, and managers to gather data on this question. In this talk, Garrett will present his findings and reflect on what they could mean for Erlang and its community.\n\nErlang adoption is important. It makes your job easier when Erlang is supported by your company and customers. It's easier to grow teams when there are more Erlang programmers. The language itself will improve as it is applied across more domains. If you're interested in this topic - and want data rather than personal opinions - join Garrett in this important discussion.\n\nTalk objectives:\n\n- To present data to better understand how Erlang is used and, more importantly, how and why Erlang is not used.\n\nTarget audience:\n\n- Anyone interested in supporting and promoting Erlang adoption, either within their company or within the broader programming community.",meta:{duration:"PT51M55S"},presenter:{name:null},source:{id:"3MvKLOecT1I",provider:"youtube"},slug:"garrett-smith-why-the-cool-kids-dont-use-erlang",tag:["Erlang","Erlang User Conference","Garrett Smith"],thumbnails:{default:{url:"https://i.ytimg.com/vi/3MvKLOecT1I/default.jpg",height:90,width:120}},title:"Garrett Smith - Why The Cool Kids Don't Use Erlang"}},{node:{description:"Most developers know enough about refactoring to write code that's pretty good. They create short methods, and classes with one responsibility. They're also familiar with a good handful of refactorings, and the code smells that motivate them.\n\nThis talk is about the next level of knowledge: the things advanced developers know that let them turn good code into great. Code that's easy to read and a breeze to change.\n\nThese topics will be covered solely by LIVE CODING; no slides. We'll boldly refactor right on stage, and pray the tests stay green. You might even learn some vim tricks as well as an expert user shows you his workflow.\n\nTopics include:\n\nThe Open-Closed Principle The types of coupling, and their dangers Why composition is so damn great A powerful refactoring that Kent Beck refers to as \"deep deep magic\" How to destroy conditionals with a NullObject The beauty of the Decorator pattern Testing smells, including Mystery Guest and stubbing the system under test The stuff from the last halves of Refactoring and Clean Code that you never quite got to.",meta:{duration:"PT44M19S"},presenter:{name:"Ben Orenstein"},source:{id:"DC-pQPq0acs",provider:"youtube"},slug:"refactoring-from-good-to-great",tag:["Aloha Ruby 2012","Refactoring","Ruby","Hawaii"],thumbnails:{default:{url:"https://i.ytimg.com/vi/DC-pQPq0acs/default.jpg",height:90,width:120}},title:"Refactoring from Good to Great"}},{node:{description:"Erlang Factory SF Bay Area 2013\nMore info and slides on the website: http://www.erlang-factory.com/conference/SFBay2013/talks\n\nWe all know that Erlang is great for building complicated distributed systems, but did you know that building a website in Erlang is as easy as using Ruby on Rails? In this talk I'll introduce you to Chicago Boss, the web framework that takes care of all the hard parts of Erlang/OTP for you, letting the developer focus on building a great website. I'll explain why Erlang is an excellent choice for delivering web content, give a high-level overview of the Chicago Boss architecture, and explicate the philosophy behind some of CB's controversial design decisions. In the process we'll cover CB's high-performance template system, its custom compiler chain and language-integrated query syntax, its unique approaches to e-mail and i18n, and everything in between. Some practical code examples will be included at the end. All levels of expertise are welcome.",meta:{duration:"PT45M59S"},presenter:{name:null},source:{id:"LGGo6bIuj8w",provider:"youtube"},slug:"chicago-boss-a-web-framework-built-for-comfort-and-speed-evan-miller",tag:["Erlang","Erlang Factory","Chicago Boss","Evan Miller","Ruby on Rails","Web Framework"],thumbnails:{default:{url:"https://i.ytimg.com/vi/LGGo6bIuj8w/default.jpg",height:90,width:120}},title:"Chicago Boss: A Web Framework Built for Comfort (and Speed) - Evan Miller"}},{node:{description:"Deployment Options: How To Ship New Code Without Taking Your System Down\n\nErlang is quite famous for long-running interruption-free installations. But how is this achieved in practice while still evolving the software?\n\nWe will look at different deployment options, from simple to advanced:\n\n1. Deployment by restart\n\n2. Hot code reloading\n\n3. Release handling\n\nSee hot code reloading in action and learn how to avoid common traps & pitfalls.\n\nTalk objectives: By the end of this talk you shall be able to decide: Which strategy is right for me? What do I have to consider?\n\nTarget audience: General familiarity with Erlang is assumed.",meta:{duration:"PT32M47S"},presenter:{name:null},source:{id:"NfCLCmRi4_Y",provider:"youtube"},slug:"martin-rehfeld-how-to-ship-new-code-without-taking-your-system-down-berlin-erlang-factory-lite",tag:["Erlang","Martin Rehfeld","Deployment Options"],thumbnails:{default:{url:"https://i.ytimg.com/vi/NfCLCmRi4_Y/default.jpg",height:90,width:120}},title:"Martin Rehfeld - How To Ship New Code Without Taking Your System Down -  Berlin Erlang Factory Lite"}},{node:{description:"Are your methods timid? Do they constantly second-guess themselves, checking for nil values, errors, and unexpected input? Even the cleanest Ruby codebases can become littered over time with nil checks, error handling, and other interruptions which steal attention away from the essential purpose of the code. This talk will discuss strategies for writing your Ruby classes and methods in a confident, straightforward style; without sacrificing functionality or robustness. In the process, we'll cover concepts and techniques points including: The narrative style of method construction The four parts of a method Three strategies for dealing with uncertain input Massaging input with coercion and the Decorator pattern Lightweight preconditions Exterminating nils from your code The chaining and iterative styles of method construction Eliminating conditionals with the Special Case and Null Object patterns Isolating errors with the Bouncer and Checked Method patterns",meta:{duration:"PT31M24S"},presenter:{name:null},source:{id:"T8J0j2xJFgQ",provider:"youtube"},slug:"ruby-midwest-2011-confident-code-by-avdi-grimm",tag:["rubymidwest2011","Ruby","Code"],thumbnails:{default:{url:"https://i.ytimg.com/vi/T8J0j2xJFgQ/default.jpg",height:90,width:120}},title:"Ruby Midwest 2011 Confident Code by Avdi Grimm"}},{node:{description:"Erlang Factory SF Bay Area 2013\nMore info and slides on the website: http://www.erlang-factory.com/conference/SFBay2013/talks\n\nSoftware is difficult because the parts don't fit together. Why is this? Can we do anything about this? And what's this got to do with Erlang? Come to my talk and you'll find out!",meta:{duration:"PT46M40S"},presenter:{name:null},source:{id:"ed7A7r6DBsM",provider:"youtube"},slug:"the-how-and-why-of-fitting-things-together-joe-armstrong",tag:["Erlang","Erlang Factory","Joe Armstrong","Keynote"],thumbnails:{default:{url:"https://i.ytimg.com/vi/ed7A7r6DBsM/default.jpg",height:90,width:120}},title:"The How and Why of Fitting Things Together - Joe Armstrong"}},{node:{description:"PBT with tools like QuickCheck and Proper are quite powerful, but building the models to test against is still probably the hardest part. I aim to use a Logic Programming tool (Kanrem or Prolog) to create the model and validate the results.\nTalk objectives:\n\nTo show how to use the powerful tools of logic programming and to how to build models to test Erlang code.\nTarget audience:\n\nThis will appeal to those who really enjoy programming languages and new tools.",meta:{duration:"PT34M45S"},presenter:{name:null},source:{id:"fSCIfsUcY4Y",provider:"youtube"},slug:"zachary-kessin-using-logic-programming-tools-to-drive-property-based-testing",tag:["Erlang","Erlang User Conference","Zachary Kessin","QuickCheck","Proper"],thumbnails:{default:{url:"https://i.ytimg.com/vi/fSCIfsUcY4Y/default.jpg",height:90,width:120}},title:"Zachary Kessin - Using Logic Programming Tools to Drive Property-based Testing"}},{node:{description:"In this talk will discuss the circumstances that led to Erlang, the design choices that were made, what the future holds for Erlang and how it all relates  to building scalable distributed systems now.\nhttp://www.erlang-factory.com/berlin2014/robert-virding\n\nAbout Robert\n\nRobert Virding is Principal Language Expert at Erlang Solutions Ltd. While at Ericsson AB, Robert was one of the original members of the Ericsson Computer Science Lab, and co-inventor of the Erlang language. He took part in the original system design and contributed much of the original libraries, as well as to the current compiler.\n\nWhile at the lab he also did a lot of work on the implementation of logic and functional languages and on garbage collection. He has also worked as an entrepreneur and was one of the co-founders of one of the first Erlang startups (Bluetail). Robert also worked a number of years at the Swedish Defence Materiel Administration (FMV) Modelling and Simulations Group. He co-authored the first book (Prentice-Hall) on Erlang, and is regularly invited to teach and present throughout the world.",meta:{duration:"PT37M24S"},presenter:{name:"Robert Virding"},source:{id:"od6CfA8xEcM",provider:"youtube"},slug:"erlang-evolution",tag:["Erlang Factory Lite","Erlang"],thumbnails:{default:{url:"https://i.ytimg.com/vi/od6CfA8xEcM/default.jpg",height:90,width:120}},title:"Erlang: Evolution"}},{node:{description:'The BEAM, the Erlang VM, was designed to implement Erlang. This has led to that the features it provides and its limitations are different from most other VMs. In this talk we will why the BEAM looks like it does and how this affects the implementation of languages on it. We will also show the Erlang compiler workflow and how to use this when implementing languages. Finally we will show examples of how to "go beyond" the BEAM and implement features for which it was wasn\'t originally designed and the costs this can entail.\n\nAbout Robert:\n\nWhile at Ericsson AB, Robert was one of the original members of the Ericsson Computer Science Lab, and co-inventor of the Erlang language. He took part in the original system design and contributed much of the original libraries, as well as to the current compiler.\n\nWhile at the lab he also did a lot of work on the implementation of logic and functional languages and on garbage collection. He has also worked as an entrepreneur and was one of the co-founders of one of the first Erlang startups (Bluetail). Robert also worked a number of years at the Swedish Defence Materiel Administration (FMV) Modelling and Simulations Group. He co-authored the first book (Prentice-Hall) on Erlang, and is regularly invited to teach and present throughout the world. at present, he is the Principal Language Expert at Erlang Solutions Ltd.',meta:{duration:"PT1H47M47S"},presenter:{name:"Robert Virding"},source:{id:"qm0mbQbc9Kc",provider:"youtube"},slug:"implementing-languages-on-the-beam",tag:["Erlang","BEAM"],thumbnails:{default:{url:"https://i.ytimg.com/vi/qm0mbQbc9Kc/default.jpg",height:90,width:120}},title:"Implementing Languages on the BEAM"}}]}},pathContext:{slug:"elixir-the-power-of-erlang-the-joy-of-ruby",tags:["Erlang","Ruby","GOTO 2014"]}}}});
//# sourceMappingURL=path---talk-elixir-the-power-of-erlang-the-joy-of-ruby-c093c689e459cd51bc01.js.map