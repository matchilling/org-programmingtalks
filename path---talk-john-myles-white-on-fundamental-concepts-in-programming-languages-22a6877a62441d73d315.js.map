{"version":3,"sources":["webpack:///path---talk-john-myles-white-on-fundamental-concepts-in-programming-languages-22a6877a62441d73d315.js","webpack:///./.cache/json/talk-john-myles-white-on-fundamental-concepts-in-programming-languages.json"],"names":["webpackJsonp","3034","module","exports","data","talkJson","description","meta","duration","presenter","name","slug","source","id","provider","tag","title","allTalkJson","edges","node","thumbnails","default","url","height","width","pathContext","tags"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,UAAYC,YAAA,+tCAAAC,MAAqvCC,SAAA,cAAwBC,WAAcC,KAAA,MAAYC,KAAA,oEAAAC,QAAsFC,GAAA,cAAAC,SAAA,WAAwCC,KAAA,8IAAAC,MAAA,qEAAkOC,aAAgBC,QAAUC,MAAQb,YAAA,6dAAAC,MAAmfC,SAAA,aAAuBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,qCAAAI,KAAA,8IAAAK,YAAgNC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,0CAAmDG,MAAQb,YAAA,yEAAAC,MAA+FC,SAAA,YAAsBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,4DAAAI,KAAA,gFAAAK,YAAyKC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,iEAA0EG,MAAQb,YAAA,kjBAAAC,MAAwkBC,SAAA,cAAwBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,2BAAAI,KAAA,+LAAAK,YAAuPC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,8BAAuCG,MAAQb,YAAA,sEAAAC,MAA4FC,SAAA,YAAsBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,gDAAAI,KAAA,wEAAAK,YAAqJC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,sDAA+DG,MAAQb,YAAA,ylEAAAC,MAAmnEC,SAAA,YAAsBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,0DAAAI,KAAA,kIAAAK,YAAyNC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,6DAAsEG,MAAQb,YAAA,4RAAAC,MAAmTC,SAAA,aAAuBC,WAAcC,KAAA,MAAYE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,sDAAAI,KAAA,kRAAAK,YAAqWC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,0DAAmEG,MAAQb,YAAA,w7CAAAC,MAA88CC,SAAA,YAAsBC,WAAcC,KAAA,iCAAuCE,QAAWC,GAAA,cAAAC,SAAA,WAAwCH,KAAA,gEAAAI,KAAA,mCAAAK,YAAgIC,SAAWC,IAAA,iDAAAC,OAAA,GAAAC,MAAA,MAAgFR,MAAA,wCAAgDS,aAAgBd,KAAA,oEAAAe,MAAA","file":"path---talk-john-myles-white-on-fundamental-concepts-in-programming-languages-22a6877a62441d73d315.js","sourcesContent":["webpackJsonp([55612959855759],{\n\n/***/ 3034:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"talkJson\":{\"description\":\"Meetup: http://www.meetup.com/papers-we-love/events/220902753/\\nPaper: http://www.cs.cmu.edu/~crary/819-f09/Strachey67.pdf\\nSlides: http://bit.ly/1BnBb08\\nAudio: http://bit.ly/1HAdXci\\n\\n---------------------------------------------------------------------------------------------\\nSponsored by Two Sigma (@twosigma) and The Ladders (@TheLaddersDev)\\n---------------------------------------------------------------------------------------------\\n\\nDescription\\n---------------\\nStrachey's lectures on \\\"Fundamental Concepts in Programming Languages\\\" provided an extremely broad survey of core issues in programming language design that provided much of the terminology we use today, including definitions of the kinds of polymorphism and the kinds of expressions we see in programming languages. Published as a paper many years later, Strachey's lectures provide an especially readable overview of programming languages concepts.\\n\\nBio\\n----\\nJohn Myles White (@johnmyleswhite) is a Julia hacker who loves thinking about the ways in which the design of technical programming languages influences the way in which we think about statistics and machine learning. He's written two books about machine learning for O'Reilly and works at Facebook.\",\"meta\":{\"duration\":\"PT1H16M39S\"},\"presenter\":{\"name\":null},\"slug\":\"john-myles-white-on-fundamental-concepts-in-programming-languages\",\"source\":{\"id\":\"cO41uoi5cZs\",\"provider\":\"youtube\"},\"tag\":[\"programming languages\",\"paperswelove\",\"Papers We Love\",\"computer science\",\"john myles white\",\"julia\",\"semantics\",\"foundations of computing\"],\"title\":\"John Myles White on Fundamental Concepts in Programming Languages\"},\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Philip Wadler, Professor of Theoretical Computer Science at the University of Edinburgh, contends that the foundations of computing lay in a coincidence: Church's lambda calculus (1933), Herbrand and Godel's recursive functions (1934), and Turing's machines (1935) all defined the same model of computation. \\n\\n\\nHe gave this lecture on the occasion of Princeton University's centennial celebration of Alan Turing. Learn more at www.princeton.edu/turing\\n\\n#turingprinceton\",\"meta\":{\"duration\":\"PT1H3M41S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"2PJ_DbKGFUA\",\"provider\":\"youtube\"},\"slug\":\"philip-wadler-churchs-coincidences\",\"tag\":[\"Philip Wadler\",\"University of Edinburgh\",\"Princeton\",\"Alan Turing\",\"computer science\",\"lambda calculus\",\"Turing machine\",\"#turingprinceton\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/2PJ_DbKGFUA/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Philip Wadler: Church's Coincidences\"}},{\"node\":{\"description\":\"The D Programming Language Conference, May 21-23 2014, Menlo Park, CA.\",\"meta\":{\"duration\":\"PT48M37S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"AhR4PSExnqk\",\"provider\":\"youtube\"},\"slug\":\"dconf-2014-sdc-a-d-compiler-as-a-library-by-amaury-sechet\",\"tag\":[\"D programming language\",\"programming languages\",\"programming\",\"dconf\",\"dlang\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/AhR4PSExnqk/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"DConf 2014: SDC, a D Compiler as a Library by Amaury Sechet\"}},{\"node\":{\"description\":\"(February 9, 2011) Matthew Might focuses on a new way to write parsers and how it will affect computer science in the future. Might discusses these parsers and overall language theory, to help explain how there is demand for better parsing tools and how computer science will be improved in the future. \\n\\n\\nStanford University:\\nhttp://www.stanford.edu/\\n\\nSchool of Engineering:\\nhttp://soe.stanford.edu/\\n\\nStanford Center for Professional Development:\\nhttp://scpd.stanford.edu/\\n\\nStanford University Channel on YouTube:\\nhttp://www.youtube.com/stanford\",\"meta\":{\"duration\":\"PT1H13M10S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"ZzsK8Am6dKU\",\"provider\":\"youtube\"},\"slug\":\"parsing-with-derivatives\",\"tag\":[\"computer science\",\"electrical engineering\",\"parser\",\"code\",\"parsing\",\"computer systems\",\"language\",\"language theory\",\"derivatives\",\"unstructured\",\"structure\",\"sequence\",\"tree\",\"expression\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/ZzsK8Am6dKU/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Parsing with Derivatives\"}},{\"node\":{\"description\":\"Help us caption & translate this video!\\n\\nhttp://amara.org/v/FGYe/\",\"meta\":{\"duration\":\"PT59M32S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"aZXc11eOEpI\",\"provider\":\"youtube\"},\"slug\":\"elixir-conf-2014-keynote-elixir-by-jose-valim\",\"tag\":[\"computer science\",\"technology\",\"elixir\",\"apps\",\"programming\",\"mobile\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/aZXc11eOEpI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Elixir Conf 2014 - Keynote: Elixir by Jose Valim\"}},{\"node\":{\"description\":\"Meetup: http://www.meetup.com/papers-we-love/events/220021234/\\nPaper: https://www.cs.utah.edu/plt/publications/macromod.pdf\\nSlides: http://bit.ly/1KNwpjC\\nAudio: https://www.mixcloud.com/paperswelove/sam-tobin-hochstadt-on-composable-and-compilable-macros/\\n--------------------------------------------------------------------------------------------------------------------------------------------------\\nSponsored by Two Sigma (@twosigma), The Ladders (@TheLaddersDev), and LispNYC (@lispnyc)\\n--------------------------------------------------------------------------------------------------------------------------------------------------\\n\\nDescription\\n---------------\\n\\\"Composable and Compilable Macros\\\" introduces the Racket module system, which addresses the following problem: When you have macros that run programs at compile-time, how does this interact with separate compilation and ahead-of-time compilation. The paper introduces \\\"phases\\\", which enable Racket to behave the same regardless of when and how you compile your program. It also introduces the idea of writing different modules in different languages, which is now used for systems like Typed Racket.\\n\\nA few related papers:\\n\\n- Syntactic Abstraction in Scheme, Dybvig Hieb & Bruggeman, Lisp andSymbolic Computation 1993\\n\\n- Macros that Work Together, Flatt, Findler, Culpepper, & Darais, JFP 2012- Submodules in Racket, Flatt GPCE 2013\\n\\n- Implicit phasing for R6RS libraries,  Ghuloum & Dybvig, ICFP 2007\\n\\n- Extending the scope of syntactic abstraction, Waddell & Dybvig, POPL 1999 \\n\\nBio\\n----\\nSam Tobin-Hochstadt (@samth) is an Assistant Professor in the School of Informatics and Computing at Indiana University. He has worked on dynamic languages, type systems, module systems, and metaprogramming, including creating the Typed Racket system and popularizing the phrase “scripts to programs.” He is a member of the ECMA TC39 working group responsible for standardizing JavaScript, where he co-designed the module system for ES6, the next version of JavaScript. He received his PhD in 2010 from Northeastern University under Matthias Felleisen.\",\"meta\":{\"duration\":\"PT54M49S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"pK2E63mhRxI\",\"provider\":\"youtube\"},\"slug\":\"sam-tobin-hochstadt-on-composable-and-compilable-macros\",\"tag\":[\"Computer Programming (Conference Subject)\",\"Programming Languages\",\"Macros\",\"Racket\",\"Modules\",\"Scheme\",\"Papers We Love\",\"ICFP\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/pK2E63mhRxI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Sam Tobin-Hochstadt on Composable and Compilable Macros\"}},{\"node\":{\"description\":\"Andrew Odlyzko, Professor of Mathematics at the University of Minnesota, discusses \\\"Turing and the Riemann zeta function\\\" in a lecture given on the occasion of Princeton University's centennial celebration of Alan Turing. Learn more at www.princeton.edu/turing\\n\\n#turingprinceton\",\"meta\":{\"duration\":\"PT1H6M54S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"pQS7X_8iTCA\",\"provider\":\"youtube\"},\"slug\":\"andrew-odlyzko-turing-and-the-riemann-zeta-function\",\"tag\":[\"in\",\"lecture\",\"given\",\"on\",\"the\",\"occasion\",\"of\",\"Princeton\",\"University's\",\"centennial\",\"celebration\",\"Alan\",\"Turing.\",\"Learn\",\"more\",\"at\",\"Odlyzko\",\"#turingprinceton\",\"University of Minnesota\",\"Riemann zeta function\",\"Alan Turing\",\"Turing centennial\",\"computer science\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/pQS7X_8iTCA/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Andrew Odlyzko: Turing and the Riemann zeta function\"}},{\"node\":{\"description\":\"Clojure is a dynamic programming language created by Rich Hickey that targets both the Java Virtual Machine and the CLR. It is designed to be a general-purpose language, combining the approachability and interactive development of a scripting language with an efficient and robust infrastructure for multithreaded programming. Clojure is a compiled language - it compiles directly to JVM bytecode, yet remains completely dynamic. Every feature supported by Clojure is supported at runtime. Clojure provides easy access to the Java frameworks, with optional type hints and type inference, to ensure that calls to Java can avoid reflection.\\n\\nClojure is a dialect of Lisp, and shares with Lisp the code-as-data philosophy and a powerful macro system. Clojure is predominantly a functional programming language, and features a rich set of immutable, persistent data structures. When mutable state is needed, Clojure offers a software transactional memory system and reactive Agent system that ensure clean, correct, multithreaded designs.\\n\\nAstrophysicist and Software Architect Brian Beckman interviews Rich Hickey to dig into the details of this very interesting language. If you don't know much about Clojure and the general problems it aims to solve, well, watch and listen carefully to this great conversation with plenty of whiteboarding and outstanding questions. Expert to Expert simply rocks! Thank you for spending time with us, Rich! Clojure is great!\",\"meta\":{\"duration\":\"PT53M56S\"},\"presenter\":{\"name\":\"Rich Hickey and Brian Beckman\"},\"source\":{\"id\":\"wASCH_gPnDw\",\"provider\":\"youtube\"},\"slug\":\"expert-to-expert-rich-hickey-and-brian-beckman-inside-clojure\",\"tag\":[\"clojure\",\"programming languages\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/wASCH_gPnDw/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Expert to Expert: Inside Clojure\"}}]}},\"pathContext\":{\"slug\":\"john-myles-white-on-fundamental-concepts-in-programming-languages\",\"tags\":[\"programming languages\",\"paperswelove\",\"Papers We Love\",\"computer science\",\"john myles white\",\"julia\",\"semantics\",\"foundations of computing\"]}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---talk-john-myles-white-on-fundamental-concepts-in-programming-languages-22a6877a62441d73d315.js","module.exports = {\"data\":{\"talkJson\":{\"description\":\"Meetup: http://www.meetup.com/papers-we-love/events/220902753/\\nPaper: http://www.cs.cmu.edu/~crary/819-f09/Strachey67.pdf\\nSlides: http://bit.ly/1BnBb08\\nAudio: http://bit.ly/1HAdXci\\n\\n---------------------------------------------------------------------------------------------\\nSponsored by Two Sigma (@twosigma) and The Ladders (@TheLaddersDev)\\n---------------------------------------------------------------------------------------------\\n\\nDescription\\n---------------\\nStrachey's lectures on \\\"Fundamental Concepts in Programming Languages\\\" provided an extremely broad survey of core issues in programming language design that provided much of the terminology we use today, including definitions of the kinds of polymorphism and the kinds of expressions we see in programming languages. Published as a paper many years later, Strachey's lectures provide an especially readable overview of programming languages concepts.\\n\\nBio\\n----\\nJohn Myles White (@johnmyleswhite) is a Julia hacker who loves thinking about the ways in which the design of technical programming languages influences the way in which we think about statistics and machine learning. He's written two books about machine learning for O'Reilly and works at Facebook.\",\"meta\":{\"duration\":\"PT1H16M39S\"},\"presenter\":{\"name\":null},\"slug\":\"john-myles-white-on-fundamental-concepts-in-programming-languages\",\"source\":{\"id\":\"cO41uoi5cZs\",\"provider\":\"youtube\"},\"tag\":[\"programming languages\",\"paperswelove\",\"Papers We Love\",\"computer science\",\"john myles white\",\"julia\",\"semantics\",\"foundations of computing\"],\"title\":\"John Myles White on Fundamental Concepts in Programming Languages\"},\"allTalkJson\":{\"edges\":[{\"node\":{\"description\":\"Philip Wadler, Professor of Theoretical Computer Science at the University of Edinburgh, contends that the foundations of computing lay in a coincidence: Church's lambda calculus (1933), Herbrand and Godel's recursive functions (1934), and Turing's machines (1935) all defined the same model of computation. \\n\\n\\nHe gave this lecture on the occasion of Princeton University's centennial celebration of Alan Turing. Learn more at www.princeton.edu/turing\\n\\n#turingprinceton\",\"meta\":{\"duration\":\"PT1H3M41S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"2PJ_DbKGFUA\",\"provider\":\"youtube\"},\"slug\":\"philip-wadler-churchs-coincidences\",\"tag\":[\"Philip Wadler\",\"University of Edinburgh\",\"Princeton\",\"Alan Turing\",\"computer science\",\"lambda calculus\",\"Turing machine\",\"#turingprinceton\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/2PJ_DbKGFUA/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Philip Wadler: Church's Coincidences\"}},{\"node\":{\"description\":\"The D Programming Language Conference, May 21-23 2014, Menlo Park, CA.\",\"meta\":{\"duration\":\"PT48M37S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"AhR4PSExnqk\",\"provider\":\"youtube\"},\"slug\":\"dconf-2014-sdc-a-d-compiler-as-a-library-by-amaury-sechet\",\"tag\":[\"D programming language\",\"programming languages\",\"programming\",\"dconf\",\"dlang\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/AhR4PSExnqk/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"DConf 2014: SDC, a D Compiler as a Library by Amaury Sechet\"}},{\"node\":{\"description\":\"(February 9, 2011) Matthew Might focuses on a new way to write parsers and how it will affect computer science in the future. Might discusses these parsers and overall language theory, to help explain how there is demand for better parsing tools and how computer science will be improved in the future. \\n\\n\\nStanford University:\\nhttp://www.stanford.edu/\\n\\nSchool of Engineering:\\nhttp://soe.stanford.edu/\\n\\nStanford Center for Professional Development:\\nhttp://scpd.stanford.edu/\\n\\nStanford University Channel on YouTube:\\nhttp://www.youtube.com/stanford\",\"meta\":{\"duration\":\"PT1H13M10S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"ZzsK8Am6dKU\",\"provider\":\"youtube\"},\"slug\":\"parsing-with-derivatives\",\"tag\":[\"computer science\",\"electrical engineering\",\"parser\",\"code\",\"parsing\",\"computer systems\",\"language\",\"language theory\",\"derivatives\",\"unstructured\",\"structure\",\"sequence\",\"tree\",\"expression\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/ZzsK8Am6dKU/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Parsing with Derivatives\"}},{\"node\":{\"description\":\"Help us caption & translate this video!\\n\\nhttp://amara.org/v/FGYe/\",\"meta\":{\"duration\":\"PT59M32S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"aZXc11eOEpI\",\"provider\":\"youtube\"},\"slug\":\"elixir-conf-2014-keynote-elixir-by-jose-valim\",\"tag\":[\"computer science\",\"technology\",\"elixir\",\"apps\",\"programming\",\"mobile\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/aZXc11eOEpI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Elixir Conf 2014 - Keynote: Elixir by Jose Valim\"}},{\"node\":{\"description\":\"Meetup: http://www.meetup.com/papers-we-love/events/220021234/\\nPaper: https://www.cs.utah.edu/plt/publications/macromod.pdf\\nSlides: http://bit.ly/1KNwpjC\\nAudio: https://www.mixcloud.com/paperswelove/sam-tobin-hochstadt-on-composable-and-compilable-macros/\\n--------------------------------------------------------------------------------------------------------------------------------------------------\\nSponsored by Two Sigma (@twosigma), The Ladders (@TheLaddersDev), and LispNYC (@lispnyc)\\n--------------------------------------------------------------------------------------------------------------------------------------------------\\n\\nDescription\\n---------------\\n\\\"Composable and Compilable Macros\\\" introduces the Racket module system, which addresses the following problem: When you have macros that run programs at compile-time, how does this interact with separate compilation and ahead-of-time compilation. The paper introduces \\\"phases\\\", which enable Racket to behave the same regardless of when and how you compile your program. It also introduces the idea of writing different modules in different languages, which is now used for systems like Typed Racket.\\n\\nA few related papers:\\n\\n- Syntactic Abstraction in Scheme, Dybvig Hieb & Bruggeman, Lisp andSymbolic Computation 1993\\n\\n- Macros that Work Together, Flatt, Findler, Culpepper, & Darais, JFP 2012- Submodules in Racket, Flatt GPCE 2013\\n\\n- Implicit phasing for R6RS libraries,  Ghuloum & Dybvig, ICFP 2007\\n\\n- Extending the scope of syntactic abstraction, Waddell & Dybvig, POPL 1999 \\n\\nBio\\n----\\nSam Tobin-Hochstadt (@samth) is an Assistant Professor in the School of Informatics and Computing at Indiana University. He has worked on dynamic languages, type systems, module systems, and metaprogramming, including creating the Typed Racket system and popularizing the phrase “scripts to programs.” He is a member of the ECMA TC39 working group responsible for standardizing JavaScript, where he co-designed the module system for ES6, the next version of JavaScript. He received his PhD in 2010 from Northeastern University under Matthias Felleisen.\",\"meta\":{\"duration\":\"PT54M49S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"pK2E63mhRxI\",\"provider\":\"youtube\"},\"slug\":\"sam-tobin-hochstadt-on-composable-and-compilable-macros\",\"tag\":[\"Computer Programming (Conference Subject)\",\"Programming Languages\",\"Macros\",\"Racket\",\"Modules\",\"Scheme\",\"Papers We Love\",\"ICFP\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/pK2E63mhRxI/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Sam Tobin-Hochstadt on Composable and Compilable Macros\"}},{\"node\":{\"description\":\"Andrew Odlyzko, Professor of Mathematics at the University of Minnesota, discusses \\\"Turing and the Riemann zeta function\\\" in a lecture given on the occasion of Princeton University's centennial celebration of Alan Turing. Learn more at www.princeton.edu/turing\\n\\n#turingprinceton\",\"meta\":{\"duration\":\"PT1H6M54S\"},\"presenter\":{\"name\":null},\"source\":{\"id\":\"pQS7X_8iTCA\",\"provider\":\"youtube\"},\"slug\":\"andrew-odlyzko-turing-and-the-riemann-zeta-function\",\"tag\":[\"in\",\"lecture\",\"given\",\"on\",\"the\",\"occasion\",\"of\",\"Princeton\",\"University's\",\"centennial\",\"celebration\",\"Alan\",\"Turing.\",\"Learn\",\"more\",\"at\",\"Odlyzko\",\"#turingprinceton\",\"University of Minnesota\",\"Riemann zeta function\",\"Alan Turing\",\"Turing centennial\",\"computer science\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/pQS7X_8iTCA/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Andrew Odlyzko: Turing and the Riemann zeta function\"}},{\"node\":{\"description\":\"Clojure is a dynamic programming language created by Rich Hickey that targets both the Java Virtual Machine and the CLR. It is designed to be a general-purpose language, combining the approachability and interactive development of a scripting language with an efficient and robust infrastructure for multithreaded programming. Clojure is a compiled language - it compiles directly to JVM bytecode, yet remains completely dynamic. Every feature supported by Clojure is supported at runtime. Clojure provides easy access to the Java frameworks, with optional type hints and type inference, to ensure that calls to Java can avoid reflection.\\n\\nClojure is a dialect of Lisp, and shares with Lisp the code-as-data philosophy and a powerful macro system. Clojure is predominantly a functional programming language, and features a rich set of immutable, persistent data structures. When mutable state is needed, Clojure offers a software transactional memory system and reactive Agent system that ensure clean, correct, multithreaded designs.\\n\\nAstrophysicist and Software Architect Brian Beckman interviews Rich Hickey to dig into the details of this very interesting language. If you don't know much about Clojure and the general problems it aims to solve, well, watch and listen carefully to this great conversation with plenty of whiteboarding and outstanding questions. Expert to Expert simply rocks! Thank you for spending time with us, Rich! Clojure is great!\",\"meta\":{\"duration\":\"PT53M56S\"},\"presenter\":{\"name\":\"Rich Hickey and Brian Beckman\"},\"source\":{\"id\":\"wASCH_gPnDw\",\"provider\":\"youtube\"},\"slug\":\"expert-to-expert-rich-hickey-and-brian-beckman-inside-clojure\",\"tag\":[\"clojure\",\"programming languages\"],\"thumbnails\":{\"default\":{\"url\":\"https://i.ytimg.com/vi/wASCH_gPnDw/default.jpg\",\"height\":90,\"width\":120}},\"title\":\"Expert to Expert: Inside Clojure\"}}]}},\"pathContext\":{\"slug\":\"john-myles-white-on-fundamental-concepts-in-programming-languages\",\"tags\":[\"programming languages\",\"paperswelove\",\"Papers We Love\",\"computer science\",\"john myles white\",\"julia\",\"semantics\",\"foundations of computing\"]}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/talk-john-myles-white-on-fundamental-concepts-in-programming-languages.json\n// module id = 3034\n// module chunks = 55612959855759"],"sourceRoot":""}